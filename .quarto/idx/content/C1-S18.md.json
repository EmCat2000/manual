{"title":"Libraries","markdown":{"headingText":"Libraries","containsRefs":false,"markdown":"\n![](assets/images/image384.png)\n<!-- {width=\"31px\" height=\"17px\"} -->\n![](assets/images/image385.png)\n<!-- {width=\"711px\" height=\"311px\"} -->\nThere are several collections of useful\nprocedures that aren't Snap*!* primitives, but are provided as\nlibraries. To include a library in your project, choose the Libraries...\noption in the file ( ) menu.\n\nWhen you click on the one-line description of a library, you are shown\nthe actual blocks in the library and a longer explanation of its\npurpose. You can browse the libraries to find one that will satisfy your\nneeds.\n\nThe libraries and their contents may change, but as of this writing the\nlist library has these blocks:\n\n![](assets/images/image387.png)\n<!-- {width=\"177px\" height=\"239px\"} -->\n (The lightning bolt before the name in\nseveral of these blocks means that they use compiled HOFs or JavaScript\nprimitives to achieve optimal speed. They are officially considered\nexperimental.) Remove duplicates from reports a list in which no two\nitems are equal. The sort block takes a list and a two-input comparison\npredicate, such as \\<, and reports a list with the items sorted\naccording to that comparison. The assoc block is for looking up a key in\nan *association list:* a list of two-item lists. In each two-item list,\nthe first is a *key* and the second is a *value.* The inputs are a key\nand an association list; the block reports the first key-value pair\nwhose key is equal to the input key.\n\nFor each item is a variant of the primitive version that provides a \\#\nvariable containing the position in the input list of the currently\nconsidered item. Multimap is a version of map that allows multiple list\ninputs, in which case the mapping function must take as many inputs as\nthere are lists; it will be called with all the first items, all the\nsecond items, and so on. Zip takes any number of lists as inputs; it\nreports a list of lists: all the first items, all the second items, and\nso on. The no-name identity function reports its input.\n\nSentence and sentence➔list are borrowed from the word and sentence\nlibrary (page 27) to serve as a variant of append that accepts non-lists\nas inputs. Printable takes a list structure of any depth as input and\nreports a compact representation of the list as a text string.\n\nThe iteration, composition library has these blocks:\n\n![](assets/images/image388.png)\n<!-- {width=\"162px\" height=\"456px\"} -->\nCatch and throw provide a nonlocal exit facility. You\ncan drag the tag from a catch block to a throw inside its C-slot, and\nthe throw will then jump directly out to the matching catch without\ndoing anything in between.\n\nIf do and pause all is for setting a breakpoint while debugging code.\nThe idea is to put show variable blocks for local variables in the\nC-slot; the watchers will be deleted when the user continues from the\npause.\n\nIgnore is used when you need to call a reporter but you don't care about\nthe value it reports. (For example, you are writing a script to time how\nlong the reporter takes.)\n\nThe cascade blocks take an initial value and call a function repeatedly\non that value, *f*(*f*(*f*(*f*...(*x*)))).\n\nThe compose block takes two functions and reports the function\n*f*(*g*(*x*)).\n\n![](assets/images/image389.png)\n<!-- {width=\"100px\" height=\"15px\"} -->\n![](assets/images/image390.png)\n<!-- {width=\"303px\" height=\"29px\"} -->\nThe first three repeat blocks are variants\nof the primitive repeat until block, giving all four combinations of\nwhether the first test happens before or after the first repetition, and\nwhether the condition must be true or false to continue repeating. The\nlast repeat block is like the repeat primitive, but makes the number of\nrepetitions so far available to the repeated script. The next two blocks\nare variations on for: the first allows an explicit step instead of\nusing ±1, and the second allows any values, not just numbers; inside the\nscript you say\n\n![](assets/images/image391.png)\n<!-- {width=\"330px\" height=\"131px\"} -->\n![](assets/images/image392.png)\n<!-- {width=\"356px\" height=\"112px\"} -->\nreplacing the grey block in the picture\nwith an expression to give the next desired value for the loop index.\nPipe allows reordering a nested composition with a left-to-right one:\n\nThe stream library has these blocks:\n\n![](assets/images/image393.png)\n<!-- {width=\"303px\" height=\"207px\"} -->\n*Streams* are a special kind of list whose\nitems are not computed until they are needed. This makes certain\ncomputations more efficient, and also allows the creation of lists with\ninfinitely many items, such as a list of all the positive integers. The\nfirst five blocks are stream versions of the list blocks in front of,\nitem 1 of, all but first of, map, and keep. Show stream takes a stream\nand a number as inputs, and reports an ordinary list of the first *n*\nitems of the stream. Stream is like the primitive list; it makes a\nfinite stream from explicit items. Sieve is an example block that takes\nas input the stream of integers starting with 2 and reports the stream\nof all the prime numbers. Stream with numbers from is like the numbers\nfrom block for lists, except that there is no endpoint; it reports an\ninfinite stream of numbers.\n\nThe word and sentence library has these blocks:\n\n![](assets/images/image394.png)\n<!-- {width=\"161px\" height=\"350px\"} -->\nThis library has the goal of recreating\nthe Logo approach to handling text: A text isn't best viewed as a string\nof characters, but rather as a *sentence*, made of *words,* each of\nwhich is a string of *letters.* With a few specialized exceptions, this\nis why people put text into computers: The text is sentences of natural\n(i.e., human) language, and the emphasis is on words as constitutive of\nsentences. You barely notice the letters of the words, and you don't\nnotice the spaces between them at all, unless you're proof-reading.\n(Even then: Proofreading is *diffciult,* because you see what you expect\nto see, what will make the snetence make sense, rather than the\nmisspelling in front of of your eyes.) Internally, Logo stores a\nsentence as a list of words, and a word as a string of letters.\n\nInexplicably, the designers of Scratch chose to abandon that tradition,\nand to focus on the representation of text as a string of characters.\nThe one vestige of the Logo tradition from which Scratch developed is\nthe block named letter (1) of (world), rather than character (1) of\n(world). Snap*!* inherits its text handling from Scratch.\n\nIn Logo, the visual representation of a sentence (a list of words) looks\nlike a natural language sentence: a string of words with spaces between\nthem. In Snap*!*, the visual representation of a list looks nothing at\nall like natural language. On the other hand, representing a sentence as\na string means that the program must continually re-parse the text on\nevery operation, looking for spaces, treating multiple consecutive\nspaces as one, and so on. Also, it's more convenient to treat a sentence\nas a list of words rather than a string of words because in the former\ncase you can use the higher order functions map, keep, and combine on\nthem. This library attempts to be agnostic as to the internal\nrepresentation of sentences. The sentence selectors accept any\ncombination of lists and strings; there are two sentence constructors,\none to make a string (join words) and one to make a list (sentence).\n\nThe selector names come from Logo, and should be self-explanatory.\nHowever, because in a block language you don't have to type the block\nname, instead of the terse butfirst or the cryptic bf we spell out \"all\nbut first of\" and include \"word\" or \"sentence\" to indicate the intended\ndomain. There's no first letter of block because letter 1 of serves that\nneed. Join words (the sentence-as-string constructor) is like the\nprimitive join except that it puts a space in the reported value between\neach of the inputs. Sentence (the List-colored sentence-as-list\nconstructor) accepts any number of inputs, which can be words,\nsentences-as-lists, or sentences-as-strings. (If inputs are lists of\nlists, only one level of flattening is done.) Sentence reports a list of\nwords; there will be no empty words or words containing spaces. The four\nblocks with right-arrows in their names convert back and forth between\ntext strings (words or sentences) and lists. (Splitting a word into a\nlist of letters is unusual unless you're a linguist investigating\northography.) Printable takes a list (including a deep list) of words as\ninput and reports a text string in which parentheses are used to show\nthe structure, as in Lisp/Scheme.\n\nThe pixels library has one block:\n\n![](assets/images/image395.png)\n<!-- {width=\"75px\" height=\"60px\"} -->\nCostumes are first class data in Snap*!*.\nMost of the processing of costume data is done by primitive blocks in\nthe Looks category. (See page 79.) This library provides snap, which\ntakes a picture using your computer's camera and reports it as a\ncostume.\n\nThe bar charts library has these blocks:\n\n![](assets/images/image396.png)\n<!-- {width=\"329px\" height=\"184px\"} -->\nBar chart takes a table (typically from a\nCSV data set) as input and reports a summary of the table grouped by the\nfield in the specified column number. The remaining three inputs are\nused only if the field values are numbers, in which case they can be\ngrouped into buckets (e.g., decades, centuries, etc.). Those inputs\nspecify the smallest and largest values of interest and, most\nimportantly, the width of a bucket (10 for decades, 100 for centuries).\nIf the field isn\\'t numeric, leave these three inputs empty or set them\nto zero. Each string value of the field is its own bucket, and they\nappear sorted alphabetically.\n\nBar chart reports a new table with three columns. The first column\ncontains the bucket name or smallest number. The second column contains\na nonnegative integer that says how many records in the input table fall\ninto this bucket. The third column is a subtable containing the actual\nrecords from the original table that fall into the bucket. Plot bar\nchart takes the table reported by bar chart and graphs it on the stage,\nwith axes labelled appropriately. The remaining blocks are helpers for\nthose.\n\nIf your buckets aren\\'t of constant width, or you want to group by some\nfunction of more than one field, load the \\\"Frequency Distribution\nAnalysis\\\" library instead.\n\nThe multi-branched conditional library has these blocks:\n\n![](assets/images/image397.png)\n<!-- {width=\"178px\" height=\"238px\"} -->\nThe catch and throw blocks duplicate ones\nin the iteration library, and are included because they are used to\nimplement the others. The cases block sets up a multi-branch\nconditional, similar to cond in Lisp or switch in C-family languages.\nThe first branch is built into the cases block; it consists of a Boolean\ntest in the first hexagonal slot and an action script, in the C-slot, to\nbe run if the test reports true. The remaining branches go in the\nvariadic hexagonal input at the end; each branch consists of an else if\nblock, which includes the Boolean test and the corresponding action\nscript, except possibly for the last branch, which can use the\nunconditional else block. As in other languages, once a branch succeeds,\nno other branches are tested.\n\n###\n\nThe variadic library has these blocks:\n\n![](assets/images/image398.png)\n<!-- {width=\"115px\" height=\"40px\"} -->\nThese are versions of the associative\noperators and, and or that take any number of inputs instead of exactly\ntwo inputs. As with any variadic input, you can also drop a list of\nvalues onto the arrowheads instead of providing the inputs one at a time\nAs of version 8.0, the arithmetic operators sum, product, minimum, and\nmaximum are no longer included, because the primitive operators +. ×,\nmin, and max are themselves variadic.\n\n![](assets/images/image399.png)\n<!-- {width=\"699px\" height=\"106px\"} -->\nThe colors and crayons library has these\nblocks:\n\nIt is intended as a more powerful replacement for the primitive set pen\nblock, including *first class color* support; HSL color specification as\na better alternative to the HSV that Snap*!* inherits from JavaScript; a\n\"fair hue\" scale that compensates for the eye's grouping a wide range of\nlight frequencies as green while labelling mere slivers as orange or\nyellow; the X11/W3C standard color names; RGB in hexadecimal; a linear\ncolor scale (as in the old days, but better) based on fair hues and\nincluding shades (darker colors) and grayscale. Another linear scale is\na curated set of 100 \"crayons,\" explained further on the next page.\n\n![](assets/images/image409.png)\n<!-- {width=\"294px\" height=\"219px\"} -->\n![](assets/images/image413.png)\n<!-- {width=\"109px\" height=\"22px\"} -->\n![](assets/images/image414.png)\n<!-- {width=\"91px\" height=\"22px\"} -->\nColors are created by the block (for direct user\nselection), the color from block to specify a color numerically, or by ,\nwhich reports the color currently in use by the pen. The from color\nblock reports names or numbers associated with a color:\n\n![](assets/images/image415.png)\n<!-- {width=\"464px\" height=\"41px\"} -->\nColors can be created from other colors:\n\nThe three blocks with pen in their names are improved versions of\nprimitive Pen blocks. In principle set pen, for example, could be\nimplemented using a (hypothetical) set pen to color composed with the\ncolor from block, but in fact set pen benefits from knowing how the pen\ncolor was set in its previous invocation, so it's implemented separately\nfrom color from. Details in Appendix A.\n\n![](assets/images/image416.png)\n<!-- {width=\"720px\" height=\"24px\"} -->\nThe recommended way to choose a color is from one of two\nlinear scales: the continuous *color numbers* and the discrete\n*crayons:*\n\n![](assets/images/image417.png)\n<!-- {width=\"720px\" height=\"24px\"} -->\n\n\n![](assets/images/image418.png)\n<!-- {width=\"384px\" height=\"20px\"} -->\nColor numbers are based on *fair hues,* a\nmodification of the spectrum (rainbow) hue scale that devotes less space\nto green and more to orange and yellow, as well as promoting brown to a\nreal color. Here is the normal hue scale, for reference:\n\n![](assets/images/image419.png)\n<!-- {width=\"384px\" height=\"20px\"} -->\nHere is the fair hue scale:\n\n![](assets/images/image416.png)\n<!-- {width=\"480px\" height=\"20px\"} -->\nHere is the color number scale:\n\n(The picture is wider so that pure spectral colors line up with the fair\nhue scale.)\n\n![](assets/images/image417.png)\n<!-- {width=\"480px\" height=\"20px\"} -->\nAnd here are the 100 crayons:\n\nThe color from block, for example, provides different pulldown menus\ndepending on which scale you choose:\n\n![](assets/images/image420.png)\n<!-- {width=\"232px\" height=\"33px\"} -->\n![](assets/images/image421.png)\n<!-- {width=\"679px\" height=\"275px\"} -->\nYou can also type the crayon name: There\nare many scales:\n\n![](assets/images/image427.png)\n<!-- {width=\"412px\" height=\"183px\"} -->\n\n\n![](assets/images/image428.png)\n<!-- {width=\"590px\" height=\"51px\"} -->\n The white slot at the end of some of the\nblocks has two purposes. It can be used to add a transparency to a color\n(0=opaque, 100=transparent):\n\n![](assets/images/image432.png)\n<!-- {width=\"675px\" height=\"41px\"} -->\nor it can be expanded to enter three or\nfour numbers for a vector directly into the block, so these are\nequivalent:\n\n![](assets/images/image436.png)\n<!-- {width=\"719px\" height=\"41px\"} -->\nBut note that a transparency number in a\nfour-number RGBA vector is on the scale 255=opaque, 0=transparent, so\nthe following are *not* equivalent:\n\nSet pen crayon to provides the equivalent of a box of 100 crayons. They\nare divided into color groups, so the menu in the set pen crayon to\ninput slot has submenus. The colors are chosen so that starting\n![](assets/images/image440.png)\n<!-- {width=\"419px\" height=\"49px\"} -->\nfrom crayon 0, change pen crayon by 10\nrotates through an interesting, basic set of ten colors:\n\n![](assets/images/image441.png)\n<!-- {width=\"418px\" height=\"27px\"} -->\nUsing change pen crayon by 5 instead\ngives ten more colors, for a total of 20:\n\n(Why didn't we use the colors of the 100-crayon Crayola™ box? A few\nreasons, one of which is that some Crayola colors aren't representable\non RGB screens. Some year when you have nothing else to do, look up\n\"color space\" on Wikipedia. Also \"crayon.\" Oh, it's deliberate that\nchange pen crayon by 5 doesn't include white, since that's the usual\nstage background color. White is crayon 14.) Note that crayon 43 is\n\n\"Variables\"; all the standard block colors are included.\n\nSee Appendix A (page 139) for more information.\n\n![](assets/images/image442.png)\n<!-- {width=\"145px\" height=\"86px\"} -->\nThe **crayon library** has only the crayon features,\nwithout the rest of the colors package.\n\nThe catch errors library has these blocks:\n\n![](assets/images/image443.png)\n<!-- {width=\"41px\" height=\"15px\"} -->\n![](assets/images/image444.png)\n<!-- {width=\"292px\" height=\"134px\"} -->\nThe safely try block allows you to handle\nerrors that happen when your program is run within the program, instead\nof stopping the script with a red halo and an obscure error message. The\nblock runs the script in its first C-slot. If it finishes without an\nerror, nothing else happens. But if an error happens, the code in the\nsecond C-slot is run. While that second script is running, the variable\ncontains the text of the error message that would have been displayed if\nyou weren't catching the error. The error block is sort of the opposite:\nit lets your program *generate* an error message, which will be\ndisplayed with a red halo unless it is caught by safely try. Safely try\nreporting is the reporter version of safely try.\n\nThe text costumes library has only two blocks:\n\n![](assets/images/image445.png)\n<!-- {width=\"51px\" height=\"20px\"} -->\n![](assets/images/image446.png)\n<!-- {width=\"184px\" height=\"43px\"} -->\nCostume from text reports a costume that\ncan be used with the switch to\n![](assets/images/image447.png)\n<!-- {width=\"313px\" height=\"18px\"} -->\ncostume block to make a button:\n\nCostume with background reports a costume made from another costume by\ncoloring its background, taking a color input like the set pen color to\nRGB(A) block and a number of turtle steps of padding around the original\ncostume. These two blocks work together to make even better buttons:\n\n![](assets/images/image448.png)\n<!-- {width=\"529px\" height=\"65px\"} -->\n\n\nThe text to speech library has these blocks:\n\n![](assets/images/image449.png)\n<!-- {width=\"218px\" height=\"77px\"} -->\nThis library interfaces with a capability in up-to-date\nbrowsers, so it might not work for you. It works best if the accent\nmatches the text!\n\nThe parallelization library contains these blocks:\n\n![](assets/images/image450.png)\n<!-- {width=\"113px\" height=\"121px\"} -->\nThe two do in parallel blocks take any\nnumber of scripts as inputs. Those scripts will be run in parallel, like\nordinary independent scripts in the scripting area. The and wait version\nwaits until all of those scripts have finished before continuing the\nscript below the block.\n\n![](assets/images/image451.png)\n<!-- {width=\"132px\" height=\"142px\"} -->\nThe create variables library has these\nblocks:\n\nThese blocks allow a program to perform the same operation as the\n\nbutton, making global, sprite local, or script variables, but allowing\nthe program to compute the variable name(s). It can also set and find\nthe values of these variables, show and hide their stage watchers,\ndelete them, and find out if they already exist.\n\nThe getters and setters library has these blocks:\n\n![](assets/images/image452.png)\n<!-- {width=\"180px\" height=\"101px\"} -->\n![](assets/images/image453.png)\n<!-- {width=\"28px\" height=\"16px\"} -->\nThe purpose of this library is to allow\nprogram access to the settings controlled by user interface elements,\nsuch as the settings menu. The setting block reports a setting; the set\nflag block sets yes-or-no options that have checkboxes in the user\ninterface, while the set value block controls settings with numeric or\ntext values, such as project name.\n\nCertain settings are ordinarily remembered on a per-user basis, such as\nthe \"zoom blocks\" value. But when these settings are changed by this\nlibrary, the change is in effect only while the project using the\nlibrary is loaded. No permanent changes are made. Note: this library has\nnot been converted for version 7.0, so you'll have to enable Javascript\nextensions to use it.\n\nThe bignums, rationals, complex \\#s library has these blocks:\n\n![](assets/images/image454.png)\n<!-- {width=\"180px\" height=\"149px\"} -->\nThe USE BIGNUMS block takes a Boolean input, to turn the\ninfinite precision feature on or off. When on, all of the arithmetic\noperators are redefined to accept and report integers of any number of\ndigits (limited only by the memory of your computer) and, in fact, the\nentire Scheme numeric tower, with exact rationals and with complex\nnumbers. The Scheme number block has a list of functions applicable to\nScheme numbers, including subtype predicates such as rational? and\ninfinite?, and selectors such as numerator and real-part.\n\n![](assets/images/image455.png)\n<!-- {width=\"464px\" height=\"40px\"} -->\nThe ! block computes the factorial\nfunction, useful to test whether bignums are turned on. Without bignums:\n\nWith bignums:\n\n![](assets/images/image459.png)\n<!-- {width=\"723px\" height=\"35px\"} -->\nThe 375-digit value of 200! isn't\nreadable on this page, but if you right-click on the block and choose\n\"result pic,\" you can open the resulting picture in a browser window and\nscroll through it. (These values end with a bunch of zero digits. That's\nnot roundoff error; the prime factors of 100! and 200! include many\ncopies of 2 and 5.) The block with no name is a way to enter things like\n3/4 and 4+7i into numeric input slots by converting the slot to Any\ntype.\n\nThe strings, multi-line input library provides these blocks:\n\n![](assets/images/image463.png)\n<!-- {width=\"378px\" height=\"196px\"} -->\nAll of these could be written in Snap*!*\nitself, but these are implemented using the corresponding JavaScript\nlibrary functions directly, so they run fast. They can be used, for\nexample, in scraping data from a web site. The command use\ncase-independent comparisons applies only to this library. The multiline\nblock accepts and reports a text input that can include newline\ncharacters.\n\nThe animation library has these blocks:\n\n![](assets/images/image464.png)\n<!-- {width=\"385px\" height=\"224px\"} -->\nDespite the name, this isn't only about graphics; you\ncan animate the values of a variable, or anything else that's expressed\nnumerically.\n\n![](assets/images/image465.png)\n<!-- {width=\"93px\" height=\"19px\"} -->\nThe central idea of this library is an\n*easing function,* a reporter whose domain and range are real numbers\nbetween 0 and 1 inclusive. The function represents what fraction of the\n\"distance\" (in quotes because it might be any numeric value, such as\ntemperature in a simulation of weather) from here to there should be\ncovered in what fraction of the time. A linear easing function means\nsteady progression. A quadratic easing function means starting slowly\nand accelerating. (Note that, since it's a requirement that *f*(0)=0 and\n*f*(1)=1, there is only one linear easing function, *f*(*x*)=*x*, and\nsimilarly for other categories.) The block reports some of the common\neasing functions.\n\n![](assets/images/image466.png)\n<!-- {width=\"445px\" height=\"61px\"} -->\nThe two Motion blocks in this library\nanimate a sprite. Glide always animates the sprite's motion. Animate's\nfirst pulldown menu input allows you to animate horizontal or vertical\nmotion, but will also animate the sprite's direction or size. The\nanimate block in Control lets you animate any numeric quantity with any\neasing function. The getter and setter inputs are best explained by\nexample:\n\n![](assets/images/image467.png)\n<!-- {width=\"327px\" height=\"25px\"} -->\nis equivalent to\n\nThe other blocks in the library are helpers for these four.\n\nThe serial ports library contains these blocks:\n\n![](assets/images/image468.png)\n<!-- {width=\"166px\" height=\"99px\"} -->\nIt is used to allow hardware developers to\ncontrol devices such as robots that are\n\nconnected to your computer via a serial port.\n\nThe frequency distribution analysis library has these blocks:\n\n![](assets/images/image469.png)\n<!-- {width=\"387px\" height=\"230px\"} -->\n\n\nThis is a collection of tools for analyzing large data sets and plotting\nhistograms of how often some value is found in some column of the table\nholding the data.\n\nFor more information go here:\n\nhttp://tinyurl.com/jens-data\n\nThe audio comp library includes these blocks:\n\n![](assets/images/image470.png)\n<!-- {width=\"340px\" height=\"286px\"} -->\nThis library takes a sound, one that you record or\none from our collection of sounds, and manipulates it by systematically\nchanging the intensity of the samples in the sound and by changing the\nsampling rate at which the sound is reproduced. Many of the blocks are\nhelpers for the plot sound block, used to plot the waveform of a sound.\nThe play sound (primitive) block plays a sound. \\_\\_ Hz for reports a\nsine wave as a list of samples.\n\nThe web services library has these blocks:\n\n![](assets/images/image471.png)\n<!-- {width=\"327px\" height=\"106px\"} -->\nThe first block is a generalization of the\nprimitive url block, allowing more control over the various options in\nweb requests: GET, POST, PUT, and DELETE, and fine control over the\ncontent of the message sent to the server. Current location reports your\nlatitude and longitude. Listify takes some text in JSON format (see page\n54) and converts it to a structured list. Value at key looks up a\nkey-value pair in a (listified) JSON dictionary. The key:value: block is\njust a constructor for an abstract data type used with the other blocks\n\nThe database library contains these blocks:\n\n![](assets/images/image472.png)\n<!-- {width=\"217px\" height=\"117px\"} -->\nIt is used to keep data that persist from\none Snap*!* session to the next, if you use the same browser and the\nsame login.\n\nThe world map library has these blocks:\n\n![](assets/images/image473.png)\n<!-- {width=\"234px\" height=\"327px\"} -->\nUsing any of the command blocks puts a map\non the screen, in a layer in front of the stage's background but behind\nthe pen trails layer (which is in turn behind all the sprites). The\nfirst block asks your browser for your current physical location, for\nwhich you may be asked to give permission. The next two blocks get and\nset the map's zoom amount; the default zoom of 10 ﬁts from San Francisco\nnot quite down to Palo Alto on the screen. A zoom of 1 ﬁts almost the\nentire world. A zoom of 3 fits the United States; a zoom of 5 ﬁts\nGermany. The zoom can be changed in half steps, i.e., 5.5 is different\nfrom 5, but 5.25 isn't.\n\nThe next five blocks convert between stage coordinates (pixels) and\nEarth coordinates (latitude and longitude). The change by x: y: block\nshifts the map relative to the stage. The distance to block measures the\nmap distance (in meters) between two sprites. The three reporters with\ncurrent in their names find *your* actual location, again supposing that\ngeolocation is enabled on your device. Update redraws the map; as\ncostume reports the visible section of the map as a costume. Set style\nallows things like satellite pictures.\n\nThe APL primitives library contains these blocks:\n\n![](assets/images/image474.png)\n<!-- {width=\"550px\" height=\"107px\"} -->\n\n\n![](assets/images/image475.png)\n<!-- {width=\"620px\" height=\"196px\"} -->\n\n\nFor more information about APL, see Appendix B (page 148).\n\nThe ![](assets/images/image476.png)\n<!-- {width=\"115px\" height=\"47px\"} -->\n**list comprehension library** has one\nblock, zip. Its first input is a function of two inputs. The two\nAny-type inputs are deep lists (lists of lists of...) interpreted as\ntrees, and the function is called with every possible combination of a\nleaf node of the first tree and a leaf node of the second tree. But\ninstead of taking atoms (non-lists) as the leaves, zip allows the leaves\nof each tree to be vectors (one-dimensional lists), matrices\n(two-dimensional lists), etc. The Number-type inputs specify the leaf\ndimension for each tree, so the function input might be called with a\nvector from the first tree and an atom from the second tree.\n\n![](assets/images/image477.png)\n<!-- {width=\"85px\" height=\"145px\"} -->\nThe **bitwise library** provides bitwise logic\nfunctions; each bit of the reported value is the result of applying the\ncorresponding Boolean function to the corresponding bits of the\ninput(s). The Boolean functions are not for ¬, and for ∧, or for ∨, and\nxor (exclusive or) for ⊻. The remaining functions shift their first\ninput left or right by the number of bits given by the second input.\n\\<\\< is left shift, \\>\\> is arithmetic right shift (shifting in one bits\nfrom the left), and \\>\\>\\> is logical right shift (shifting in zero bits\nfrom the left). If you don't already know what these mean, find a\ntutorial online.\n\n![](assets/images/image478.png)\n<!-- {width=\"627px\" height=\"155px\"} -->\n\n\nThe **MQTT library** supports the Message Queuing Telemetry Transport\nprotocol, for connecting with IOT devices. See <https://mqtt.org/> for\nmore information.\n\n![](assets/images/image482.png)\n<!-- {width=\"479px\" height=\"277px\"} -->\nThe **Signada library** allows you to\ncontrol a microBit or similar device that works with the Signada\nMicroBlocks project.\n\n![](assets/images/image486.png)\n<!-- {width=\"325px\" height=\"182px\"} -->\n\n\nThe **menus library** provides the ability to display hierarchical menus\non the stage, using the ask block's ability to take lists as inputs. See\npage 24.\n\nThe **SciSnap*!* library** and the **TuneScope library** are too big to\ndiscuss here and are documented separately at\n<http://emu-online.de/ProgrammingWithSciSnap.pdf> and\n<https://maketolearn.org/creating-art-animations-and-music/>\nrespectively.\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../scripts/collect-index.lua"],"output-file":"C1-S18.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","bibliography":["../references.bib"],"number-depth":1,"theme":["none","../styles/snap-manual.scss"],"strip-comment":true,"navbar":{"logo":"../images/snap-logo.png"}},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":true,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"snap-manual","include-in-header":["../styles/latex-preamble.tex"],"include-after-body":{"text":"\\printindex\n"},"toc":true,"number-sections":true,"resource-path":["../","../content/assets/","../content/assets/images/"]},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["../references.bib"],"number-depth":1,"cover-image":"../cover.png","documentclass":"book","papersize":"letter"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}