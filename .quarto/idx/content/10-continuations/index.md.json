{"title":"Continuations","markdown":{"headingText":"Continuations","containsRefs":false,"markdown":"\nBlocks are usually used within a script. The *continuation* of a block\nwithin a particular script is the part of the computation that remains\nto be completed after the block does its job. A continuation\n\\index{continuation} can be represented as a ringed script.\nContinuations are always part of the interpretation of any program in\nany language, but usually these continuations are implicit in the data\nstructures of the language interpreter or compiler. Making continuations\nexplicit is an advanced but versatile programming technique that allows\nusers to create control structures such as nonlocal exit and\nmultithreading.\n\n In the simplest case, the\ncontinuation of a command block may just be the part of the script after\nthe block. For example, in the script\n\n![image874.png](assets/image874.png) <!--  style=\"width:1.40625in;height:1.54167in\" / -->\n\nthe continuation of the move\n100 steps block is\n\n![image875.png](assets/image875.png) <!--  style=\"width:1.59375in;height:0.70833in\" / --> \n\n But some situations are more\ncomplicated. For example, what is the continuation of move 100 steps in\nthe following script?\n\n![image876.png](assets/image876.png) <!--  style=\"width:1.47847in;height:0.80208in\" / -->\n\n That’s a trick question; the\nmove block is run four times, and it has a different continuation each\ntime. The first time, its continuation is\n\n![image877.png](assets/image877.png) <!--  style=\"width:1.66667in;height:1.07292in\" / -->\n\nNote that there is no repeat 3 block in the actual script, but the\ncontinuation has to represent the fact that there are three more times\nthrough the loop to go. The fourth time, the continuation is just\n\n![image878.png](assets/image878.png) <!--  style=\"width:1.59375in;height:0.29792in\" / -->\n\nWhat counts is not what’s\nphysically below the block in the script, but what computational work\nremains to be done.\n\n(This is a situation in which visible code may be a little misleading.\nWe have to put a repeat 3 block in the *picture* of the continuation,\nbut the actual continuation is made from the evaluator’s internal\nbookkeeping of where it’s up to in a script. So it’s really the original\nscript plus some extra information. But the pictures here do correctly\nrepresent what work the process still has left to do.)  \n\nWhen\na block is used inside a custom block, its continuation may include\nparts of more than one script. For example, if we make a custom square\nblock\n![image879.png](assets/image879.png) <!--  style=\"width:1.47917in;height:1.25in\" / -->\n\nand then use that block in a script:\n\n![image880.png](assets/image880.png) <!--  style=\"width:0.72917in;height:0.59375in\" / --> \n\nthen the continuation of the\nfirst use of move 100 steps is\n\n![image881.png](assets/image881.png) <!--  style=\"width:1.66667in;height:1.26042in\" / --> \n\nin which part comes from\ninside the square block and part comes from the call to square.\nNevertheless, ordinarily when we *display* a continuation we show only\nthe part within the current script.\n\nThe\ncontinuation of a command block, as we’ve seen, is a simple script with\nno input slots. But the continuation of a *reporter* block has to do\nsomething with the value reported by the block, so it takes that value\nas input. For example, in the script\n\n![image882.png](assets/image882.png) <!--  style=\"width:2.1875in;height:0.57292in\" / --> \n\nthe continuation of the 3+4 block is\n\n![image883.png](assets/image883.png) <!--  style=\"width:3.57292in;height:0.57292in\" / --> \n\nOf course the name result in\nthat picture is arbitrary; any name could be used, or no name at all by\nusing the empty-slot notation for input substitution.\n\n## Continuation Passing Style\n\nLike all \\index{continuation passing style} programming languages,\nSnap*!* evaluates compositions of nested reporters from the inside out.\nFor example, in the expression\n![image884.png](assets/image884.png) <!--  style=\"width:1.3125in;height:0.22917in\" / --> Snap*!*\nfirst adds 4 and 5, then multiplies 3 by that sum. This often means that\nthe order in which the operations are done is backwards from the order\nin which they appear in the expression: When reading the above\nexpression you say “times” before you say “plus.” In English, instead of\nsaying “three times four plus five,” which actually makes the order of\noperations ambiguous, you could say, “take the sum of four and five, and\nthen take the product of three and that sum.” This sounds more awkward,\nbut it has the virtue of putting the operations in the order in which\nthey’re actually performed.\n\n That\nmay seem like overkill in a simple expression, but suppose you’re trying\nto convey the expression\n\n![image885.png](assets/image885.png) <!--  style=\"width:3.1875in;height:0.35417in\" / -->\n\nto a friend over the phone. If you say “factorial of three times\nfactorial of two plus two plus five” you might mean any of these:\n\n![image886.png](assets/image886.png) <!--  style=\"width:3.1875in;height:0.35417in\" / -->\n\nWouldn’t it be better to say, “Add two and two, take the factorial of\nthat, add five to that, multiply three by that, and take the factorial\nof the result”? We can do a similar reordering of an expression if we\nfirst define versions of all the reporters that take their continuation\nas an explicit input. In the following picture, notice that the new\nblocks are *commands*, not reporters.\n\n![image887.png](assets/image887.png) <!--  style=\"width:3.1875in;height:0.35417in\" / -->\n\nWe can check that these blocks give the results we want:\n\n![image888.png](assets/image888.png) <!--  style=\"width:3.1875in;height:0.35417in\" / -->\n\n\nThe original expression can\nnow be represented as\n\n![image908.png](assets/image908.png) <!--  style=\"width:5.53333in;height:2.31806in\" / --> \n\nIf you read this top to\nbottom, don’t you get “Add two and two, take the factorial of that, add\nfive to that, multiply three by that, and take the factorial of the\nresult”? Just what we wanted! This way of working, in which every block\nis a command that takes a continuation as one of its inputs, is called\n*continuation-passing style (CPS).* Okay, it looks horrible, but it has\nsubtle virtues. One of them is that each script is just one block long\n(with the rest of the work buried in the continuation given to that one\nblock), so each block doesn’t have to remember what else to do—in the\nvocabulary of this section, the (implicit) continuation of each block is\nempty. Instead of the usual picture of recursion, with a bunch of little\npeople \\index{little people} all waiting for each other, with CPS\n\\index{CPS} what happens is that each little person hands off the\nproblem to the next one and goes to the beach, so there’s only one\nactive little person at a time. In this example, we start with Alfred,\nan add specialist, who computes the value 4 and then hands off the rest\nof the problem to Francine, a factorial specialist. She computes the\nvalue 24, then hands the problem off to Anne, another add specialist,\nwho computes 29. And so on, until finally Sam, a say specialist, says\nthe value 2.107757298379527×10<sup>132</sup>, which is a very large\nnumber!\n\n![image909.png](assets/image909.png) <!--  style=\"width:2.19306in;height:1.05278in\" / --> \n\nGo back to the definitions of these blocks. The ones, such as add, that\ncorrespond to primitive reporters are simple; they just call the\nreporter and then call their continuation with its result. But the\ndefinition of factorial is more interesting. It doesn’t just call our\noriginal factorial reporter and send the result to its continuation. CPS\nis used inside factorial too! It says, “See if my input is zero. Send\nthe (true or false) result to if. If the result is true, then call my\ncontinuation with the value 1. Otherwise, subtract 1 from my input. Send\nthe result of that to factorial, with a continuation that multiplies the\nsmaller number’s factorial by my original input. Finally, call my\ncontinuation with the product.” You can use CPS to unwind even the most\ncomplicated branched recursions.\n\nBy the way, I cheated a bit above. The if/else block should also use\nCPS; it should take one true/false input and *two continuations.* It\nwill go to one or the other continuation depending on the value of its\ninput. But in fact the C-shaped blocks (or E-shaped, like if/else) are\nreally using CPS in the first place, because they implicitly wrap rings\naround the sub-scripts within their branches. See if you can make an\nexplicitly CPS if/else block.\n\n## Call/Run w/Continuation\n\nTo use explicit continuation passing style, we had to define special\nversions of all the reporters, add and so on. Snap*!* provides a\nprimitive mechanism for capturing continuations when we need to, without\nusing continuation passing throughout a project.\n\nHere’s the classic example. We want to write a recursive block that\ntakes a list of numbers as input, and reports the product of all the\nnumbers:\n\n![image911.png](assets/image911.png) <!--  style=\"width:3.89583in;height:1.34167in\" / --> \n\nBut we can improve the\nefficiency of this block, in the case of a list that includes a zero; as\nsoon as we see the zero, we know that the entire product is zero.\n\n![image910.png](assets/image910.png) <!--  style=\"width:3.89583in;height:1.9375in\" / -->\n\nBut this is not as efficient as it might seem. Consider, as an example,\nthe list 1,2,3,0,4,5. We find the zero on the third recursive call (the\nfourth call altogether), as the first item of the sublist 0,4,5. What is\nthe continuation of the report 0 block? It’s\n\n![image912.png](assets/image912.png) <!--  style=\"width:4.33333in;height:0.41667in\" / --> \n\nEven though we already know\nthat result is zero, we’re going to do three unnecessary multiplications\nwhile unwinding the recursive calls.\n\n We can improve upon this by\ncapturing the continuation \\index{call w/continuation block } of the\ntop-level call to product:\n\n![image913.png](assets/image913.png) <!--  style=\"width:4.03819in;height:1.92569in\" / --> ![image914.png](assets/image914.png) <!--  style=\"width:3.94514in;height:1.09792in\" / -->\n\nThe\n![image916.png](assets/image916.png) <!--  style=\"width:1.59125in;height:0.18611in\" / -->  block takes as its input a\none-input script, as shown in the product example. It calls that script\nwith *the continuation of the* call-with-continuation *block itself* as\nits input. In this case, that continuation is\n\n![image915.png](assets/image915.png) <!--  style=\"width:2.70833in;height:0.29167in\" / --> \n\nreporting to whichever script\ncalled product. If the input list doesn’t include a zero, then nothing\nis ever done with that continuation, and this version works just like\nthe original product. But if the input list is 1,2,3,0,4,5, then three\nrecursive calls are made, the zero is seen, and product-helper *runs the\ncontinuation,* with an input of 0. The continuation immediately reports\nthat 0 to the caller of product, *without* unwinding all the recursive\ncalls and without the unnecessary multiplications.\n\n![image917.png](assets/image917.png) <!--  style=\"width:4.40625in;height:1.15625in\" / --> \n\n I could have written product\na little more simply using a Reporter ring instead of a Command ring:\n\n![image918.png](assets/image918.png) <!--  style=\"width:4.38542in;height:0.51042in\" / -->\n\nbut it’s customary to use a script to represent the input to\ncall** **w/continuation because very often that input takes the form\n\nso that the continuation is saved permanently and can be called from\nanywhere in the project. That’s why the input slot in call\nw/continuation has a Command ring rather than a Reporter ring.\n\nFirst class continuations are an experimental feature in Snap*!* and\nthere are many known limitations in it. One is that the display of\nreporter continuations shows only the single block in which the call\nw/continuation is an input.\n\n###  Nonlocal exit\n\nMany programming \\index{nonlocal exit} languages have a break command\n\\index{break command} that can be used inside a looping construct such\nas repeat to end the repetition early. Using first class continuations,\nwe can generalize this mechanism to allow nonlocal exit even within a\nblock called from inside a loop, or through several levels of nested\nloops:\n\n![image920.png](assets/image920.png) <!--  style=\"width:1.85417in;height:2.65347in\" / -->\n\nThe upvar break has as its\nvalue a continuation \\index{run w/continuation} that can be called from\nanywhere in the program to jump immediately to whatever comes after the\ncatch block in its script. Here’s an example with two nested invocations\nof catch \\index{catch block}, with the upvar renamed in the outer one:\n\n![image923.png](assets/image923.png) <!--  style=\"width:1.85417in;height:2.65347in\" / --> \n\nAs shown, this will say 1, then 2, then 3, then exit both nested catches\nand think “Hmm.” If in the run block the variable break is used instead\nof outer, then the script will say 1, 2, 3, and “Hello!” before thinking\n“Hmm.”\n\nThere are corresponding catch and throw blocks for reporters. The catch\nblock is a reporter that takes an expression as input instead of a\nC-shaped slot. But the throw block is a command; it doesn’t report a\nvalue to its own continuation, but instead reports a value (which it\ntakes as an additional input, in addition to the catch tag) to *the\ncorresponding catch block*’s continuation:\n\n![image924.png](assets/image924.png) <!--  style=\"width:1.85417in;height:2.65347in\" / --> \n\nWithout the throw, the inner call reports 5, the + block reports 8, so\nthe catch block reports 8, and the × block reports 80. With the throw,\nthe inner call doesn’t report at all, and neither does the + block. The\nthrow block’s input of 20 becomes the value reported by the catch block,\nand the × block multiplies 10 and 20.  \n\n\n**Creating a Thread System**\n\nSnap*!* can be running several scripts at once, within a single sprite\nand across many sprites. If you only have one computer, how can it do\nmany things at once? The answer is that only one is actually running at\nany moment, but Snap*!* switches its attention from one script to\nanother frequently. At the bottom of every looping block (repeat, repeat\nuntil, forever), there is an implicit “yield” command, which remembers\nwhere the current script is up to, and switches to some other script,\neach in turn. At the end of every script is an implicit “end thread\n\\index{thread} ” command (a *thread* is the technical term for the\nprocess of running a script), which switches to another script without\nremembering the old one.\n\nSince this all happens\nautomatically, there is generally no need for the user to think about\nthreads. But, just to show that this, too, is not magic, here is an\nimplementation of a simple thread system. It uses a global variable\nnamed tasks that initially contains an empty list. Each use of the\nC-shaped thread block \\index{thread block} adds a continuation (the\nringed script) to the list. The yield block \\index{yield block} uses run\nw/continuation to create a continuation for a partly done thread, adds\nit to the task list, and then runs the first waiting task. The\nend** **thread block (which is automatically added at the end of every\nthread’s script by the thread block) just runs the next waiting task.\n\n![image925.png](assets/image925.png) <!--  style=\"width:1.85417in;height:2.65347in\" / --> \n\nHere is a sample script using the thread system. One thread says\nnumbers; the other says letters. The number thread yields after every\nprime number, while the letter thread yields after every vowel. So the\nsequence of speech balloons is\n1,2,a,3,b,c,d,e,4,5,f,g,h,i,6,7,j,k,l,m,n,o,8,9,10,11,\np,q,r,s,t,u,12,13,v,w,x,y,z,14,15,16,17,18,…30.\n\n![image928.png](assets/image928.png) <!--  style=\"width:2.94792in;height:4.25417in\" / --> \n\nIf we wanted this to behave exactly like Snap*!*’s own threads, we’d\ndefine new versions of repeat and so on that run yield after each\nrepetition.\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../../scripts/collect-index.lua"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","bibliography":["../../references.bib"],"number-depth":1,"theme":["none","../../styles/snap-manual.scss"],"strip-comment":true,"navbar":{"logo":"../../images/snap-logo.png"}},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":true,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"snap-manual","include-in-header":["../../styles/latex-preamble.tex"],"include-after-body":{"text":"\\printindex\n"},"toc":true,"number-sections":true,"resource-path":["../../","../../content/assets/","../../content/assets/images/"]},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["../../references.bib"],"number-depth":1,"cover-image":"../../cover.png","documentclass":"book","papersize":"letter"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}