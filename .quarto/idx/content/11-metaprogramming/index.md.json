{"title":"Metaprogramming","markdown":{"headingText":"Metaprogramming","containsRefs":false,"markdown":"\nThe scripts and custom blocks that make up a program can be examined or\ncreated by the program itself.\n\n## Reading a block\n\n![image375.png](assets/image375.png) <!--  style=\"width:1.15in;height:0.19in\" alt=\"A picture containing text, hitting Description automatically generated\" / --> \n\nThe definition of block \\index{definition of block} takes a custom block\n(in a ring, since it’s the block itself that’s the input, not the result\nof calling the block) as input and reports the block’s definition, i.e.,\nits inputs and body, in the form of a ring with named inputs\ncorresponding to the block’s input names, so that those input names are\nbound in the body.\n\nThe split by blocks block \\index{split by blocks block} takes any\nexpression or script as input (ringed) and reports a list representing a\n*syntax tree* for the script or expression, in which the first item is a\nblock with no inputs and the remaining items are the input values, which\nmay themselves be syntax trees.\n\n![image377.png](assets/image377.png) <!--  style=\"width:1.15in;height:0.19in\" alt=\"A picture containing text, hitting Description automatically generated\" / --> \n\nUsing split by blocks to select custom blocks whose definitions contain\nanother block gives us this debugging aid:\n\n![image378.png](assets/image378.png) <!--  style=\"width:1.15in;height:0.19in\" alt=\"A picture containing text, hitting Description automatically generated\" / --> \n\nNote in passing the my blocks block \\index{my blocks block}, which\nreports a list of all visible blocks, primitive and custom. (There’s\nalso a my categories block \\index{my categories block}, which reports a\nlist of the names of the palette categories.) Also note custom? of block\n\\index{custom? of block block}, which reports True if its input is a\ncustom block.\n\n## Writing a block\n\nThe inverse function to split by blocks is provided by the join block\n\\index{join block}, which when given a syntax tree as input reports the\ncorresponding expression or script.\n\n![image379.png](assets/image379.png) <!--  style=\"width:1.15in;height:0.19in\" alt=\"A picture containing text, hitting Description automatically generated\" / --> \n\nHere we are taking the definition of square, modifying the repetition\ncount (to 6), modifying the turning angle (to 60), using join to turn\nthe result back into a ringed definition, and using the define block\n\\index{define block} to create a new hexagon block.\n\nThe define block has three “input” slots. The quotation marks are there\nbecause the first slot is an upvar, i.e., a way for define to provide\ninformation to its caller, rather than the other way around. In this\ncase, the value of block is the new block itself (the hexagon block, in\nthis example). The second slot is where you give the *label* for the new\nblock. In this example, the label is “hexagon \\_” in which the\nunderscore represents an input slot. So, here are a few examples of\nblock label \\index{block label} s:\n\nset pen \\_ to \\_\n\nfor \\_ = \\_ to \\_ \\_\n\nask \\_ and wait\n\n\\_ of \\_\n\nNote that the underscores are separated from the block text by spaces.\nNote in the case of the for block’s label that the upvar (the i) and the\nC-slot both count as inputs. Note also that the label is not meant to be\na unique symbol that represents only this block. For example,\n![image628.png](assets/image628.png) <!--  style=\"width:0.86111in;height:0.19444in\" / -->  and\n![image376.png](assets/image376.png) <!--  style=\"width:1.15in;height:0.19in\" alt=\"A picture containing text, hitting Description automatically generated\" / --> \nboth have the label\n\n\\_ of \\_. The label does not give the input slots names (that’s done in\nthe body, coming next) or types (that’s done in the set \\_ of block \\_\nto \\_ block \\index{set \\_ of block \\_ to \\_ block}, coming in two\nparagraphs).\n\nThe third slot is for the *definition* \\index{definition (of block)} of\nthe new block. This is a (ringed) script whose input names (formal\nparameters) will become the formal parameters of the new block. And the\nscript is its script.\n\nSo far we know the block’s label, parameters, and script. There are\nother things to specify about the block, and one purpose of the block\nupvar is to allow that. In the example on the previous page, there are\nfour set\n\\_ of block \\_ to \\_ blocks, reproduced below for your convenience:\n\n![image951.png](assets/image951.png) <!--  style=\"width:2.83in;height:0.97in\" alt=\"Graphical user interface, website Description automatically generated\" / -->\n\nThe category of the block can be set to any primitive or custom\ncategory. The default is other. The type is command, reporter, or\npredicate. Command is the default, so this setting is redundant, but we\nwant to show all the choices in the set block. The scope is either\nglobal or sprite, with global as the default. The last input to set\nslots is a list of length less than or equal to the number of\nunderscores in the label. Each item of the list is a type name, like the\nones in the is (5) a (number)? block. If there is only one input, you\ncan use just the name instead of putting it in a list. An empty or\nmissing list item means type Any.\n\nIt's\nvery important that these set blocks appear in the same script as the\ndefine that creates the block, because the block upvar is local to that\nscript. You can’t later say, for example,\n\n![image952.png](assets/image952.png) <!--  style=\"width:4.31in;height:0.83in\" alt=\"Graphical user interface, text, application, chat or text message Description automatically generated\" / --> \n\nbecause the copy of the hexagon block in this instruction counts as\n“using” it.\n\n![image953.png](assets/image953.png) <!--  style=\"width:2.6in;height:0.32in\" / --> \n\nThe of\nblock reporter is useful to copy attributes from one block to another,\nas we copied the definition of square, modified it, and used it to\ndefine hexagon. Some of the values this block reports are a little\nunfriendly:\n\n“1”? Yes, this block reports *numbers* instead of names for category,\ntype, and scope. The reason is that maybe someday we’ll have\ntranslations to other languages for custom category names, as we already\ndo for the built-in categories, types, and scopes; if you translate a\nprogram using this block to another language, the numeric outputs won’t\nchange, simplifying comparisons in your code. The set block accepts\nthese numbers as an alternative to the names.\n\nThere\nare a few more attributes of a block, less commonly used.\n\n![image954.png](assets/image954.png) <!--  style=\"width:3.37986in;height:0.37986in\" / --> ![image955.png](assets/image955.png) <!--  style=\"width:1.02in;height:0.25in\" alt=\"A picture containing text, clipart Description automatically generated\" / -->\n\n\nThe\nlist input is just like the one for set slots except for default values\ninstead of types. Now for a block with a menu input:\n\n![image961.png](assets/image961.png) <!--  style=\"width:3.29097in;height:0.60972in\" / --> \n\n![image962.png](assets/image962.png) <!--  style=\"width:2.35in;height:2.56in\" alt=\"Graphical user interface, application Description automatically generated\" / --> \n\n![image965.png](assets/image965.png) <!--  style=\"width:1.66944in;height:0.25in\" alt=\"Graphical user interface, text, application Description automatically generated\" / --> \n\nPrefer a read-only menu?\n\n![image956.png](assets/image956.png) <!--  style=\"width:3.51944in;height:0.61944in\" alt=\"Graphical user interface, text, website Description automatically generated\" / --> \n\n![image963.png](assets/image963.png) <!--  style=\"width:1.66944in;height:0.25in\" alt=\"Graphical user interface, text, application Description automatically generated\" / --> \n\nWe\npassed too quickly over how the script turned the square block into a\nhexagon block:\n\n![image964.png](assets/image964.png) <!--  style=\"width:4.16944in;height:1.26944in\" alt=\"Graphical user interface, website Description automatically generated\" / -->\n\nThose replace item blocks aren’t very elegant. I had to look at foo by\nhand to figure out where the numbers I wanted to change are. This\nsituation can be improved with a little programming:\n\n![image966.png](assets/image966.png) <!--  style=\"width:4.16944in;height:1.26944in\" alt=\"Graphical user interface, website Description automatically generated\" / -->\n\nExercise for the reader: Implement\nthis:\n\n![image971.png](assets/image971.png) <!--  style=\"width:3.11in;height:0.57in\" alt=\"Graphical user interface Description automatically generated\" / --> \n\nReturning to the define block, there’s another reason for the block\nupvar: It’s helpful in defining a recursive procedure using define\n\\index{recursive procedure using define}. For a procedure to call\nitself, it needs a name for itself. But in the definition input to the\ndefine block, define itself hasn’t been called yet, so the new block\nisn’t in the palette yet. So you do this:\n\n![image972.png](assets/image972.png) <!--  style=\"width:3.11in;height:0.57in\" alt=\"Graphical user interface Description automatically generated\" / --> \n\nYes, you put block in the define, but it gets changed into this script\nin the resulting definition. \n\n![image973.png](assets/image973.png) <!--  style=\"width:3.11in;height:0.57in\" alt=\"Graphical user interface Description automatically generated\" / --> \n\n![image974.png](assets/image974.png) <!--  style=\"width:3.11in;height:0.57in\" alt=\"Graphical user interface Description automatically generated\" / --> \n\n![image975.png](assets/image975.png) <!--  style=\"width:3.11in;height:0.57in\" alt=\"Graphical user interface Description automatically generated\" / --> \n\nYou could use this script directly in a\nsimple case like this, but in a complicated case with a recursive call\ninside a ring inside the one giving the block definition, this script\nalways means the innermost ring. But the upvar means the outer ring;\nnote how the definition of blockify automatically creates a script\nvariable to hold the outer environment.\n\nIt’s analogous to using explicit formal parameters when you nest calls\nto higher order functions.\n\nNote: Ordinarily, when you\ncall a function that reports a (ringed) procedure, that procedure was\ncreated in some specific environment, and has access to that\nenvironment’s variables. This is how instance variables (fields) work in\nobject oriented programming (Chapter VIII). But the procedures made by\njoin of a syntax tree have no associated environment, not even the one\ncontaining global variables. That doesn’t matter if the procedure will\nuse only its own input variables, but for access to other variables, use\n\n## Macros\n\n![image976.png](assets/image976.png) <!--  style=\"width:3.11in;height:0.57in\" alt=\"Graphical user interface Description automatically generated\" / --> \n\nUsers of languages in the C family have learned to think of macros as\nentirely about text strings, with no relation to the syntax of the\nlanguage. So you can do things like\n\n\\#define foo baz)\n\nwith the result that you can only use the foo macro after an open\nparenthesis.\n\nIn the Lisp family of languages we have a different tradition, in which\nmacros \\index{macros} are syntactically just like procedure calls,\nexcept that the “procedure” is a macro, with different evaluation rules\nfrom ordinary procedures. Two things make a macro different: its input\nexpressions are not evaluated, so a macro can establish its own syntax\n(but still delimited by parentheses, in Lisp, or still one block, in\nSnap*!* ); and the result of a macro call is a new expression that is\nevaluated *as if it appeared in the caller* of the macro, with access to\nthe caller’s variables and, implicitly, its continuation.\n\nSnap*!* has long had the first part of this, the ability to make inputs\nunevaluated. In version 8.0 we add the ability to run code in the\ncontext of another procedure, just as we can run code in the context of\nanother sprite, using the same mechanism: the of block \\index{of block\n(sensing)} . In the example on the previous page, the if \\_ report \\_\ncaller \\_ block runs a report block, but not in its own context; it\ncauses *the fizzbuzz block* to report “fizz” or “buzz” as appropriate.\n(Yes, we know that the rules implemented here are simplified compared to\nthe real game.) It doesn’t just report out of the entire toplevel\nscript; you can see that map is able to prepend “The answer is” to each\nreported value.\n\n![image992.png](assets/image992.png) <!--  style=\"width:3.03958in;height:0.23958in\" / -->\n\nThis macro capability isn’t fully implemented. First, we shouldn’t have\nto use the calling script as an explicit input to the macro. In a later\nrelease, this will be fixed; when defining a block you’ll be able to say\nthat it’s a macro, and it will automatically get its caller’s context as\nan invisible input. Second, there is a possibility of confusion between\nthe variables of the macro and the variables of its caller. (What if the\nmacro wanted to refer to a variable value in its caller?) The one\nsubstantial feature of Scheme that we don’t yet implement is *hygienic\nmacros,* which make it possible to keep the two namespaces separate.\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../../scripts/collect-index.lua"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","bibliography":["../../references.bib"],"number-depth":1,"theme":["none","../../styles/snap-manual.scss"],"strip-comment":true,"navbar":{"logo":"../../images/snap-logo.png"}},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":true,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"snap-manual","include-in-header":["../../styles/latex-preamble.tex"],"include-after-body":{"text":"\\printindex\n"},"toc":true,"number-sections":true,"resource-path":["../../","../../content/assets/","../../content/assets/images/"]},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["../../references.bib"],"number-depth":1,"cover-image":"../../cover.png","documentclass":"book","papersize":"letter"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}