{"title":"Blocks, Scripts, and Sprites","markdown":{"headingText":"Blocks, Scripts, and Sprites","containsRefs":false,"markdown":"\nThis chapter describes the Snap*!* features inherited from Scratch\n\\index{Scratch}; experienced Scratch users can skip to Section B.\n\nSnap*!* is a programming language—a notation in which you can tell a\ncomputer what you want it to do. Unlike most programming languages,\nthough, Snap*!* is a *visual* language; instead of writing a program\nusing the keyboard, the Snap*!* programmer uses the same drag-and-drop\ninterface familiar to computer users.\n\nStart Snap*!*. You should see the following\narrangement of regions \\index{layout, window} in the window:\n\n![image5.png](assets/image5.png) <!--  style=\"width:4.32639in;height:2.68958in\" / -->\n\n(The proportions of these areas may be different, depending on the size\nand shape of your browser window.)\n\nA\nSnap*!* program \\index{ Snap! program} consists of one or more\n*scripts,* each of which is made of *blocks.* Here’s a typical script\n\\index{script} :\n\n![image6.png](assets/image6.png) <!--  style=\"width:1.47917in;height:1.35417in\" / -->\n\n The\nfive block \\index{block} s that make up this script have three different\ncolors, corresponding to three of the eight *palettes* in which blocks\ncan be found. The palette \\index{palette} area at the left edge of the\nwindow shows one palette at a time, chosen with the eight buttons just\nabove the palette area. In this script, the gold blocks are from the\nControl palette; the green block is from the Pen palette; and the blue\nblocks are from the Motion palette. A script is assembled by dragging\nblocks from a palette into the *scripting area* \\index{scripting area}\nin the middle part of the window. Blocks snap together (hence the name\nSnap*!* for the language) when you drag a block so that its indentation\nis near the tab of the one above it:\n\n![image7.png](assets/image7.png) <!--  style=\"width:2.24653in;height:1.46944in\" / --> ![image8.png](assets/image8.png) <!--  style=\"width:2.20833in;height:1.13889in\" / -->\n\nThe white horizontal line is a signal that if you let go of the green\nblock it will snap into the tab of the gold one.\n\n### Hat Blocks and Command Blocks\n\nAt the top of the script is a *hat* block, which indicates when the\nscript should be carried out. Hat block names typically start with the\nword “when”; in the square-drawing example on page 5, the script should\nbe run when the green flag \\index{flag, green} near the right end of the\nSnap*!* tool bar \\index{tool bar} is clicked. (The Snap*!* tool bar is\npart of the Snap*!* window, not the same as the browser’s or operating\nsystem’s menu bar.) A script isn’t required to have a hat block\n\\index{block:hat}, but if not, then the script will be run only if the\nuser clicks on the script itself. A script can’t have more than one hat\nblock, and the hat block can be used only at the top of the script; its\ndistinctive shape is meant to remind you of\nthat.[1]<span id=\"generic_when\" class=\"anchor\"></span>\n\nThe\nother blocks in our example script are *command* block\n\\index{block:command}s. Each command block \\index{command block}\ncorresponds to an action that Snap*!* already knows how to carry out.\nFor example, the block ![image9.png](assets/image9.png) <!--  style=\"width:1.16667in;height:0.25in\" / --> tells the sprite \\index{sprite} (the arrowhead\nshape on the *stage* \\index{stage} at the right end of the window) to\nmove ten steps (a step is a very small unit of distance) in the\ndirection in which the arrowhead is pointing. We’ll see shortly that\nthere can be more than one sprite, and that each sprite has its own\nscripts. Also, a sprite doesn’t have to look like an arrowhead, but can\nhave any picture as a *costume* \\index{costume} *.* The shape of the\nmove block is meant to remind you of a Lego™ brick; a script is a stack\nof blocks \\index{stack of blocks}. (The word “block” denotes both the\ngraphical shape on the screen and the procedure, the action, that the\nblock carries out.)\n\n\nThe number 10 in the move block above is called an *input* to the block. By\nclicking on the white oval, you can type any number in place of the 10.\nThe sample script on the previous page uses 100 as the input\n\\index{input} value. We’ll see later that inputs can have non-oval\nshapes that accept values other than numbers. We’ll also see that you\ncan compute input values, instead of typing a particular value into the\noval. A block can have more than one input slot. For example, the glide\nblock located about halfway down the Motion palette has three inputs.\n\nOne of the hat blocks, the generic “when anything” block ![image10.png](assets/image10.png) <!--  style=\"width:1.09722in;height:0.35417in\" / -->, is subtly different from the others.  When the stop sign is clicked, or when a project or sprite is loaded, this block doesn’t test whether the condition in its hexagonal input slot is true, so the script beneath it will not run, until some other script in the project runs (because, for example, you click the green flag).  When generic when blocks are disabled, the stop sign will be square instead of octagonal.\n\nMost command blocks have that brick shape, but some, like the repeat\nblock \\index{repeat block} in the sample script, are *C‑shaped.* Most\nC-shaped block \\index{block:C-shaped} s \\index{C-shaped block} are found\nin the Control palette \\index{Control palette}. The slot inside the C\nshape is a special kind of input slot that accepts a *script* as the\ninput.\n\n\n\nIn the sample script\n\n![image6.png](assets/image6.png) <!--  style=\"width:1.47917in;height:1.35417in\" / --> ![image11.png](assets/image11.png) <!--  style=\"width:1.40625in;height:0.48958in\" / --> the repeat block has two inputs: the number 4 and the script\n\nC-shaped blocks can be put in a script in two ways. If you see a white\nline and let go, the block will be inserted into the script like any\ncommand block:\n\n![image12.png](assets/image12.png) <!--  style=\"width:1.47917in;height:1.35417in\" / --> ![image13.png](assets/image13.png) <!--  style=\"width:1.40625in;height:0.48958in\" / -->\n\nBut if you see an orange halo and let go, the block will *wrap* around\nthe haloed blocks:\n\n![image14.png](assets/image14.png) <!--  style=\"width:1.47917in;height:1.35417in\" / --> ![image15.png](assets/image15.png) <!--  style=\"width:1.40625in;height:0.48958in\" / -->\n\nThe halo will always extend from the cursor position to the bottom of\nthe script:\n\n![image16.png](assets/image16.png) <!--  style=\"width:1.47917in;height:1.35417in\" / --> ![image16.png](assets/image16.png) <!--  style=\"width:1.40625in;height:0.48958in\" / -->\n\nIf you want only some of those blocks, after wrapping you can grab the\nfirst block you don’t want wrapped, pull it down, and snap it under the\nC-shaped block.\n\nFor\n“E-shaped” blocks with more than one C-shaped slot, only the first slot\nwill wrap around existing blocks in a script, and only if that C-shaped\nslot is empty before wrapping. (You can fill the other slots by dragging\nblocks into the desired slot.)\n\n![image24.png](assets/image24.png) <!--  style=\"width:2.31111in;height:1.36667in\" / -->\n\n## <span class=\"mark\"> </span> Sprites and Parallelism\n\nJust below the stage is the “new sprite \\index{new sprite button} ”\nbutton ![image25.png](assets/image25.png) <!--  style=\"width:0.34028in;height:0.24306in\" / -->. Click the button to add a new sprite to the stage. The new\nsprite will appear in a random position on the stage, with a random\ncolor, but always facing to the right.\n\nEach sprite has its own scripts. To see the scripts for a particular\nsprite in the scripting area, click on the picture of that sprite in the\n*sprite corral* \\index{sprite corral} in the bottom right corner of the\nwindow. Try putting one of the following scripts in each sprite’s\nscripting area:\n\n> ![image26.png](assets/image26.png) <!--  style=\"width:1.55069in;height:0.99375in\" / -->\n> ![image27.png](assets/image27.png) <!--  style=\"width:1.54167in;height:1.16667in\" / -->\n\nWhen you click the green flag, you should see one sprite rotate while\nthe other moves back and forth. This experiment illustrates the way\ndifferent scripts can run in parallel. The turning and the moving happen\ntogether. Parallelism \\index{parallelism} can be seen with multiple\nscripts of a single sprite also. Try this example:\n\n> ![image28.png](assets/image28.png) <!--  style=\"width:1.72917in;height:0.875in\" / -->\n> ![image29.png](assets/image29.png) <!--  style=\"width:1.72917in;height:0.89583in\" / -->\n\nWhen you press the space key, the sprite should move forever in a\ncircle, because the move and turn blocks are run in parallel. (To stop\nthe program, click the red stop sign \\index{stop sign} at the right end\nof the tool bar.)\n\n### Costumes and Sounds\n\nTo change the\nappearance of a sprite, paint or import a new *costume* \\index{costume}\nfor it. To paint a costume, click on the Costumes tab above the\nscripting area, and click the paint button ![image32.png](assets/image32.png) <!--  style=\"width:0.29167in;height:0.16667in\" alt=\"Macintosh HD:Users:bh:Desktop:paintbutton.png\" / -->. The *Paint Editor* that\nappears is explained on page [128](#the-paint-editor). There are three\nways to import a costume. First select the desired sprite in the sprite\ncorral. Then, one way is to click on the file icon in the tool bar ,\nthen choose ![image30.png](assets/image30.png) <!--  style=\"width:0.31944in;height:0.21528in\" / --> the “Costumes…”menu item. You will see a list of costumes\nfrom the public media library, and can choose one. The second way, for a\ncostume stored on your own computer, is to click on the file icon and\nchoose the “Import…” menu item. You can then select a file in any\npicture format (PNG, JPEG, etc.) supported by your browser. The third\nway is quicker if the file you want is visible on the desktop: Just drag\nthe file onto the Snap*!* window. In any of these cases, the scripting\narea will be replaced by something like this:\n\n ![image31.png](assets/image31.png) <!--  style=\"width:1.76667in;height:1.875in\" / --> \n\nJust above this part of the window is a set of three tabs: Scripts,\nCostumes, and Sounds. You’ll see that the Costumes tab \\index{Costumes\ntab} is now selected. In this view, the sprite’s *wardrobe*\n\\index{wardrobe} *,* you can choose whether the sprite should wear its\nTurtle costume or its Alonzo \\index{Alonzo} costume. (Alonzo, the\nSnap*!* mascot, is named after Alonzo Church \\index{Church, Alonzo}, a\nmathematician who invented the idea of procedures as data\n\\index{procedures as data}, the most important way in which Snap*!* is\ndifferent from Scratch \\index{Scratch}.) You can give a sprite as many\ncostumes as you like, and then choose which it will wear either by\nclicking in its wardrobe or by using the ![image35.png](assets/image35.png) <!--  style=\"width:1.80556in;height:0.27778in\" / --> or ![image34.png](assets/image34.png) <!--  style=\"width:1.80556in;height:0.27778in\" / --> block in a script. (Every\ncostume has a number as well as a name. The next costume block selects\nthe next costume by number; after the highest-numbered costume it\nswitches to costume 1. The Turtle, costume 0, is never chosen by next\ncostume.) The Turtle costume \\index{Turtle costume} is the only one that\nchanges color to match a change in the sprite’s pen color. Protip: ![image33.png](assets/image33.png) <!--  style=\"width:1.80556in;height:0.27778in\" / -->\nswitches to the *previous* costume, wrapping like next costume.\n\nIn\naddition to its costumes, a sprite can have *sounds;* the equivalent for\nsounds of the sprite’s wardrobe is called its *jukebox* \\index{jukebox}\n*.* Sound files \\index{play sound block} can be imported in any format\n(WAV, OGG, MP3, etc.) supported by your browser. Two blocks accomplish\nthe task of playing sounds \\index{playing sounds}. If you would like a\nscript to continue running while the sound is playing, use the block ![image39.png](assets/image39.png) <!--  style=\"width:1.23958in;height:0.26042in\" / -->.\nIn contrast, you can use the block ![image38.png](assets/image38.png) <!--  style=\"width:1.89583in;height:0.26042in\" / --> to wait for the sound's completion\nbefore continuing the rest of the script*.*\n\n### Inter-Sprite Communication with Broadcast\n\nEarlier we saw an example of two sprites moving at the same time. In a\nmore interesting program, though, the sprites on stage will *interact*\nto tell a story, play a game, etc. Often one sprite will have to tell\nanother sprite to run a script. Here’s a simple example:\n\n![image41.png](assets/image41.png) <!--  style=\"width:0.56944in;height:1.11111in\" / --> ![image42.png](assets/image42.png) <!--  style=\"width:2.78418in;height:1.51042in\" / -->\n![image43.png](assets/image43.png) <!--  style=\"width:1.24306in;height:0.86111in\" / --> ![image44.png](assets/image44.png) <!--  style=\"width:1.52083in;height:0.60417in\" / -->\n\n\nIn the block ![image40.png](assets/image40.png) <!--  style=\"width:1.71875in;height:0.24939in\" / -->, the word “bark” is just an arbitrary name I made up. When you\nclick on the downward arrowhead in that input slot, one of the choices\n(the only choice, the first time) is “new,” which then prompts you to\nenter a name for the new broadcast. When this block is run, the chosen\nmessage is sent to *every* sprite, which is why the block is called\n“broadcast.” (But if you click the right arrow after the message name,\nthe block becomes ![image45.png](assets/image45.png) <!--  style=\"width:1.78958in;height:0.2in\" / --> , and you can change it to ![image46.png](assets/image46.png) <!--  style=\"width:1.8in;height:0.19167in\" / --> to send the message just\nto one sprite.) In this program, though, only one sprite has a script to\nrun when that broadcast is sent, namely the dog. Because the boy’s\nscript uses broadcast and wait \\index{broadcast and wait block} rather\nthan just broadcast, the boy doesn’t go on to his next say block until\nthe dog’s script finishes. That’s why the two sprites take turns\ntalking, instead of both talking at once. In Chapter VII,\n“Object-Oriented Programming with Sprites,” you’ll see a more flexible\nway to send a message to a specific sprite using the tell and ask\nblocks.\n\nNotice, by the way, that the say block’s first input slot is rectangular\nrather than oval. This means the input can be any text string, not only\na number. In text input \\index{text input} slots, a space character is\nshown as a brown dot \\index{brown dot}, so that you can count the\nnumber of spaces between words, and in particular you can tell the\ndifference between an empty slot and one containing spaces. The brown\ndots are *not* shown on the stage if the text is displayed.\n\nThe stage has its own scripting area. It can be selected by clicking on\nthe Stage icon at the left of the sprite corral. Unlike a sprite,\nthough, the stage can’t move. Instead of costumes, it has *backgrounds:*\npictures that fill the entire stage area. The sprites appear in front of\nthe current background. In a complicated project, it’s often convenient\nto use a script in the stage’s scripting area as the overall director of\nthe action.\n\n## Nesting Sprites \\index{Nesting Sprites} : Anchors and Parts\n\nSometimes it’s desirable to make a sort of “super-sprite” composed of\npieces that can move together but can also be separately articulated.\nThe classic example is a person’s body made up of a torso, limbs, and a\nhead. Snap*!* allows one sprite to be designated as the *anchor*\n\\index{anchor} of the combined shape, with other sprites as its *parts*\n\\index{parts (of nested sprite)} *.* To set up sprite nesting\n\\index{sprite nesting}, drag the sprite corral icon of a *part* sprite\nonto the stage display (not the sprite corral icon!) of the desired\n*anchor* sprite. The precise place where you let go of the mouse button\nwill be the attachment point of the part on the anchor.\n\nSprite nesting is shown in the sprite corral icons of both anchors and parts:\n![image47.png](assets/image47.png) <!--  style=\"width:1.63056in;height:0.96528in\" / --> \n\nIn\nthis illustration, it is desired to animate Alonzo’s arm. (The arm has\nbeen colored green in this picture to make the relationship of the two\nsprites clearer, but in a real project they’d be the same color,\nprobably.) Sprite, representing Alonzo’s body, is the anchor; Sprite(2)\nis the arm. The icon for the anchor shows small images of up to three\nattached parts at the bottom. The icon for each part shows a small image\nof the anchor in its top left corner, and a *synchronous*\n\\index{synchronous rotation} */dangling rotation* \\index{dangling\nrotation} *flag* in the top right corner. In its initial, synchronous\nsetting, as shown above, it means that the when the anchor sprite\nrotates, the part sprite also rotates as well as revolving around the\nanchor. When clicked, it changes from a circular arrow to a straight\narrow, and indicates that when the anchor sprite rotates, the part\nsprite revolves around it, but does not rotate, keeping its original\norientation. (The part can also be rotated separately, using its turn\nblocks.) Any change in the position or size of the anchor is always\nextended to its parts. Also, cloning the anchor (see Section VII. B)\nwill also clone all its parts.\n\n![image56.png](assets/image56.png) <!--  style=\"width:1.44444in;height:1.5625in\" / --> ![image48.png](assets/image48.png) <!--  style=\"width:1.63056in;height:0.96528in\" / --> \n![image49.png](assets/image49.png) <!--  style=\"width:1.63056in;height:0.96528in\" / --> \n\n*Top: turning the part: the green arm. Bottom: turning the anchor, with\nthe arm synchronous (left) and dangling (right).*\n\n## Reporter Blocks and Expressions\n\nSo\nfar, we’ve used two kinds of block \\index{block:reporter} s: hat blocks\nand command blocks. Another kind is the *reporter* block \\index{Reporter\nblock} , which has an oval shape: ![image66.png](assets/image66.png) <!--  style=\"width:0.72917in;height:0.15625in\" / --> . It’s called a “reporter” because\nwhen it’s run, instead of carrying out an action, it reports a value\nthat can be used as an input to another block. If you drag a ![image65.png](assets/image65.png) <!--  style=\"width:1.47in;height:0.52in\" / --> reporter\ninto the scripting area by itself and click on it, the value it reports\nwill appear in a speech balloon next to the block:\n\nWhen you drag a reporter block over another block’s input slot, a white\n“halo \\index{halo} ” appears around that input slot, analogous to the\nwhite line that appears when snapping command blocks together:\n\n![image67.png](assets/image67.png) <!--  style=\"width:1.47in;height:0.52in\" / -->\n\nDon’t drop the input over a *red* halo:\n![image71.png](assets/image71.png) <!--  style=\"width:2.11111in;height:0.61806in\" alt=\"Macintosh HD:Users:bh:Desktop:Google Chrome001.png\" / --> \n\nThat’s used for a purpose explained on page\n[68](#recursive-calls-to-multiple-input-blocks).\n\nHere’s a simple script that uses a reporter block:\n\n![image72.png](assets/image72.png) <!--  style=\"width:2.11111in;height:0.61806in\" alt=\"Macintosh HD:Users:bh:Desktop:Google Chrome001.png\" / --> \n\nHere the x position reporter provides the first input to the say block.\n(The sprite’s X position \\index{X position} is its horizontal position,\nhow far left (negative values) or right (positive values) it is compared\nto the center of the stage. Similarly, the Y position \\index{Y position}\nis measured vertically, in steps above (positive) or below (negative)\nthe center.)\n\nYou can do arithmetic \\index{arithmetic} using reporters in the\nOperators palette:\n\n![image73.png](assets/image73.png) <!--  style=\"width:2.11111in;height:0.61806in\" alt=\"Macintosh HD:Users:bh:Desktop:Google Chrome001.png\" / --> \n\nThe round block rounds 35.3905… to 35, and the + block adds 100 to that.\n(By the way, the round block is in the Operators palette, just like +,\nbut in this script it’s a lighter color with black lettering because\nSnap*!* alternates light and dark versions of the palette colors when a\nblock is nested inside another block from the same palette:\n\n![image80.png](assets/image80.png) <!--  style=\"width:4.85417in;height:1.90625in\" / -->\n\nThis\naid to readability is called *zebra coloring* \\index{zebra coloring}\n*.*) A reporter block with its inputs, maybe including other reporter\nblocks, such as ![image81.png](assets/image81.png) <!--  style=\"width:1.91667in;height:0.23958in\" / -->, is called an *expression* \\index{expression} *.*\n\n##  Predicates and Conditional Evaluation\n\nMost\nreporters report \\index{block:predicate} either a number, like ![image82.png](assets/image82.png) <!--  style=\"width:0.66667in;height:0.1875in\" / -->, or a\ntext string, like \n![image83.png](assets/image83.png) <!--  style=\"width:1.20833in;height:0.1875in\" / --> . A *predicate* is a special kind of reporter that\nalways reports true or false. Predicate \\index{Predicate block} s have a\nhexagonal shape \\index{hexagonal shape} :\n\n![image85.png](assets/image85.png) <!--  style=\"width:1.07292in;height:0.15625in\" / --> \n\nThe\nspecial shape is a reminder that predicates don’t generally make sense\nin an input slot of blocks that are expecting a number or text. You\nwouldn’t say ![image84.png](assets/image84.png) <!--  style=\"width:1.94792in;height:0.26042in\" / --> , although (as you can see from the picture) Snap*!* lets\nyou do it if you really want. Instead, you normally use predicates in\nspecial hexagonal input slots like this one:\n![image86.png](assets/image86.png) <!--  style=\"width:0.66667in;height:0.56944in\" / --> \n\nThe\nC-shaped if block \\index{if block} runs its input script if (and only\nif) the expression in its hexagonal input reports true.\n![image87.png](assets/image87.png) <!--  style=\"width:1.59375in;height:0.61458in\" / --> \n\nA really useful block \\index{repeat until block} in animation\n\\index{animation} s runs its input script *repeatedly* until a predicate\nis satisfied:\n![image89.png](assets/image89.png) <!--  style=\"width:2.29167in;height:0.84375in\" / --> \n\nIf, while working on a project, you want to omit temporarily some commands\nin a script, but you don’t want to forget where they belong, you can say\n\n![image88.png](assets/image88.png) <!--  style=\"width:2.28194in;height:1.46875in\" / --> \n\nSometimes you want to take the same action whether some condition is\ntrue or false, but with a different input value. For this purpose you\ncan use the *reporter* if block \\index{reporter if block} :\n\n![image90.png](assets/image90.png) <!--  style=\"width:4.20833in;height:0.38542in\" / --> \n\nThetechnical term for a true or false value is a “Boolean \\index{Boolean} ”\nvalue; it has a capital B because it’s named after a person, George\nBoole \\index{Boole, George}, who developed the mathematical theory of\nBoolean values. Don’t get confused; a hexagonal block is a *predicate,*\nbut the value it reports is a *Boolean.*\n\nAnother quibble about vocabulary: Many programming languages reserve the\nname “procedure \\index{procedure} ” for Commands (that carry out an\naction) and use the name “function” for Reporters and Predicates. In\nthis manual, a *procedure* is any computational capability, including\nthose that report values and those that don’t. Commands, Reporters, and\nPredicates are all procedures. The words “a Procedure type” are\nshorthand for “Command type, Reporter type, or Predicate type.”\n\nIf you want to put\na *constant* Boolean \\index{Boolean constant} value in a hexagonal slot\ninstead of a predicate-based expression, hover the mouse over the block\nand click on the control that appears: ![image91.png](assets/image91.png) <!--  style=\"width:1.375in;height:0.24306in\" alt=\"Macintosh HD:Users:bh:Desktop:turbo-false.png\" / --> ![image92.png](assets/image92.png) <!--  style=\"width:1.375in;height:0.24306in\" alt=\"Macintosh HD:Users:bh:Desktop:turbo-true.png\" / --> \n\n## Variables\n\nTry\nthis script:\n![image93.png](assets/image93.png) <!--  style=\"width:1.58333in;height:1.41667in\" / --> \n\nThe\ninput to the move block is an orange oval. To get it there, drag the\norange oval that’s part of the for block \\index{for block} :\n![image94.png](assets/image94.png) <!--  style=\"width:1.88542in;height:1.4375in\" / --> \n\nThe orange oval \\index{orange oval} is a *variable:* a symbol that\nrepresents a value. (I took this screenshot before changing the second\nnumber input to the for block from the default 10 to 200, and before\ndragging in a turn block.) For runs its script input repeatedly, just\nlike repeat, but before each repetition it sets the variable\n\\index{variable} i to a number starting with its first numeric input,\nadding 1 for each repetition, until it reaches the second numeric input.\nIn this case, there will be 200 repetitions, first with i=1, then with\ni=2, then 3, and so on until i=200 for the final repetition. The result\nis that each move draws a longer and longer line segment, and that’s why\nthe picture you see is a kind of spiral. (If you try again with a turn\nof 90 degrees instead of 92, you’ll see why this picture is called a\n“squiral \\index{squiral}.”)\n\nThe\nvariable i is created by the for block, and it can only be used in the\nscript inside the block’s C-slot. (By the way, if you don’t like the\nname i, you can change it by clicking on the orange oval without\ndragging it, which will pop up a dialog window in which you can enter a\ndifferent name:\n![image95.png](assets/image95.png) <!--  style=\"width:3.1875in;height:1.5in\" / --> \n\n“I” isn’t a very descriptive name; you might prefer “length” to indicate\nits purpose in the script. “I” is traditional because mathematicians\ntend to use letters between i and n to represent integer values, but in\nprogramming languages we don’t have to restrict ourselves to\nsingle-letter variable names.)\n\n###  Global Variable \\index{variable:global} s \\index{global variable}\n\nYou can create variables “by hand” that aren’t limited to being used\nwithin a single block. At the top of the Variables palette, click the\n“Make a variable \\index{Make a variable} ” button:\n\n![image97.png](assets/image97.png) <!--  style=\"width:2.05208in;height:2.27083in\" / --> \n\nThis\nwill bring up a dialog window in which you can give your variable a\nname:\n\n![image96.png](assets/image96.png) <!--  style=\"width:3.1875in;height:1.84375in\" / --> \n\nThe dialog also gives you a choice to make the variable available to all\nsprites (which is almost always what you want) or to make it visible\nonly in the current sprite \\index{sprite-local variable}. You’d do that\nif you’re going to give several sprites individual variables *with the\nsame name,* so that you can share a script between sprites (by dragging\nit from the current sprite’s scripting area to the picture of another\nsprite in the sprite corral), and the different sprites will do slightly\ndifferent things when running that script because each has a different\nvalue for that variable name.\n\nIf\nyou give your variable the name “name” then the Variables palette will\nlook like this:\n\n![image98.png](assets/image98.png) <!--  style=\"width:1.65833in;height:2.29167in\" / --> \n\nThere’s\nnow a “Delete a variable \\index{Delete a variable} ” button, and there’s\nan orange oval with the variable name in it, just like the orange oval\nin the for block. You can drag the variable into any script in the\nscripting area. Next to the oval is a checkbox, initially checked. When\nit’s checked, you’ll also see a *variable watcher* \\index{variable\nwatcher} on the stage: ![image99.png](assets/image99.png) <!--  style=\"width:1.04167in;height:0.40625in\" / --> \n\nWhen you give the variable a value, the orange box in its watcher\n\\index{watcher} will display the value.\n\nHow *do* you give it a value?\nYou use the set block \\index{set block} :\n![image100.png](assets/image100.png) <!--  style=\"width:1.92708in;height:0.47917in\" / --> \n\nNote that you *don’t* drag the variable’s oval into the set block! You\nclick on the downarrow in the first input slot, and you get a menu of\nall the available variable names.\n\nIf you do choose “For this sprite only \\index{For this sprite only} ”\nwhen creating a variable, its block in the palette looks like this:![image101.png](assets/image101.png) <!--  style=\"width:0.65833in;height:0.14167in\" alt=\"Macintosh HD:Users:bh:Desktop:local-var.png\" / -->  \n\nThe *location*-pin\n\\index{location-pin} icon is a bit of a pun on a sprite-*local* variable\n\\index{variable:sprite-local}. It’s shown only in the palette.\n\n### Script Variables\n\nIn the name example above, our project is going to carry on an\ninteraction \\index{interaction} with the user, and we want to remember\ntheir name throughout the project. That’s a good example of a situation\nin which a *global* variable \\index{global variable} (the kind you make\nwith the “Make a variable” button) is appropriate. Another common\nexample is a variable called “score” in a game project. But sometimes\nyou only need a variable \\index{variable:script-local} temporarily,\nduring the running of a particular script. In that case you can use the\nscript variables block \\index{script variables block} to make the\nvariable:\n\n![image105.png](assets/image105.png) <!--  style=\"width:2.08333in;height:0.30208in\" / --> \n\nAs in the for block, you can click on an orange oval in the script\nvariables block without dragging to change its name. You can also make\nmore than one temporary variable by clicking on the right arrow at the\nend of the block to add another variable oval:\n\n![image106.png](assets/image106.png) <!--  style=\"width:2.08333in;height:0.30208in\" / --> \n\n### Renaming variables \\index{renaming variables}\n\nThere are several reasons why you might want to change the name of a\nvariable:\n\n1.  It has a default name, such as the “a” in script variables or the\n    “i” in for.\n\n2.  It conflicts with another name, such as a global variable, that you\n    want to use in the same script.\n\n3.  You just decide a different name would be more self-documenting.\n\nIn the first and third case, you probably want to change the name\neverywhere it appears in that script, or even in all scripts. In the\nsecond case, if you’ve already used both variables in the script before\nrealizing that they have the same name, you’ll want to look at each\ninstance separately to decide which ones to rename. Both of these\noperations are possible by right-clicking or control-clicking on a\nvariable oval.\n\nIf you right-click on an\norange oval in a context in which the variable is *used,* then you are\nable to rename just that one orange oval:\n\n![image104.png](assets/image104.png) <!--  style=\"width:2.08333in;height:0.30208in\" / --> \n\nIf you right-click on the\nplace where the variable is *defined* (a script variables block, the\norange oval for a global variable in the Variables palette, or an orange\noval that’s built into a block such as the “i” in for), then you are\ngiven two renaming options, “rename” and “rename all.” If you choose\n“rename,” then the name is changed only in that one orange oval, as in\nthe previous case:\n\n![image103.png](assets/image103.png) <!--  style=\"width:2.08333in;height:0.30208in\" / --> \n\nBut if you choose “rename\nall,” then the name will be changed throughout the scope of the variable\n(the script for a script variable, or everywhere for a global variable):\n\n\n\n### Transient variables \\index{variable:transient}\n\nSo far we’ve talked about\nvariables with numeric values, or with short text strings such as\nsomeone’s name. But there’s no limit to the amount of information you\ncan put in a variable; in Chapter IV you’ll see how to use *lists* to\ncollect many values in one data structure, and in Chapter VIII you’ll\nsee how to read information from web sites. \n\n![image102.png](assets/image102.png) <!--  style=\"width:2.08333in;height:0.30208in\" / --> \n\nWhen you use these\ncapabilities, your project may take up a lot of memory \\index{memory} in\nthe computer. If you get close to the amount of memory available to\nSnap*!*, then it may become impossible to save your project. (Extra\nspace is needed temporarily to convert from Snap*!* ’s internal\nrepresentation to the form in which projects are exported or saved.) If\nyour program reads a lot of data from the outside world that will still\nbe available when you use it next, you might want to have values\ncontaining a lot of data removed from memory before saving the project.\nTo do this, right-click or control-click on the orange oval in the\nVariables palette, to see this menu: ![image114.png](assets/image114.png) <!--  style=\"width:1.29167in;height:1.05556in\" / --> \n\nYou already know about the rename options, and help… displays a help\nscreen about variables in general. Here we’re interested in the check\nbox next to transient. If you check it, this variable’s value will not\nbe saved when you save your project. Of course, you’ll have to ensure\nthat when your project is loaded, it recreates the needed value and sets\nthe variable to it.\n\n## Debugging \\index{Debugging}\n\nSnap*!* provides several tools to help you debug a program. They center\naround the idea of *pausing* the running of a script partway through, so\nthat you can examine the values of variables.\n\n### The pause button\n\nThe simplest way to pause a\nprogram is manually, by clicking the pause button ![image116.png](assets/image116.png) <!--  style=\"width:0.29167in;height:0.16667in\" / --> \\index{button:pause}\nin the top right corner of the window. While the program is paused, you\ncan run other scripts by clicking on them, show variables on stage with\nthe checkbox next to the variable in the Variables palette or with the\nshow variable block \\index{hide variable block}, and do all the other\nthings you can generally do, including modifying the paused scripts by\nadding or removing blocks. The ![image115.png](assets/image115.png) <!--  style=\"width:0.29167in;height:0.16667in\" / -->  button changes shape to and clicking it\nagain resumes the paused scripts.\n\n### Breakpoints \\index{breakpoint} : the pause all block \\index{pause all block}\n\n<span id=\"pause_all\" class=\"anchor\"></span>The pause button is great if\nyour program seems to be in an infinite loop, but more often you’ll want\nto set a *breakpoint,* a particular point in a script at which you want\nto pause. The ![image117.png](assets/image117.png) <!--  style=\"width:0.81944in;height:0.21528in\" / -->  block, near the bottom of the Control palette, can be\ninserted in a script to pause when it is run. So, for example, if your\nprogram is getting an error message in a particular block, you could use\npause all just before that block to look at the values of variables just\nbefore the error happens.\n\nThe pause all block turns\nbright cyan while paused. Also, during the pause, you can right-click on\na running script and the menu that appears will give you the option to\nshow watchers for temporary variables of the script: \n\n![image118.png](assets/image118.png) <!--  style=\"width:1.88333in;height:0.91111in\" / --> \n\nBut what if the block with the error is run many times in a loop, and it\nonly errors when a particular condition is true—say, the value of some\nvariable is negative, which shouldn’t ever happen. In the iteration\nlibrary (see page [25](#libraries-1) for more about how to use\nlibraries) is a breakpoint block that lets you set a *conditional*\nbreakpoint, and automatically display the relevant variables before\npausing. Here’s a sample use of it:\n\n![image119.png](assets/image119.png) <!--  style=\"width:1.19444in;height:1.33333in\" / --> \n\n(In this contrived example,\nvariable zot comes from outside the script but is relevant to its\nbehavior.) When you continue (with the pause button), the temporary\nvariable watchers are removed by this breakpoint block before resuming\nthe script. The breakpoint block isn’t magic; you could alternatively\njust put a pause all inside an if.[2]\n\nThe hide variable and show variable blocks can also be used to hide and show primitives in the palette.  The pulldown menu doesn’t include primitive blocks, but there’s a generally useful technique to give a block input values it wasn’t expecting using run or call: ![image120.png](assets/image120.png) <!--  style=\"width:1.19444in;height:1.33333in\" / --> \nIn order to use a block as an input this way, you must explicitly put a ring around it, by right-clicking on it and choosing ringify.  More about rings in Chapter VI.  \n\n\n### Visible stepping\n\nSometimes you’re not exactly\nsure where the error is, or you don’t understand how the program got\nthere. To understand better, you’d like to watch the program as it runs,\nat human speed rather than at computer speed. You can do this by\nclicking the *visible stepping bu* \\index{button:visible stepping}\n*tton* \\index{visible stepping button} (![image121.png](assets/image121.png) <!--  style=\"width:0.29167in;height:0.16667in\" / --> ), before running a script or\nwhile the script is paused. The button will light up ( ![image123.png](assets/image123.png) <!--  style=\"width:0.29167in;height:0.16667in\" / --> ) and a speed\ncontrol slider ![image122.png](assets/image122.png) <!--  style=\"width:0.54563in;height:0.15278in\" / --> will appear in the toolbar. When you start or continue\nthe script, its blocks and input slots will light up cyan one at a time: \n\n![image124.png](assets/image124.png) <!--  style=\"width:0.54563in;height:0.15278in\" / -->\n\nIn this simple example, the inputs to the blocks are constant values,\nbut if an input were a more complicated expression involving several\nreporter blocks, each of those would light up as they are called. Note\nthat the input to a block is evaluated before the block itself is\ncalled, so, for example, the 100 lights up before the move.\n\n**. . .**\n\nThe speed of stepping is\ncontrolled by the slider \\index{slider:stepping speed}. If you move the\nslider all the way to the left, the speed is zero, the pause button\nturns into a step button ![image134.png](assets/image134.png) <!--  style=\"width:0.29167in;height:0.16667in\" / --> , and the script takes a single step each time\nyou push it. The name for this is *single stepping* \\index{single\nstepping} *.*\n\nIf several scripts that are visible in the scripting area are running at\nthe same time, all of them are stepped in parallel. However, consider\nthe case of two repeat loops with different numbers of blocks. While not\nstepping, each script goes through a complete cycle of its loop in each\ndisplay cycle, despite the difference in the length of a cycle. In order\nto ensure that the visible result of a program on the stage is the same\nwhen stepped as when not stepped, the shorter script will wait at the\nbottom of its loop for the longer script to catch up.\n\nWhen we talk about custom blocks in Chapter III, we’ll have more to say\nabout visible stepping as it affects those blocks.\n\n## Etcetera\n\nThis manual doesn’t explain every block in detail. There are many more\nmotion blocks, sound blocks, costume and graphics effects blocks, and so\non. You can learn what they all do by experimentation, and also by\nreading the “help screens” that you can get by right-clicking or\ncontrol-clicking a block and selecting “help…” from the menu that\nappears. If you forget what palette (color) a block is, but you remember\nat least part of its name, type control-F and enter the name in the text\nblock that appears in the palette area.\n\nHere are the primitive blocks that don’t exist in Scratch:\n![image136.png](assets/image136.png) <!--  style=\"width:1.05208in;height:0.22917in\" / -->  reports \\index{pen trails\nblock} a \\index{pen vectors block} new costume consisting of everything\nthat’s drawn on the stage by any sprite. Right-clicking the block in the\nscripting area gives the option to change it to ![image135.png](assets/image135.png) <!--  style=\"width:1.25in;height:0.22917in\" / --> if vector logging is\nenabled. See page [116](#logpenvectors).\n\n![image137.png](assets/image137.png) <!--  style=\"width:2.08333in;height:0.375in\" / --> Print\ncharacters \\index{write block} in the given point size on the stage, at\nthe sprite’s position and in its direction. The sprite moves to the end\nof the text. (That’s not always what you want, but you can save the\nsprite’s position before using it, and sometimes you need to know how\nbig the text turned out to be, in turtle steps.) If the pen is down, the\ntext will be underlined.\n\n![image138.png](assets/image138.png) <!--  style=\"width:1.20069in;height:0.51389in\" alt=\"Macintosh HD:Users:bh:Desktop:paste-on.png\" / --> \nTakes a sprite as input. Like stamp except that the costume is stamped onto the selected sprite instead of onto the stage. (Does nothing if the current sprite doesn’t overlap the chosen sprite.)\n\n![image139.png](assets/image139.png) <!--  style=\"width:1.19167in;height:0.33889in\" alt=\"Macintosh HD:Users:bh:Desktop:cut-from.png\" / --> \nTakes a sprite as\ninput. Erases from that sprite’s costume the area that overlaps with the\ncurrent sprite’s costume. (Does not affect the costume in the chosen\nsprite’s wardrobe, only the copy currently visible.)\n\nRuns \\index{warp block} only this script\n\nuntil finished. In the Control palette even though it’s gray.\n\n ![image142.png](assets/image142.png) <!--  style=\"width:1.32986in;height:0.42986in\" alt=\"Icon Description automatically generated\" / -->  See page\n[6](#generic_when). ![image141.png](assets/image141.png) <!--  style=\"width:0.98958in;height:0.25972in\" / --> See page [17](#pause_all).\n\n![image140.png](assets/image140.png) <!--  style=\"width:0.52986in;height:0.5in\" / -->  Runs only this script\nuntil finished.  In the Control palette even though it’s gray.\n\n\n![image143.png](assets/image143.png) <!--  style=\"width:1.71in;height:0.23in\" alt=\"Macintosh HD:Users:bh:Desktop:pix:reporter-if.png\" / --> Reporter\nversion of the if/else primitive command block \\index{if else reporter\nblock} . Only one of the two branches is evaluated, depending on the\nvalue of the first input.\n\n![image144.png](assets/image144.png) <!--  style=\"width:1.83in;height:0.61in\" alt=\"Macintosh HD:Users:bh:Desktop:pix:for.png\" / --> Looping block like\nrepeat but \\index{for block} with an index variable \\index{index\nvariable} .\n\n![image145.png](assets/image145.png) <!--  style=\"width:1.37986in;height:0.28958in\" alt=\"Graphical user interface, application, logo Description automatically generated\" / --> Declare\nlocal variables \\index{local variables} in a script. \\index{script\nvariables block}\n\n ![image148.png](assets/image148.png) <!--  style=\"width:1.17in;height:0.18in\" / -->\nSee page [91](#url).\n\n![image146.png](assets/image146.png) <!--  style=\"width:0.86in;height:0.19in\" alt=\"Macintosh HD:Users:bh:Desktop:report-effect.png\" / --> reports the value of a graphics effect \\index{graphics effect}.\n\n ![image147.png](assets/image147.png) <!--  style=\"width:0.72in;height:0.2in\" / --> Constant true \\index{true block} or false \\index{false block} value. See\npage [12](#predicates-and-conditional-evaluation).\n\n ![image149.png](assets/image149.png) <!--  style=\"width:0.72in;height:0.2in\" / -->\n\n![image153.png](assets/image153.png) <!--  style=\"width:2.13in;height:0.18in\" / -->\nCreate a primitive using JavaScript \\index{JavaScript}. (This block is\ndisabled by default; the user must check “Javascript extensions” in the\nsetting menu *each time* a project is loaded.) \\index{pen down? block}\n\n ![image150.png](assets/image150.png) <!--  style=\"width:0.72in;height:0.2in\" / --> The at block \\index{at block} lets you examine the screen pixel\n\\index{screen pixel} directly behind the rotation center of a sprite,\nthe mouse, or an arbitrary (x,y) coordinate pair dropped onto the second\nmenu slot. The first five items of the left menu let you examine the\ncolor visible at the position. (The “RGBA” option \\index{RGBA option}\nreports a list.) The “sprites” option reports a list of all sprites,\nincluding this one, any point of which overlaps this sprite’s rotation\ncenter (behind or in front). This is a hyperblock with respect to its\nsecond input.\n\n ![image154.png](assets/image154.png) <!--  style=\"width:0.72in;height:0.2in\" / -->  Checks the \\index{is\n\\_ a \\_ ? block} data \\index{stage blocks} type \\index{type} of a value.\n\n ![image151.png](assets/image151.png) <!--  style=\"width:0.72in;height:0.2in\" / -->   ![image152.png](assets/image152.png) <!--  style=\"width:0.72in;height:0.2in\" / -->\n\n ![image155.png](assets/image155.png) <!--  style=\"width:0.72in;height:0.2in\" / -->  \\index{set flag block} Turn the \\index{split block} text into a list,\nusing the second input as the delimiter between items. The default\ndelimiter, indicated by the brown dot in the input slot, is a single\nspace character. “Letter” puts each character of the text in its own\nlist item. “Word” puts each word in an item. ( \\index{whitespace} Words\nare separated by any number of consecutive space, tab, carriage return,\nor newline characters.) “Line” is a newline character \\index{newline\ncharacter} (0xa); “tab” is a tab character \\index{tab character} (0x9);\n“cr” is a carriage return \\index{carriage return character} (0xd). “Csv”\n\\index{CSV format} and “json” \\index{JSON format} split formatted text\ninto lists of lists; see page [54](#comma-separated-values). “Blocks”\ntakes a script as the first input, reporting a list structure\nrepresenting the structure of the script. See Chapter XI.\n\n![image170.png](assets/image170.png) <!--  style=\"width:1.47986in;height:0.18958in\" alt=\"Macintosh HD:Users:bh:Desktop:identical.png\" / --> For lists,\n\\index{identical to} reports true only if its two input values are the\nvery same list, so changing an item in one of them is visible in the\nother. (For =, lists that look the same are the same.) For text strings,\nuses case-sensitive comparison, unlike =, which is case-independent.\n\n ![image171.png](assets/image171.png) <!--  style=\"width:0.72in;height:0.2in\" / --> These *hidden* blocks can be found with the relabel option\n\\index{relabel option} of any dyadic arithmetic block. They’re hidden\npartly because writing them in Snap*!* is a good, pretty easy\nprogramming exercise. Note: the two inputs to atan2 \\index{max block}\nare Δ*x* and Δ*y* in that order, because we measure angles clockwise\nfrom north. Max and min are *variadic;* by clicking the arrowhead, you\ncan provide additional inputs.\n\n![image177.png](assets/image177.png) <!--  style=\"width:0.63in;height:0.19in\" alt=\"Logo Description automatically generated with medium confidence\" / -->\n![image178.png](assets/image178.png) <!--  style=\"width:0.63in;height:0.19in\" alt=\"A picture containing text, monitor, screenshot Description automatically generated\" / -->\n![image179.png](assets/image179.png) <!--  style=\"width:0.63in;height:0.19in\" alt=\"Logo Description automatically generated\" / -->  Similarly, these\n\\index{≤ block} hidden predicates can be found by relabeling the\nrelational predicates.\n\n**Metaprogramming (see Chapter XI.** **, page [101](#metaprogramming))**\n\n ![image172.png](assets/image172.png) <!--  style=\"width:0.72in;height:0.2in\" / -->\n\nThese blocks support *metaprogramming,* which means manipulating blocks\nand scripts as data. This is not the same as manipulating procedures\n(see Chapter VI. ), which are what the blocks *mean;* in metaprogramming\nthe actual blocks, what you see on the screen, are the data. This\ncapability is new in version 8.0.\n\n\n**First class list blocks (see Chapter IV, page[46](#first-class-lists)):**\n\n ![image173.png](assets/image173.png) <!--  style=\"width:0.72in;height:0.2in\" / -->\n\nNumbers from \\index{numbers from block} \\index{for each block} will\ncount up or down.\n\n![image224.png](assets/image224.png) <!--  style=\"width:0.83in;height:0.21in\" / -->\n![image225.png](assets/image225.png) <!--  style=\"width:1.43in;height:0.21in\" / -->\nreport \\index{position block} the sprite or mouse position as a two-item\nvector (x,y).\n\n**First class procedure blocks (see Chapter VI, page[65](#procedures-as-data)):**\n ![image226.png](assets/image226.png) <!--  style=\"width:0.72in;height:0.2in\" / -->\n\n**First class continuation blocks (see Chapter X, page[93](#continuations)):**\n ![image227.png](assets/image227.png) <!--  style=\"width:0.72in;height:0.2in\" / -->\n\n**First class sprite, costume, and sound blocks (see Chapter VII, page[73](#object-oriented-programming-with-sprites)):**\n\n ![image228.png](assets/image228.png) <!--  style=\"width:0.72in;height:0.2in\" / -->\n\n ![image229.png](assets/image229.png) <!--  style=\"width:0.72in;height:0.2in\" / --> Object is a hyperblock.\n\n**Scenes:**\n\n![image280.png](assets/image280.png) <!--  style=\"width:2.38in;height:1.32in\" / --> The\nmajor new feature of version 7.0 is *scenes:* A project can include\nwithin it sub-projects, called scenes, each with its own stage, sprites,\nscripts, and so on. This block makes another scene active, replacing the\ncurrent one.\n\nNothing is automatically shared between scenes: no sprites, no blocks,\nno variables. But the old scene can send a message to the new one, to\nstart it running, with optional payload as in broadcast \\index{broadcast\nblock} (page [23](#broadcast)).\n\n![image282.png](assets/image282.png) <!--  style=\"width:0.72in;height:0.2in\" / -->\n\nIn\nparticular, you can say\n\n![image281.png](assets/image281.png) <!--  style=\"width:2.54in;height:0.31in\" / -->\n\nif the new scene expects to be started with a green flag signal.\n\n**\nThese aren’t new blocks but they have a new feature:**\n\nThese accept two-item (x,y) \\index{points as inputs} lists\n\\index{two-item (x,y) lists} as input, and have extended menus (also\nincluding other sprites): \\index{to block}\n\n![image283.png](assets/image283.png) <!--  style=\"width:0.72in;height:0.2in\" / -->\n\n“Center” means the center of the stage \\index{center of the stage}, the\npoint at (0,0). “Direction” is in the point in direction sense, the\ndirection that would leave this sprite pointing toward another sprite,\nthe mouse, or the center. “Ray length” is the distance from the center\nof this sprite to the nearest point on the other sprite, in the current\ndirection.\n\n![image284.png](assets/image284.png) <!--  style=\"width:0.72in;height:0.2in\" / --> The stop block \\index{stop block} has two extra menu choices. Stop this\nblock is used inside the definition of a custom block to stop just this\ninvocation of this custom block and continue the script that called it.\nStop all but this script is good at the end of a game to stop all the\ngame pieces from moving around, but keep running this script to provide\nthe user’s final score. The last two menu choices add a tab at the\nbottom of the block because the current script can continue after it.\n\n![image285.png](assets/image285.png) <!--  style=\"width:0.72in;height:0.2in\" / --> The new “pen trails” option is true if the sprite is touching any drawn\nor stamped ink on the stage. Also, touching \\index{touching block} will\nnot detect hidden sprites, but a hidden sprite can use it to detect\nvisible sprites.\n\n![image305.png](assets/image305.png) <!--  style=\"width:2.43333in;height:0.3in\" alt=\"Macintosh HD:Users:bh:Desktop:video-on.png\" / --> The video block\n\\index{video block} has a snap option \\index{snap option} that takes a\nsnapshot and reports it as a costume. It is hyperized with respect to its second input.\n\n![image304.png](assets/image304.png) <!--  style=\"width:1.05972in;height:0.27986in\" alt=\"Icon Description automatically generated\" / -->  The “neg” option \\index{neg option} is a monadic \\index{of block\n(operators)} \\index{length of text block} negation operator\n\\index{negation operator}, equivalent to ![image306.png](assets/image306.png) <!--  style=\"width:1.05208in;height:0.28125in\" / -->. “lg” is log<sub>2</sub>.\n“id” is the identity function, which reports its input. “sign” reports 1\nfor positive input, 0 for zero input, or -1 for negative input.\n\\index{set background block}\n\n![image307.png](assets/image307.png) <!--  style=\"width:1.05208in;height:0.28125in\" / -->\n\n![image308.png](assets/image308.png) <!--  style=\"width:1.05208in;height:0.28125in\" / --> \n\n\n![image309.png](assets/image309.png) <!--  style=\"width:1.05208in;height:0.28125in\" / -->  Extended \\index{when I am block} mouse interaction events, sensing\nclicking, dragging, hovering, etc. The “stopped” option triggers when\nall scripts are stopped, as with the stop button; it is useful for\nrobots whose hardware interface must be told to turn off motors. A when\nI am stopped script \\index{when I am stopped script} can run only for a\nlimited time.\n\n![image310.png](assets/image310.png) <!--  style=\"width:1.05208in;height:0.28125in\" / -->  <span id=\"broadcast\" class=\"anchor\"></span>Extended broadcast\n\\index{broadcast block} : Click the right arrowhead to direct the\nmessage to a single sprite or the stage. Click again to add any value as\na payload to the message.\n\n![image311.png](assets/image311.png) <!--  style=\"width:1.05208in;height:0.28125in\" / --> Extended when I receive \\index{when I receive block} : Click the right\narrowhead to expose a script variable (click on it to change its name,\nlike any script variable) that will be set to the data of a matching\nbroadcast. If the first input is set to “any message,” then the data\nvariable will be set to the message, if no payload is included with the\nbroadcast, or to a two-item list containing the message and the payload.\n\n![image312.png](assets/image312.png) <!--  style=\"width:1.05208in;height:0.28125in\" / --> \n\n![image355.png](assets/image355.png) <!--  style=\"width:1.68in;height:0.38in\" alt=\"A picture containing text, clipart Description automatically generated\" / -->\n\nIf the input is set to “any key,” then a right arrowhead appears:\n\n![image357.png](assets/image357.png) <!--  style=\"width:1.81944in;height:0.37986in\"   alt=\"Logo Description automatically generated\" -->\n\nand if you click it,\na script variable key is created whose value is the key that was\npressed. (If the key is one that’ represented in the input menu by a\nword or phrase, e.g., “enter” or “up arrow,” then the value of key\nwill be that word or phrase, *except for* the space character, which\nis represented as itself in key.)\n\n![image356.png](assets/image356.png) <!--  style=\"width:2.25in;height:0.41944in\"   alt=\"Website Description automatically generated with medium confidence\" --> \n\nThe RGB(A) \\index{set pen block} option accepts a single number, which\nis a grayscale value 0-255; a two-number list, grayscale plus opacity\n0-255; a three-item RGB list, or a four-item RGBA list.\n\n![image358.png](assets/image358.png) <!--  style=\"width:2.25in;height:0.41944in\"   alt=\"Website Description automatically generated with medium confidence\"  -->\n\nThese ask features \\index{ask and wait block} and more in the Menus\nlibrary.\n\n![image359.png](assets/image359.png) <!--  style=\"width:1.05208in;height:0.28125in\" / --> \n\n![image360.png](assets/image360.png) <!--  style=\"width:1.05208in;height:0.28125in\" / --> \n\n![image361.png](assets/image361.png) <!--  style=\"width:1.05208in;height:0.28125in\" / --> \n\n![image362.png](assets/image362.png) <!--  style=\"width:1.05208in;height:0.28125in\" / --> \n\nThe of block \\index{of block (sensing)} has an extended menu of\nattributes of a sprite. Position reports an (x,y) vector. Size reports\nthe percentage of normal size, as controlled by the set size block in\nthe Looks category. Left, right, etc. report the stage coordinates of\nthe corresponding edge of the sprite’s bounding box. Variables reports a\nlist of the names of all variables in scope (global, sprite-local, and\nscript variables if the right input is a script.)\n\n![image363.png](assets/image363.png) <!--  style=\"width:1.05208in;height:0.28125in\" / --> \n\n\n\n##  Libraries\n\n<span id=\"libraries-1\" class=\"anchor\"></span>There\nare several collections of useful procedures that aren’t Snap*!*\nprimitives, but are provided as libraries. To include a library in your\nproject, choose the Libraries… option \\index{Libraries… option} in the\nfile (![image384.png](assets/image384.png) <!--  style=\"width:0.31944in;height:0.18056in\" alt=\"Macintosh HD:Users:bh:Desktop:real-desktop:Everything Snap:manual:filebutton.png\" / --> ) menu.\n\n![image385.png](assets/image385.png) <!--  style=\"width:1.05208in;height:0.28125in\" / -->  \n\nThe library menu is divided into five broad categories. The first is,\nbroadly, utilities: blocks that might well be primitives. They might be\nuseful in all kinds of projects.\n\nThe second category is blocks related to media computation: ones that\nhelp in dealing with costumes and sounds (a/k/a Jens libraries). There\nis some overlap with “big data” libraries, for dealing with large lists\nof lists.\n\nThe third category is, roughly, specific to non-media applications\n(a/k/a Brian libraries). Three of them are imports from other\nprogramming languages: words and sentences from Logo, array functions\nfrom APL, and streams from Scheme. Most of the others are to meet the\nneeds of the BJC curriculum.\n\nThe fourth category is major packages (extensions) provided by users.\n\nThe fifth category provides support for hardware devices such as robots,\nthrough general interfaces, replacing specific hardware libraries in\nversions before 7.0.\n\nWhen you click on the one-line description of a library, you are shown\nthe actual blocks in the library and a longer explanation of its\npurpose. You can browse the libraries to find one that will satisfy your\nneeds.\n\nThe libraries and their contents may change, but as of this writing the\nlist library \\index{list library} has these blocks:\n\n![image387.png](assets/image387.png) <!--  style=\"width:1.84861in;height:2.49236in\" / -->  \n\n(The lightning bolt\n\\index{lightning bolt symbol} before the name in several of these blocks\nmeans that they use compiled HOFs or JavaScript primitives to achieve\noptimal speed. They are officially considered experimental.) Remove\nduplicates from \\index{remove duplicates from block} reports a list in\nwhich no two items are equal. The sort \\index{sort block} block takes a\nlist and a two-input comparison predicate, such as \\<, and reports a\nlist with the items sorted according to that comparison. The assoc block\n\\index{assoc block} is for looking up a key in an *association list:* a\nlist of two-item lists. In each two-item list, the first is a *key* and\nthe second is a *value.* The inputs are a key and an association list;\nthe block reports the first key-value pair whose key is equal to the\ninput key.\n\nFor each item \\index{for each item block} is a variant of the primitive\nversion that provides a \\# variable \\index{# variable} containing the\nposition in the input list of the currently considered item. Multimap\n\\index{multimap block} is a version of map that allows multiple list\ninputs, in which case the mapping function must take as many inputs as\nthere are lists; it will be called with all the first items, all the\nsecond items, and so on. Zip takes any number of lists as inputs; it\nreports a list of lists: all the first items, all the second items, and\nso on. The no-name identity function reports its input.\n\nSentence \\index{sentence block} and sentence➔list \\index{sentence➔list\nblock} are borrowed from the word and sentence library (page\n[27](#wordsent)) to serve as a variant of append that accepts non-lists\nas inputs. Printable takes a list structure of any depth as input and\nreports a compact representation of the list as a text string.\n\nThe iteration, composition library \\index{iteration library} has these\nblocks:\n\n![image388.png](assets/image388.png) <!--  style=\"width:1.68889in;height:4.75in\" / --> \n![image389.png](assets/image389.png) <!--  style=\"width:1.04444in;height:0.16111in\" / -->  \n\nCatch\n\\index{catch block} and throw \\index{throw block} provide a nonlocal\nexit facility. You can drag the tag from a catch block to a throw inside\nits C-slot, and the throw will then jump directly out to the matching\ncatch without doing anything in between.\n\nIf do and pause all \\index{if do and pause all block} is for setting a\nbreakpoint while debugging code. The idea is to put show variable blocks\nfor local variables in the C-slot; the watchers will be deleted when the\nuser continues from the pause.\n\nIgnore \\index{ignore block} is used when you need to call a reporter but\nyou don’t care about the value it reports. (For example, you are writing\na script to time how long the reporter takes.)\n\nThe cascade \\index{cascade blocks} blocks take an initial value and call\na function repeatedly on that value, *f*(*f*(*f*(*f*…(*x*)))).\n\nThe compose \\index{compose block} block takes two functions and reports\nthe function *f*(*g*(*x*)).\n\nThe first three repeat blocks\n\\index{repeat blocks} are variants of the primitive repeat until block,\ngiving all four combinations of whether the first test happens before or\nafter the first repetition, and whether the condition must be true or\nfalse to continue repeating. The last repeat block is like the repeat\nprimitive, but makes the number of repetitions so far available to the\nrepeated script. The next two blocks are variations on for \\index{for\nblock} : the first allows an explicit step instead of using ±1, and the\nsecond allows any values, not just numbers; inside the script you say\n\n![image390.png](assets/image390.png) <!--  style=\"width:3.15278in;height:0.29861in\" / -->\n\n replacing\nthe grey block in the picture with an expression to give the next\ndesired value for the loop index. Pipe allows reordering a nested\ncomposition with a left-to-right one:\n\n![image392.png](assets/image392.png) <!--  style=\"width:3.70972in;height:1.17153in\" alt=\"Macintosh HD:Users:bh:Desktop:untitled script pic (1).png\" / --> ![image391.png](assets/image391.png) <!--  style=\"width:3.44097in;height:1.36111in\" alt=\"Macintosh HD:Users:bh:Desktop:untitled script pic (2).png\" / --> \n\nThe stream library \\index{stream library} has these blocks:\n\n![image393.png](assets/image393.png) <!--  style=\"width:3.16111in;height:2.15347in\" / --> \n\n*Streams* are a special kind\nof list whose items are not computed until they are needed. This makes\ncertain computations more efficient, and also allows the creation of\nlists with infinitely many items, such as a list of all the positive\nintegers. The first five blocks are stream versions of the list blocks\nin front of \\index{in front of stream block}, item 1 of \\index{item 1\nof stream block} , all but first of \\index{all but first of stream\nblock} , map \\index{map over stream block}, and keep. Show stream\n\\index{show stream block} takes a stream and a number as inputs, and\nreports an ordinary list of the first *n* items of the stream. Stream\n\\index{Stream block} is like the primitive list; it makes a finite\nstream from explicit items. Sieve \\index{sieve block} is an example\nblock that takes as input the stream of integers starting with 2 and\nreports the stream of all the prime numbers. Stream with numbers from is\n\\index{Stream with numbers from block} like the numbers from block for\nlists, except that there is no endpoint; it reports an infinite stream\nof numbers.\n\nThe <span id=\"wordsent\" class=\"anchor\"></span>word and sentence library\n\\index{sentence library} has these blocks:\n\n![image394.png](assets/image394.png) <!--  style=\"width:1.67986in;height:3.64306in\" / --> \n\nThis library has the goal of\nrecreating the Logo approach to handling text: A text isn’t best viewed\nas a string of characters, but rather as a *sentence*, made of *words,*\neach of which is a string of *letters.* With a few specialized\nexceptions, this is why people put text into computers: The text is\nsentences of natural (i.e., human) language, and the emphasis is on\nwords as constitutive of sentences. You barely notice the letters of the\nwords, and you don’t notice the spaces between them at all, unless\nyou’re proof-reading. (Even then: Proofreading is *diffciult,* because\nyou see what you expect to see, what will make the snetence make sense,\nrather than the misspelling in front of of your eyes.) Internally, Logo\nstores a sentence as a list of words, and a word as a string of letters.\n\\index{all but first blocks}\n\nInexplicably, the designers of Scratch chose to abandon that tradition,\nand to focus on the representation of text as a string of characters.\nThe one vestige of the Logo tradition \\index{Logo tradition} from which\nScratch developed is the block named letter (1) of (world) \\index{letter\n(1) of (world) block} , rather than character (1) of (world). Snap*!*\ninherits its text handling from Scratch.\n\nIn Logo, the visual representation of a sentence \\index{visual\nrepresentation of a sentence} (a list of words) looks like a natural\nlanguage sentence: a string of words with spaces between them. In\nSnap*!*, the visual representation of a list looks nothing at all like\nnatural language. On the other hand, representing a sentence as a string\nmeans that the program must continually re-parse the text on every\noperation, looking for spaces, treating multiple consecutive spaces as\none, and so on. Also, it’s more convenient to treat a sentence as a list\nof words rather than a string of words because in the former case you\ncan use the higher order functions map, keep, and combine on them. This\nlibrary attempts to be agnostic as to the internal representation of\nsentences. The sentence selectors accept any combination of lists and\nstrings; there are two sentence constructors, one to make a string (join\nwords) and one to make a list (sentence).\n\nThe selector names come from Logo, and should be self-explanatory.\nHowever, because in a block language you don’t have to type the block\nname, instead of the terse butfirst or the cryptic bf we spell out “all\nbut first of” and include “word” or “sentence” to indicate the intended\ndomain. There’s no first letter of block because letter 1 of serves that\nneed. Join words (the sentence-as-string constructor) is like the\nprimitive join except that it puts a space in the reported value between\neach of the inputs. Sentence (the List-colored sentence-as-list\nconstructor) accepts any number of inputs, which can be words,\nsentences-as-lists, or sentences-as-strings. (If inputs are lists of\nlists, only one level of flattening is done.) Sentence reports a list of\nwords; there will be no empty words or words containing spaces. The four\nblocks with right-arrows in their names \\index{list ➔ sentence block}\nconvert back and forth between text strings (words or sentences) and\nlists. (Splitting a word into a list of letters is unusual unless you’re\na linguist investigating orthography.) Printable \\index{printable block}\ntakes a list (including a deep list) of words as input and reports a\ntext string in which parentheses are used to show the structure, as in\nLisp/Scheme.\n\nThe pixels library \\index{pixels library} has one block:\n\n![image395.png](assets/image395.png) <!--  style=\"width:0.77917in;height:0.62986in\" / --> \n\nCostumes are first class data\nin Snap*!*. Most of the processing of costume data is done by primitive\nblocks in the Looks category. (See page\n[79](#media-computation-with-costumes).) This library provides snap\n\\index{snap block}, which takes a picture using your computer’s camera\nand reports it as a costume.\n\nThe bar charts library \\index{bar charts library} has these blocks:\n\n![image396.png](assets/image396.png) <!--  style=\"width:3.43056in;height:1.91667in\" / --> \n\nBar chart \\index{bar chart\nblock} takes a table (typically from a CSV data set) as input and\nreports a summary of the table grouped by the field in the specified\ncolumn number. The remaining three inputs are used only if the field\nvalues are numbers, in which case they can be grouped into buckets\n(e.g., decades, centuries, etc.). Those inputs specify the smallest and\nlargest values of interest and, most importantly, the width of a bucket\n(10 for decades, 100 for centuries). If the field isn't numeric, leave\nthese three inputs empty or set them to zero. Each string value of the\nfield is its own bucket, and they appear sorted alphabetically.\n\nBar chart reports a new table with three columns. The first column\ncontains the bucket name or smallest number. The second column contains\na nonnegative integer that says how many records in the input table fall\ninto this bucket. The third column is a subtable containing the actual\nrecords from the original table that fall into the bucket. Plot bar\nchart \\index{plot bar chart block} takes the table reported by bar chart\nand graphs it on the stage, with axes labelled appropriately. The\nremaining blocks are helpers for those.\n\nIf your buckets aren't of constant width, or you want to group by some\nfunction of more than one field, load the \"Frequency Distribution\nAnalysis\" library instead.\n\nThe multi-branched conditional library \\index{conditional\nlibrary:multiple-branch} has these blocks:\n\n![image397.png](assets/image397.png) <!--  style=\"width:1.85in;height:2.47986in\" / --> \n\nThe\ncatch and throw blocks duplicate ones in the iteration library, and are\nincluded because they are used to implement the others. The cases block\n\\index{cases block} sets up a multi-branch conditional, similar to cond\nin Lisp \\index{cond in Lisp} or switch in C \\index{switch in C} -family\nlanguages. The first branch is built into the cases block; it consists\nof a Boolean test in the first hexagonal slot and an action script, in\nthe C-slot, to be run if the test reports true. The remaining branches\ngo in the variadic hexagonal input at the end; each branch consists of\nan else if block \\index{else if block}, which includes the Boolean test\nand the corresponding action script, except possibly for the last\nbranch, which can use the unconditional else block \\index{else block}.\nAs in other languages, once a branch succeeds, no other branches are\ntested.\n\n###\n\nThe variadic library \\index{variadic library} has these blocks:\n\n![image398.png](assets/image398.png) <!--  style=\"width:1.19653in;height:0.41667in\" / --> \n\nThese are \\index{sum block}\nversions \\index{all of block} \\index{any of block} of the associative\noperators and, and or that take any number of inputs instead of exactly\ntwo inputs. As with any variadic input, you can also drop a list of\nvalues onto the arrowheads instead of providing the inputs one at a time\nAs of version 8.0, the arithmetic operators sum, product, minimum, and\nmaximum are no longer included, because the primitive operators +. ×,\nmin, and max are themselves variadic.\n\nThe colors and crayons library \\index{colors library} has these blocks:\n\nIt is intended as a more powerful replacement for the primitive set pen\nblock \\index{set pen block}, including *first class color* support; HSL\ncolor \\index{HSL color} specification as a better alternative to the HSV\nthat Snap*!* inherits from JavaScript; a “fair hue \\index{fair hue} ”\nscale that compensates for the eye’s grouping a wide range of light\nfrequencies as green while labelling mere slivers as orange or yellow;\nthe X11/W3C standard color names \\index{X11/W3C color names}; RGB in\nhexadecimal; a linear color scale (as in the old days, but better) based\non fair hues and including shades (darker colors) and grayscale. Another\nlinear scale is a curated set of 100 “crayons,” explained further on the\nnext page.\n\n![image412.png](assets/image412.png) <!--  style=\"width:1.13333in;height:0.23333in\" alt=\"Macintosh HD:Users:bh:Desktop:pen-color.png\" / -->\n\n Colors are\ncreated by the ![image414.png](assets/image414.png) <!--  style=\"width:0.95in;height:0.225in\" alt=\"Macintosh HD:Users:bh:Desktop:color picker.png\" / --> block (for direct user selection), the color from block\n\\index{color from block} to specify a color numerically,  or by ![image413.png](assets/image413.png) <!--  style=\"width:1.13333in;height:0.23333in\" alt=\"Macintosh HD:Users:bh:Desktop:pen-color.png\" / --> , which\nreports the color currently in use by the pen. The from color block\n\\index{from color block} reports names or numbers associated with a\ncolor:\n\n![image411.png](assets/image411.png) <!--  style=\"width:0.95in;height:0.225in\" alt=\"Macintosh HD:Users:bh:Desktop:color picker.png\" / -->\n\nColors can be created from\nother colors: \\index{mix colors block}\n\n![image415.png](assets/image415.png) <!--  style=\"width:4.83333in;height:0.43056in\" / --> \n\nThe three blocks with pen in their names are improved versions of\nprimitive Pen blocks. In principle set pen \\index{set pen block}, for\nexample, could be implemented using a (hypothetical) set pen to color\ncomposed with the color from block, but in fact set pen benefits from\nknowing how the pen color was set in its previous invocation, so it’s\nimplemented separately from color from. Details in Appendix A.\n\n The\nrecommended way to choose a color is from one of two linear scales: the\ncontinuous *color numbers* and the discrete *crayons:*\n\n![image416.png](assets/image416.png) <!--  style=\"width:7.5in;height:0.25in\" / -->\n\n![image417.png](assets/image417.png) <!--  style=\"width:7.5in;height:0.25in\" / -->\n\nColor\nnumbers \\index{color numbers} are based on *fair hues,* a modification\nof the spectrum (rainbow) hue scale that devotes less space to green and\nmore to orange and yellow, as well as promoting brown to a real color.\nHere is the normal hue scale, for reference:\n\n![image418.png](assets/image418.png) <!--  style=\"width:4in;height:0.20833in\" / --> \n\n Here\nis the fair hue scale:\n\n![image419.png](assets/image419.png) <!--  style=\"width:4in;height:0.20833in\" / -->\n\n Here\nis the color number scale:\n\n![image416.png](assets/image416.png) <!--  style=\"width:5in;height:0.20833in\" / -->\n\n(The picture is wider so that pure spectral colors line up with the fair\nhue scale.)\n\n And\nhere are the 100 crayons \\index{crayons} :\n\n![image417.png](assets/image417.png) <!--  style=\"width:5in;height:0.20833in\" / -->\n\nThe color from block, for example, provides different pulldown menus\ndepending on which scale you choose:\n\n![image410.png](assets/image410.png) <!--  style=\"width:2.41667in;height:0.34444in\" alt=\"Macintosh HD:Users:bh:Desktop:color-by-name.png\" / -->\n\n You can also\ntype the crayon name: \n\n![image420.png](assets/image420.png) <!--  style=\"width:2.41667in;height:0.34444in\" alt=\"Macintosh HD:Users:bh:Desktop:color-by-name.png\" / -->\n\nThere are many scales:\n\n![image427.png](assets/image427.png) <!--  style=\"width:4.29167in;height:1.90972in\" / -->\n\nThe white slot at the end of some of the blocks has two purposes. It can\nbe used to add a transparency \\index{transparency} to a color (0=opaque,\n100=transparent):\n\n![image428.png](assets/image428.png) <!--  style=\"width:4.29167in;height:1.90972in\" / -->\n\nor it can be expanded to enter three or four numbers for a vector\ndirectly into the block, so these are equivalent:\n\n![image429.png](assets/image429.png) <!--  style=\"width:4.29167in;height:1.90972in\" / -->\n\nBut note that a transparency number in a four-number RGBA vector is on\nthe scale 255=opaque, 0=transparent, so the following are *not*\nequivalent:\n\n![image430.png](assets/image430.png) <!--  style=\"width:4.29167in;height:1.90972in\" / -->\n\nSet pen crayon to provides the equivalent of a box of 100 crayons. They\nare divided into color groups, so the menu in the set pen crayon to\ninput \\index{set pen to crayon block} slot has submenus. The colors are\nchosen so that starting\n from crayon 0,\nchange pen crayon by 10 rotates through an interesting, basic set of ten\ncolors:\n\n![image440.png](assets/image440.png) <!--  style=\"width:4.36528in;height:0.51528in\" alt=\"Macintosh HD:Users:bh:Desktop:pix:10-crayons.png\" / -->\n\nUsing change pen crayon by 5\ninstead gives ten more colors, for a total of 20:\n\n![image441.png](assets/image441.png) <!--  style=\"width:4.35556in;height:0.28194in\" / --> \n\n(Why didn’t we use the colors of the 100-crayon Crayola™ box? A few\nreasons, one of which is that some Crayola colors aren’t representable\non RGB screens. Some year when you have nothing else to do, look up\n“color space” on Wikipedia. Also “crayon.” Oh, it’s deliberate that\nchange pen crayon by 5 doesn’t include white, since that’s the usual\nstage background color. White is crayon 14.) Note that crayon 43 is\n“Variables”; all the standard block colors are included.\n\nSee Appendix A (page [139](#crayons-and-color-numbers)) for more\ninformation.\n\n The\n**crayon library** \\index{crayon library} has only the crayon features,\nwithout the rest of the colors package.\n\n![image442.png](assets/image442.png) <!--  style=\"width:1.51in;height:0.9in\" alt=\"Graphical user interface, text, application, chat or text message Description automatically generated\" / -->\n\nThe catch errors library \\index{catch errors library} has these blocks:\n\n![image444.png](assets/image444.png) <!--  style=\"width:3.04167in;height:1.39583in\" / --> \n\nThe safely try block\n\\index{safely try block} allows you to handle errors that happen when\nyour program is run within the program, instead of stopping the script\nwith a red halo and an obscure error message. The block runs the script\nin its first C-slot. If it finishes without an error, nothing else\nhappens. But if an error happens, the code in the second C-slot is run.\nWhile that second script is running, the variable ![image443.png](assets/image443.png) <!--  style=\"width:0.43056in;height:0.15278in\" / -->  contains the text of\nthe error message that would have been displayed if you weren’t catching\nthe error. The error block \\index{error block} is sort of the opposite:\nit lets your program *generate* an error message, which will be\ndisplayed with a red halo unless it is caught by safely try. Safely try\nreporting is the reporter version of safely try.\n\nThe text costumes library \\index{text costume library} has only two\nblocks:\n\n ![image446.png](assets/image446.png) <!--  style=\"width:1.92in;height:0.45078in\" alt=\"Macintosh HD:Users:bh:Desktop:textcostume.png\" / --> \n ![image447.png](assets/image447.png) <!--  style=\"width:3.25972in;height:0.18958in\" / --> \n\nCostume from text\nreports a costume \\index{costume from text block} that can be used with\nthe switch to costume block to make a\nbutton:\n\n![image445.png](assets/image445.png) <!--  style=\"width:0.53472in;height:0.20833in\" alt=\"Macintosh HD:Users:bh:Desktop:Snaplabel.png\" / -->\n\nCostume with background \\index{costume with background block} reports a\ncostume made from another costume by coloring its background, taking a\ncolor input like the set pen color to RGB(A) block and a number of\nturtle steps of padding around the original costume. These two blocks\nwork together to make even better buttons:\n\n![image448.png](assets/image448.png) <!--  style=\"width:5.51in;height:0.68in\" / -->\n\nThe text to speech library \\index{speech synthesis library} has these\nblocks:\n\n![image449.png](assets/image449.png) <!--  style=\"width:2.275in;height:0.8in\" alt=\"Macintosh HD:Users:bh:Desktop:speechlib.png\" / --> \n\nThis library\ninterfaces with a capability in up-to-date browsers, so it might not\nwork for you. \\index{speak block} It works best if the accent matches\nthe text!\n\nThe parallelization library \\index{parallelization library} contains\nthese blocks:\n\n![image450.png](assets/image450.png) <!--  style=\"width:1.17986in;height:1.25972in\" / --> \n\nThe two do in parallel block\n\\index{do in parallel block} s take any number of scripts as inputs.\nThose scripts will be run in parallel, like ordinary independent scripts\nin the scripting area. The and wait version waits until all of those\nscripts have finished before continuing the script below the block.\n\nThe create variables library\n\\index{variables library} has these blocks: \\index{does var exist block}\n\n![image451.png](assets/image451.png) <!--  style=\"width:1.37778in;height:1.48333in\" / --> \n\nThese blocks allow a program to perform the same operation as the\nbutton, making global, sprite local, or script variables, but allowing\nthe program to compute the variable name(s). It can also set and find\nthe values of these variables, show and hide their stage watchers,\ndelete them, and find out if they already exist.\n\nThe getters and setters library \\index{getter/setter library} has these\nblocks:\n\n![image452.png](assets/image452.png) <!--  style=\"width:1.875in;height:1.05in\" / -->  \n\nThe purpose of this library\nis to allow program access to the settings controlled by user interface\nelements, such as the settings menu ![image453.png](assets/image453.png) <!--  style=\"width:0.29167in;height:0.16667in\" / -->. The setting block \\index{setting\nblock} reports a setting; the set flag block \\index{set flag block} sets\nyes-or-no options that have checkboxes in the user interface, while the\nset value block \\index{set value block} controls settings with numeric\nor text values, such as project name.\n\nCertain settings are ordinarily remembered on a per-user basis, such as\nthe “zoom blocks” value. But when these settings are changed by this\nlibrary, the change is in effect only while the project using the\nlibrary is loaded. No permanent changes are made. Note: this library has\nnot been converted for version 7.0, so you’ll have to enable Javascript\nextensions to use it.\n\nThe bignums, rationals, complex \\#s library \\index{infinite precision\ninteger library} has these blocks:\n\n![image454.png](assets/image454.png) <!--  style=\"width:1.875in;height:1.55in\" / --> \n\nThe\nUSE BIGNUMS block \\index{BIGNUMS block} takes a Boolean input, to turn\nthe infinite precision feature on or off. When on, all of the arithmetic\noperators are redefined to accept and report integers of any number of\ndigits (limited only by the memory of your computer) and, in fact, the\nentire Scheme numeric tower, with exact rationals and with complex\nnumbers. The Scheme number block \\index{Scheme number block} has a list\nof functions applicable to Scheme numbers, including subtype predicates\nsuch as rational? and infinite?, and selectors such as numerator and\nreal-part.\n\nThe ! block \\index{! block} computes the factorial function\n\\index{factorial }, useful to test whether bignums are turned on.\nWithout bignums:\n\n![image455.png](assets/image455.png) <!--  style=\"width:0.29167in;height:0.16667in\" / -->\n\nWith bignums:\n\n![image456.png](assets/image456.png) <!--  style=\"width:0.29167in;height:0.16667in\" / -->\n\nThe 375-digit value of 200! isn’t readable on this page, but if you\nright-click on the block and choose “result pic,” you can open the\nresulting picture in a browser window and scroll through it. (These\nvalues end with a bunch of zero digits. That’s not roundoff error; the\nprime factors of 100! and 200! include many copies of 2 and 5.) The\nblock with no name \\index{block with no name} is a way to enter things\nlike 3/4 and 4+7i into numeric input slots by converting the slot to Any\ntype.\n\nThe strings, multi-line input library \\index{string processing library}\nprovides these blocks: \\index{case-independent comparisons block}\n\n![image463.png](assets/image463.png) <!--  style=\"width:3.9375in;height:2.04167in\" / --> \n\nAll\nof these could be written in Snap*!* itself, but these are implemented\nusing the corresponding JavaScript library functions directly, so they\nrun fast. They can be used, for example, in scraping data from a web\nsite. The command use case-independent comparisons applies only to this\nlibrary. The multiline block \\index{multiline block} accepts and reports\na text input that can include newline characters.\n\nThe animation library \\index{animation library} has these blocks:\n\n![image464.png](assets/image464.png) <!--  style=\"width:4.0125in;height:2.33125in\" / --> \n\nDespite\nthe name, this isn’t only about graphics; you can animate the values of\na variable, or anything else that’s expressed numerically.\n\n\n\nThe central idea of\nthis library is an *easing function* \\index{easing function} *,* a\nreporter whose domain and range are real numbers between 0 and 1\ninclusive. The function represents what fraction of the “distance” (in\nquotes because it might be any numeric value, such as temperature in a\nsimulation of weather) from here to there should be covered in what\nfraction of the time. A linear easing \\index{easing block} function\nmeans steady progression. A quadratic easing function means starting\nslowly and accelerating. (Note that, since it’s a requirement that\n*f*(0)=0 and *f*(1)=1, there is only one linear easing function,\n*f*(*x*)=*x*, and similarly for other categories.) The ![image465.png](assets/image465.png) <!--  style=\"width:0.96528in;height:0.19444in\" alt=\"Macintosh HD:Users:bh:Desktop:pix:easing.png\" / -->  block reports\nsome of the common easing functions.\n\n The two\nMotion blocks in this library animate a sprite. Glide always animates\nthe sprite’s motion. Animate’s first pulldown menu input allows you to\nanimate horizontal or vertical motion, but will also animate the\nsprite’s direction or size. The animate block \\index{animate block} in\nControl lets you animate any numeric quantity with any easing function.\nThe getter and setter inputs are best explained by example:\n\n![image466.png](assets/image466.png) <!--  style=\"width:4.63194in;height:0.63194in\" alt=\"Macintosh HD:Users:bh:Desktop:pix:animate-control.png\" / -->\n\nis\nequivalent to\n\n![image467.png](assets/image467.png) <!--  style=\"width:3.40972in;height:0.25694in\" alt=\"Macintosh HD:Users:bh:Desktop:pix:animate-motion.png\" / --> \n\nThe other blocks in the library are helpers for these four.\n\nThe serial ports library \\index{serial-ports library} contains these\nblocks:\n\n![image468.png](assets/image468.png) <!--  style=\"width:1.73264in;height:1.03472in\" alt=\"Graphical user interface, text, application, chat or text message Description automatically generated\" / --> \n\nIt\nis used to allow hardware developers to control devices such as robots\nthat are\nconnected to your computer via a serial port.\n\nThe frequency distribution analysis library \\index{frequency\ndistribution analysis library} has these blocks:\n\n![image469.png](assets/image469.png) <!--  style=\"width:4.02708in;height:2.39583in\" / -->\n\nThis is a collection of tools for analyzing large data sets and plotting\nhistogram \\index{histogram} s of how often some value is found in some\ncolumn of the table holding the data.\n\nFor more information go here:\n\nhttps://tinyurl.com/jens-data\n\nThe audio comp library \\index{sound manipulation library} includes these\nblocks:\n\n![image470.png](assets/image470.png) <!--  style=\"width:3.54167in;height:2.98125in\" / --> \n\nThis library takes a sound,\none that you record or one from our collection of sounds, and\nmanipulates it by systematically changing the intensity of the samples\nin the sound and by changing the sampling rate at which the sound is\nreproduced. Many of the blocks are helpers for the plot sound block,\nused to plot the waveform of a sound \\index{plot sound block}. The play\nsound (primitive) block \\index{play block} plays a sound. \\_\\_ Hz for\n\\index{Hz for block} reports a sine wave as a list of samples.\n\nThe web services library \\index{web services library} has these blocks:\n\n![image471.png](assets/image471.png) <!--  style=\"width:3.40972in;height:1.10417in\" alt=\"Graphical user interface, text, application, chat or text message Description automatically generated\" / --> \n\nThe\nfirst block is a generalization of the primitive url block \\index{url\nblock} , allowing more control over the various options in web requests:\nGET, POST, PUT, and DELETE, and fine control over the content of the\nmessage sent to the server. Current location \\index{current location\nblock} reports your latitude and longitude. Listify \\index{listify\nblock} takes some text in JSON format (see page\n[54](#multi-dimensional-lists-and-json)) and converts it to a structured\nlist. Value at key \\index{value at key block} looks up a key-value pair\nin a (listified) JSON dictionary. The key:value: block\n\\index{key\\\\value\\\\ block} is just a constructor for an abstract data\ntype used with the other blocks\n\nThe database library \\index{database library} contains these blocks:\n\n![image472.png](assets/image472.png) <!--  style=\"width:2.26389in;height:1.22222in\" alt=\"Graphical user interface, text, application, chat or text message Description automatically generated\" / --> \n\nIt\nis used to keep data that persist from one Snap*!* session to the next,\nif you use the same browser and the same login.\n\nThe world map library \\index{map library} has these blocks:\n\n![image473.png](assets/image473.png) <!--  style=\"width:2.44236in;height:3.40278in\" / --> \n\nUsing any of the command\nblocks puts a map on the screen, in a layer in front of the stage’s\nbackground but behind the pen trails layer (which is in turn behind all\nthe sprites). The first block asks your browser for your current\nphysical location, for which you may be asked to give permission. The\nnext two blocks get and set the map’s zoom amount; the default zoom of\n10 ﬁts from San Francisco not quite down to Palo Alto on the screen. A\nzoom of 1 ﬁts almost the entire world. A zoom of 3 fits the United\nStates; a zoom of 5 ﬁts Germany. The zoom can be changed in half steps,\ni.e., 5.5 is different from 5, but 5.25 isn’t.\n\nThe next five blocks convert between stage coordinates (pixels) and\nEarth coordinates (latitude and longitude). The change by x: y: block\nshifts the map relative to the stage. The distance to block measures the\nmap distance (in meters) between two sprites. The three reporters with\ncurrent in their names find *your* actual location, again supposing that\ngeolocation is enabled on your device. Update redraws the map; as\ncostume reports the visible section of the map as a costume. Set style\nallows things like satellite pictures.\n\nThe APL primitives library contains \\index{APL library} these blocks:\n\n![image474.png](assets/image474.png) <!--  style=\"width:5.73333in;height:1.11333in\" / -->\n\n![image475.png](assets/image475.png) <!--  style=\"width:6.45333in;height:2.04in\" / -->\n\nFor more information about APL, see Appendix B (page\n[148](#appendix-b.-apl-features)).\n\nThe  **list comprehension library** \\index{list comprehension library} has one block, zip: \n\n![image476.png](assets/image476.png) <!--  style=\"width:1.2in;height:0.48958in\" alt=\"Logo Description automatically generated\" / -->\n\nIts\nfirst input is a function of two inputs. The two Any-type inputs are\ndeep lists (lists of lists of…) interpreted as trees, and the function\nis called with every possible combination of a leaf node of the first\ntree and a leaf node of the second tree. But instead of taking atoms\n(non-lists) as the leaves, zip allows the leaves of each tree to be\nvectors (one-dimensional lists), matrices (two-dimensional lists), etc.\nThe Number-type inputs specify the leaf dimension for each tree, so the\nfunction input might be called with a vector from the first tree and an\natom from the second tree.\n\n\n\nThe **bitwise library**\n\\index{bitwise library} provides bitwise logic functions; each bit of\nthe reported value is the result of applying the corresponding Boolean\nfunction to the corresponding bits of the input(s). The Boolean\nfunctions are not for ¬, and for ∧, or for ∨, and xor (exclusive or) for\n⊻. The remaining functions shift their first input left or right by the\nnumber of bits given by the second input. \\<\\< is left shift, \\>\\> is\narithmetic right shift (shifting in one bits from the left), and \\>\\>\\>\nis logical right shift (shifting in zero bits from the left). If you\ndon’t already know what these mean, find a tutorial online.\n\n![image477.png](assets/image477.png) <!--  style=\"width:0.89in;height:1.51in\" alt=\"Icon Description automatically generated\" / --> \n\nThe **MQTT library** \\index{MQTT library} supports the Message Queuing\nTelemetry Transport protocol, for connecting with IOT devices. See\n<https://mqtt.org/> for more information.\n\n![image487.png](assets/image487.png) <!--  style=\"width:1.2in;height:0.48958in\" alt=\"Logo Description automatically generated\" / -->\n\nThe **Signada library** \\index{Signada library} allows you to control a\nmicroBit or similar device that works with the Signada MicroBlocks\nproject.\n\n![image488.png](assets/image488.png) <!--  style=\"width:3.39in;height:1.9in\" alt=\"Graphical user interface, text, application, chat or text message Description automatically generated\" / -->\n\nThe **menus library** \\index{menus library} provides the ability to\ndisplay hierarchical menus on the stage, using the ask block’s ability\nto take lists as inputs. See page [24](#ask_lists).\n\n![image486.png](assets/image486.png) <!--  style=\"width:3.39in;height:1.9in\" alt=\"Graphical user interface, text, application, chat or text message Description automatically generated\" / -->\n\nThe **SciSnap*!* library** \\index{SciSnap! library} and the **TuneScope\nlibrary** \\index{TuneScope library} are too big to discuss here and are\ndocumented separately at\n<http://emu-online.de/ProgrammingWithSciSnap.pdf> and\n<https://maketolearn.org/creating-art-animations-and-music/>\nrespectively.\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"brand":{"brand":{"color":{"palette":{"dark-grey":"#222222","blue":"#003262"},"primary":"black"},"logo":{"medium":"images/snap-logo.png"},"typography":{"fonts":[{"family":"Open Sans","source":"google"}],"base":"Open Sans","headings":"Freight Text Pro"}},"data":{"color":{"palette":{"dark-grey":"#222222","blue":"#003262"},"primary":"black"},"logo":{"medium":"images/snap-logo.png"},"typography":{"fonts":[{"family":"Open Sans","source":"google"}],"base":"Open Sans","headings":"Freight Text Pro"}},"brandDir":"C:\\Users\\victo\\snap-manual-new","projectDir":"C:\\Users\\victo\\snap-manual-new","processedData":{"color":{"dark-grey":"#222222","blue":"#003262","primary":"black"},"typography":{"base":"Open Sans","headings":"Freight Text Pro"},"logo":{"images":{},"medium":{"light":{"path":"images/snap-logo.png"},"dark":{"path":"images/snap-logo.png"}}}}}},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../../scripts/collect-index.lua"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","bibliography":["../../references.bib"],"number-depth":1,"theme":["none","../../styles/snap-manual.scss"],"strip-comment":true,"navbar":{"logo":"../../images/snap-logo.png"}},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":true,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"brand":{"brand":{"color":{"palette":{"dark-grey":"#222222","blue":"#003262"},"primary":"black"},"logo":{"medium":"images/snap-logo.png"},"typography":{"fonts":[{"family":"Open Sans","source":"google"}],"base":"Open Sans","headings":"Freight Text Pro"}},"data":{"color":{"palette":{"dark-grey":"#222222","blue":"#003262"},"primary":"black"},"logo":{"medium":"images/snap-logo.png"},"typography":{"fonts":[{"family":"Open Sans","source":"google"}],"base":"Open Sans","headings":"Freight Text Pro"}},"brandDir":"C:\\Users\\victo\\snap-manual-new","projectDir":"C:\\Users\\victo\\snap-manual-new","processedData":{"color":{"dark-grey":"#222222","blue":"#003262","primary":"black"},"typography":{"base":"Open Sans","headings":"Freight Text Pro"},"logo":{"images":{},"medium":{"light":{"path":"images/snap-logo.png"},"dark":{"path":"images/snap-logo.png"}}}}}},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"snap-manual","include-in-header":["../../styles/latex-preamble.tex"],"include-after-body":{"text":"\\printindex\n"},"toc":true,"number-sections":true,"resource-path":["../../","../../content/assets/","../../content/assets/images/"]},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["../../references.bib"],"number-depth":1,"cover-image":"../../cover.png","documentclass":"book","papersize":"letter"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}