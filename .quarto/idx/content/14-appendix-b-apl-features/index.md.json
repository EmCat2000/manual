{"title":"Appendix B. APL features","markdown":{"headingText":"Appendix B. APL features","containsRefs":false,"markdown":"\nThe book *A Programming Language* \\index{A Programming Language} was\npublished by mathematician Kenneth E. Iverson \\index{Iverson, Kenneth\nE.} in 1962. He wanted a formal language that would look like what\nmathematicians write on chalkboards. The then-unnamed language would\nlater take its name from the first letters of the words in the book’s\ntitle. It was little-known until 1964, when a formal description of the\njust-announced IBM System/360 \\index{IBM System/360} in the *IBM Systems\nJournal* used APL \\index{APL} notation. (Around the same time, Iverson’s\nassociate Adin Falkoff \\index{Falkoff, Adin} gave a talk on APL to a New\nYork Association for Computing Machinery chapter, with an excited\n14-year-old Brian Harvey in the audience.) But it wasn’t until 1966 that\nthe first public implementation of the language for the System/360 was\npublished by IBM. (It was called “APL\\360 \\index{APL\\360} ” because the\nnormal slash character / represents the “reduce” operator in APL, while\nbackslash is “expand.”)\n\nThe crucial idea behind APL is that mathematicians\n\\index{mathematicians} think about collections of numbers,\none-dimensional *vectors* \\index{vectors} and two-dimensional *matrices*\n\\index{matrices} *,* as valid objects in themselves, what computer\nscientists later learned to call “first class data \\index{first class\ndata} .” A mathematician who wants to add two vectors writes\n***v*<sub>1</sub>** + ***v*<sub>2</sub>**, not “for i = 1 to length(v1),\nresult\\[i\\]=v1\\[i\\]+v2\\[i\\].” Same for a programmer using APL.\n\nThere are three kinds of function in APL: scalar functions \\index{scalar\nfunction} , mixed functions \\index{mixed function}, and operators\n\\index{operator (APL)}. A *scalar function* is one whose natural domain\nis individual numbers or text characters. A *mixed function* is one\nwhose domain includes arrays (vectors, matrices, or higher-dimensional\ncollections). In Snap*!*, scalar functions are generally found in the\ngreen Operators palette, while mixed functions are in the red Lists\npalette. The third category, confusingly for Snap*!* users, is called\n*operators* in APL, but corresponds to what we call higher order\nfunctions \\index{function, higher order} : functions whose domain\nincludes functions.\n\nSnap*!* hyperblocks \\index{hyperblocks} are scalar functions that behave\nlike APL scalar functions: they can be called with arrays as inputs, and\nthe underlying function is applied to each number in the arrays. (If the\nfunction is *monadic,* meaning that it takes one input, then there’s no\ncomplexity to this idea. Take the square root of an array, and you are\ntaking the square root of each number in the array. If the function is\n*dyadic,* taking two inputs, then the two arrays must have the same\nshape. Snap*!* is more forgiving than APL; if the arrays don’t agree in\nnumber of dimensions, called the *rank* of the array, the lower-rank\n\\index{rank} array is matched repeatedly with subsets of the higher-rank\none; if they don’t agree in length along one dimension, the result has\nthe shorter length and some of the numbers in the longer-length array\nare ignored. An exception in both languages is that if one of the two\ninputs is a scalar, then it is matched with every number in the other\narray input.)\n\nAs explained in Section IV.F, this termwise extension \\index{termwise\nextension} of scalar functions is the main APL-like feature built into\nSnap*!* itself. We also include an extension of the item block\n\\index{item block} to address multiple dimensions, an extension to the\nlength block \\index{length block} with five list functions from APL, and\na new primitive reshape block \\index{reshape block}. The APL library\n\\index{APL library} extends the implementation of APL features to\ninclude a few missing scalar functions and several missing mixed\nfunctions and operators.\n\nProgramming in APL really is *very* different in style from programming\nin other languages, even Snap*!*. This appendix can’t hope to be a\ncomplete reference for APL, let alone a tutorial. If you’re interested,\nfind one of those in a library or a (probably used) bookstore, read it,\nand *do the exercises.* Sorry to sound like a teacher, but the notation\nis sufficiently weird as to take a lot of practice before you start to\nthink in APL.\n\nA note on versions: There is a widely standardized APL2, several\nidiosyncratic extensions, and a successor language named J. The latter\nuses plain ASCII characters, unlike the ones with APL in their names,\nwhich use the mathematician’s character set, with Greek letters,\ntypestyles (boldface and/or italics in books; underlined, upper case, or\nlower case in APL) as loose type declarations, and symbols not part of\nanyone’s alphabet, such as ⌊ for floor and ⌈ for ceiling. To use the\noriginal APL, you needed expensive special computer terminals. (This was\nbefore you could download fonts in software. Today the more unusual APL\ncharacters \\index{APL character set} are in Unicode \\index{Unicode} at\nU+2336 to U+2395.) The character set was probably the main reason APL\ndidn’t take over the world. APL2 \\index{APL2} has a lot to recommend it\nfor Snap*!* users, mainly because it moves from the original APL idea\nthat all arrays must be uniform in dimension, and the elements of arrays\nmust be numbers or single text characters, to our idea that a list can\nbe an element of another list, and that such elements don’t all have to\nhave the same dimensions. Nevertheless, its mechanism for allowing both\nold-style APL arrays and more general “nested arrays” is complicated and\nhard for an APL beginner (probably all but two or three Snap*!* users)\nto understand. So we are starting with plain APL. If it turns out to be\nwildly popular, we may decide later to include APL2 features.\n\nHere are some of the guiding ideas in the design of the APL library:\n\n![image1263.png](assets/image1263.png) <!--  style=\"width:4.45139in;height:0.52083in\" / --> Goal:  Enable interested\n**Snap*!*** users to learn the feel and style of APL programming. It’s\nreally worth the effort. For example, we didn’t hyperize the = block\nbecause Snap*!* users expect it to give a single yes-or-no answer about\nthe equality of two complete structures \\index{equality of complete\nstructures} , whatever their types and shapes. In APL, = is a scalar\nfunction; it compares two numbers or two characters. How could APL users\nlive without the ability to ask if two *structures* are equal? Because\nin APL you can say **∧**/,a=b to get that answer. Reading from right to\nleft, a=b reports an array of Booleans (represented in APL as 0 for\nFalse, 1 for True); the comma operator turns the shape of the array into\na simple vector; and **∧**/ means “reduce with and”; “reduce” is our\ncombine function. That six-character program is much less effort than\nthe equivalent\n\n![image1264.png](assets/image1264.png) <!--  style=\"width:0.99306in;height:0.20833in\" / --> in Snap*!*. Note in passing\nthat if you wanted to know *how many* corresponding elements of the two\narrays are equal, you’d just use +/ instead of **∧**/. Note also that\nour APLish blocks are a little verbose, because they include up to three\nnotations for the function: the usual Snap*!* name (e.g., flatten), the\nname APL programmers use when talking about it (ravel \\index{ravel\nblock} ), and, in yellow type, the symbol used in actual APL code (,).\nWe’re not consistent about it; seems self-documenting. And LCM (and) is\ndifferent even though it has two names; it turns out that if you\nrepresent Boolean values as 0 and 1, then the algorithm to compute the\nleast common multiple of two integers computes the and function if the\ntwo inputs happen to be Boolean. Including the APL symbols serves two\npurposes: the two or three Snap*!* users who’ve actually programmed in\nAPL will be sure what function they’re using, but more importantly, the\nones who are reading an APL tutorial while building programs in Snap*!*\nwill find the block that matches the APL they’re reading.  \n  \nGoal:  Bring the best and most general APL ideas into “mainstream”\n**Snap*!*** programming style. Media computation \\index{media\ncomputation} , in particular, becomes much simpler when scalar functions\ncan be applied to an entire picture or sound. Yes, map provides\nessentially the same capability, but the notation gets complicated if\nyou want to map over columns rather than rows. Also, Snap*!* lists are\nfundamentally one-dimensional, but real data often have more dimensions.\nA Snap*!* programmer has to be thinking all the time about the\nconvention that we represent a matrix as a list of rows, each of which\nis a list of individual cells. That is, row 23 of a spreadsheet\n\\index{spreadsheet} is item 23 of spreadsheet, but column 23 is map\n(item 23 of \\_) over spreadsheet. APL treats rows and columns more\nsymmetrically.  \n  \nNon-goal:  Allow programs written originally in APL to run in\n**Snap*!*** essentially unchanged.  For example, in APL the atomic text\nunit is a single character, and strings of characters are lists. We\ntreat a text string as scalar, and that isn’t going to change. Because\nAPL programmers rarely use conditionals, instead computing functions\ninvolving arrays of Boolean values to achieve the same effect, the\nnotation they do have for conditionals is primitive (in the sense of\nPaleolithic \\index{Paleolithic}, not in the sense of built in). We’re\nnot changing ours.  \n  \nNon-goal:  Emulate the terse APL syntax. It’s too bad, in a way; as\nnoted above, the terseness of expressing a computation affects APL\nprogrammers’ sense of what’s difficult and what isn’t. But you can’t say\n“terse” and “block language” in the same sentence. Our whole *raison\nd’être* is to make it possible to build a program without having to\nmemorize the syntax or the names of functions, and to allow those names\nto be long enough to be self-documenting. And APL’s syntax has its own\nissues, of which the biggest is that it’s hard to use functions with\nmore than two inputs; because most mathematical dyadic functions use\ninfix notation (the function symbol between the two inputs), the notion\nof “left argument” and “right argument” is universal in APL\ndocumentation. The thing people most complain about, that there is no\noperator precedence (like the multiplication-before-addition rule in\nnormal arithmetic notation), really doesn’t turn out to be a problem.\nFunction grouping is strictly right to left, so 2×3+4 means two times\nseven, not six plus four. That takes some getting used to, but it really\ndoesn’t take long if you immerse yourself in APL. The reason is that\nthere are too many infix operators for people to memorize a precedence\ntable. But in any case, block notation eliminates the problem,\nespecially with Snap*!*’s zebra coloring. You can see and control the\ngrouping by which block is inside which other block’s input slot.\nAnother problem with APL’s syntax is that it bends over backward not to\nhave reserved words, as opposed to Fortran, its main competition back\nthen. So the dyadic **○** “circular functions” function uses the left\nargument to select a trig function. 1**○**x is sin(x), 2**○**x is\ncos(x), and so on. **‾**1**○**x is arcsin(x). What’s 0**○**x? Glad you\nasked; it’s$\\\\\\sqrt{1 - x^{2}}$.\n\n### Boolean values\n\nSnap*!* uses distinct Boolean values true and false that are different\nfrom other data types. APL uses 1 and 0, respectively. The APL style of\nprogramming depends heavily on doing arithmetic on Booleans, although\ntheir conditionals insist on only 0 or 1 in a Boolean input slot, not\nother numbers. Snap*!* *arithmetic* functions treat false as 0 and true\nas 1, so our APL library tries to report Snap*!* Boolean values from\npredicate functions.\n\n### ![image1265.png](assets/image1265.png) <!--  style=\"width:5.73333in;height:1.10667in\" / --> Scalar functions\n\n![image1266.png](assets/image1266.png) <!--  style=\"width:2.56667in;height:0.21667in\" alt=\"Macintosh HD:Users:bh:Desktop:roll-8-dice.png\" / --> These are the\nscalar functions \\index{scalar function} in the APL library. Most of\nthem are straightforward to figure out. The scalar = block \\index{scalar\n= block} provides an APL-style version of = (and other exceptions) as a\nhyperblock that extends termwise to arrays. Join, the only non-predicate\nnon-hyper scalar primitive, has its own scalar join block \\index{scalar\njoin block} . 7 deal \\index{deal block} 52 reports a random vector of\nseven numbers from 1 to 52 with no repetitions, as in dealing a hand of\ncards. Signum \\index{signum block} of a number reports 1 if the number\nis positive, 0 if it’s zero, or -1 if it’s negative. Roll \\index{roll\nblock} 6 reports a random roll of a six-sided die. To roll 8 dice, use ,\nwhich would look much more pleasant as ?8⍴6. But perhaps our version is\nmore instantly readable by someone who didn’t grow up with APL. All the\nlibrary functions have help messages available.\n\n### Mixed functions\n\nMixed functions include lists in their natural domain or range. That is,\none or both of its inputs *must* be a list, or it always reports a list.\nSometimes both inputs are naturally lists; sometimes one input of a\ndyadic mixed function is naturally a scalar, and the function treats a\nlist in that input slot as an implicit map, as for scalar functions.\nThis means you have to learn the rule for each mixed function\n\\index{function, mixed} individually.\n\n![image1267.png](assets/image1267.png) <!--  style=\"width:4.275in;height:1.1in\" alt=\"Macintosh HD:Users:bh:Desktop:shape-example.png\" / --> ![image1268.png](assets/image1268.png) <!--  style=\"width:1.06667in;height:0.18333in\" alt=\"Macintosh HD:Users:bh:Desktop:shape-of.png\" / --> The shape of function\n\\index{shape of block} takes any input and reports a vector of the\nmaximum size of the structure along each dimension. For a vector, it\nreturns a list of length 1 containing the length of the input. For a\nmatrix, it returns a two-item list of the number of rows and number of\ncolumns of the input. And so on for higher dimensions. If the input\nisn’t a list at all, then it has zero dimensions, and shape of reports\nan empty vector.\n\nEquivalent to the dimensions of primitive, as of 6.6.\n\n![image1269.png](assets/image1269.png) <!--  style=\"width:1.04167in;height:0.18333in\" alt=\"Macintosh HD:Users:bh:Desktop:rank.png\" / --> ![image1270.png](assets/image1270.png) <!--  style=\"width:2.03333in;height:0.18333in\" alt=\"Macintosh HD:Users:bh:Desktop:reshape.png\" / --> Rank of isn\n\\index{rank of block} ’t an actual APL primitive, but the composition ⍴⍴\n(shape of shape of a structure), which reports the number of dimensions\nof the structure (the length of its shape vector), is too useful to\nomit. (It’s very easy to type the same character twice on the APL\nkeyboard, but less easy to drag blocks together.) Equivalent to the rank\nof primitive, as of 6.6.\n\n![image1271.png](assets/image1271.png) <!--  style=\"width:7.325in;height:0.83333in\" alt=\"Macintosh HD:Users:bh:Desktop:reshape-ex.png\" / --> Reshape\n\\index{reshape block} takes a shape vector (such as shape might report)\non the left and any structure on the right. It ignores the shape of the\nright input, stringing the atomic elements into a vector in row-major\norder (that is, all of the first row left to right, then all of the\nsecond row, etc.). (The primitive reshape takes the inputs in the other\norder.) It then reports an array with the shape specified by the first\ninput containing the items of the second:\n\n![image1272.png](assets/image1272.png) <!--  style=\"width:6.575in;height:1.04167in\" alt=\"Macintosh HD:Users:bh:Desktop:identity-matrix.png\" / --> If the right\ninput has more atomic elements than are required by the left-input shape\nvector, the excess are ignored without reporting an error. If the right\ninput has too *few* atomic elements, the process of filling the reported\narray starts again from the first element. This is most useful in the\nspecific case of an atomic right input, which produces an array of any\ndesired shape all of whose atomic elements are equal. But other cases\nare sometimes useful too:\n\n![image1275.png](assets/image1275.png) <!--  style=\"width:1.43333in;height:0.18333in\" alt=\"Macintosh HD:Users:bh:Desktop:ravel.png\" / --> Flatten \\index{flatten\nblock} takes an arbitrary structure as input and reports a vector of its\natomic elements in row-major order. Lispians call this flattening the\nstructure, but APLers call it “ravel” because of the metaphor of pulling\non a ball of yarn, so what they really mean is “unravel.” (But the\nsnarky sound of that is uncalled-for, because a more advanced version\nthat we might implement someday is more like raveling.) One APL idiom is\nto apply this to a scalar in order to turn it into a one-element vector,\nbut we can’t use it that way because you can’t type a scalar value into\nthe List-type input slot. Equivalent to the primitive flatten of block.\n\nID ← {(⍵,⍵)⍴1,⍵⍴0}\n\n![image1280.png](assets/image1280.png) <!--  style=\"width:7.20417in;height:0.58333in\" alt=\"Macintosh HD:Users:bh:Desktop:catenate-ex.png\" / --> Catenate\n\\index{catenate block} is like our primitive append, with two\ndifferences: First, if either input is a scalar, it is treated like a\none-item vector. Second, if the two inputs are of different rank, the\ncatenate function is recursively mapped over the higher-rank input:\n\n![image1281.png](assets/image1281.png) <!--  style=\"width:0.53333in;height:0.25in\" alt=\"Macintosh HD:Users:bh:Desktop:iota.png\" / --> Catenate vertically\n\\index{catenate vertically block} is similar, but it adds new rows\ninstead of adding new columns.\n\n![image1282.png](assets/image1282.png) <!--  style=\"width:6.34167in;height:1.04167in\" alt=\"Macintosh HD:Users:bh:Desktop:numbers-ex.png\" / --> Integers\n\\index{integers block} (I think that’s what it stands for, although\nAPLers just say “iota”) takes a positive integer input and reports a\nvector of the integers from 1 to the input. This is an example of a\nfunction classed as “mixed” not because of its domain but because of its\nrange. The difference between this block and the primitive numbers from\nblock is in its treatment of lists as inputs. Numbers from is a\nhyperblock, applying itself to each item of its input list:\n\n![image1283.png](assets/image1283.png) <!--  style=\"width:6.025in;height:0.83333in\" alt=\"Macintosh HD:Users:bh:Desktop:iota-list-ex.png\" / --> Iota \\index{iota\nblock} has a special meaning for list inputs: The input must be a shape\nvector; the result is an array with that shape in which each item is a\nlist of the indices of the cell along each dimension. A picture is worth\n10<sup>3</sup> words, but Snap*!* isn’t so good at displaying arrays\nwith more than two dimensions, so here we reduce each cell’s index list\nto a string:\n\n![image1284.png](assets/image1284.png) <!--  style=\"width:1.475in;height:0.25in\" alt=\"Macintosh HD:Users:bh:Desktop:dyadic-iota.png\" / --> \n\n![image1285.png](assets/image1285.png) <!--  style=\"width:5.95in;height:1.1in\" alt=\"Macintosh HD:Users:bh:Desktop:dy-iota-ex.png\" / --> Dyadic iota is like\nthe index of \\index{index of block (APL)} primitive except for its\nhandling of multi-dimensional arrays. It looks only for atomic elements,\nso a vector in the second input doesn’t mean to search for that vector\nas a row of a matrix, which is what it means to index of, but rather to\nlook separately for each item of the vector, and report a list of the\nlocations of each item. If the first input is a multi-dimensional array,\nthen the location of an item is a vector with the indices along each\nrow.\n\nIn this example, the 4 is in the second row, second column. (This is\nactually an extension of APL iota, which is more like a hyperized index\nof.) Generalizing, if the rank of the second input is less than the rank\nof the first input by two or more, then iota looks for the entire second\ninput in the first input. The reported position is a vector\n![image1286.png](assets/image1286.png) <!--  style=\"width:5.84167in;height:0.35in\" alt=\"Macintosh HD:Users:bh:Desktop:dy-iota-ex2.png\" / --> whose length is\nequal to the difference between the two ranks. If the rank of the second\ninput is one less than the rank of the first, the reported value is a\nscalar, the index of the entire second input in the first.\n\n![image1287.png](assets/image1287.png) <!--  style=\"width:5.38333in;height:1.1in\" alt=\"Macintosh HD:Users:bh:Desktop:dy-iota-ex3.png\" / --> \n\nHowever, if the two ranks are equal, then the block is hyperized; each\nitem of the second input is located in the first input. As the next\nexample shows, only the first instance of each item is found (e.g., the\n1 in position 2, not the 1 in position 4); if an item does not occur in\nthe left input, what is reported is one more than the length of the left\ninput (here, 8).\n\nWhy the strange design decision to report length+1 when something isn’t\nfound, instead of a more obvious flag value such as 0 or false? Here’s\nwhy:\n\n![image1292.png](assets/image1292.png) <!--  style=\"width:2.175in;height:0.225in\" alt=\"Macintosh HD:Users:bh:Desktop:contained.png\" / --> Note that code has\n27 items, not 26. The asterisk at the end is the ciphertext is the\ntranslation of all non-alphabet characters (spaces and the apostrophe in\n“doesn’t”). This is a silly example, because it makes up a random cipher\nevery time it’s called, and it doesn’t report the cipher, so the\nrecipient can’t decipher the message. And you wouldn’t want to make the\nspaces in the message so obvious. But despite being silly, the example\nshows the benefit of reporting length+1 as the position of items not\nfound.\n\n![image1293.png](assets/image1293.png) <!--  style=\"width:7.48542in;height:0.65972in\" alt=\"Macintosh HD:Users:bh:Desktop:contained-ex.png\" / --> The contained in\nblock \\index{contained in block} is like a hyperized contains with the\ninput order reversed. It reports an array of Booleans the same shape as\nthe left input. The shape of the right input doesn’t matter; the block\nlooks only for atomic elements.\n\nThe blocks grade up \\index{grade up block} and grade down \\index{grade\ndown block} are used for sorting data. Given an array as input, it\nreports a vector of the indices in which the items (the rows, if a\nmatrix) should be rearranged in order to be sorted. This will be clearer\nwith an example:\n\nThe result from grade up tells us that item 3 of **foo** comes first in\nsorted order, then item 4, then 2, then 1. When we actually select items\nof **foo** based on this ordering, we get the desired sorted version.\nThe result reported by grade down is almost the reverse of that from\ngrade up, but not quite, if there are equal items in the list. (The sort\nis stable, so if there are equal items, then whichever comes first in\nthe input list will also be first in the sorted list.)\n\nWhy this two-step process? Why not just have a sort primitive in APL?\nOne answer is that in a database application you might want to sort one\narray based on the order of another array:\n\nThis is the list of employees of a small company. (Taken from *Structure\nand Interpretation of Computer Programs* by Abelson and Sussman.\nCreative Commons licensed.) Each of the smaller lists contains a\nperson's name, job title, and yearly salary.\n![image1304.png](assets/image1304.png) <!--  style=\"width:5.48333in;height:2.2in\" alt=\"Macintosh HD:Users:bh:Desktop:database.png\" / --> We would like to sort\nthe employees’ names in big-to-small order of salary. First we extract\ncolumn 3 of the database, the salaries:\n\n![image1305.png](assets/image1305.png) <!--  style=\"width:3.55903in;height:1.97639in\" / -->   \nThen we use grade down to get the reordering indices:\n\n![image1306.png](assets/image1306.png) <!--  style=\"width:5.33333in;height:2.37333in\" / --> ![image1307.png](assets/image1307.png) <!--  style=\"width:4.97847in;height:2.23333in\" / --> At this point we *could* use\nthe index vector to sort the salaries:\n\n![image1308.png](assets/image1308.png) <!--  style=\"width:5.59333in;height:2.3in\" / --> But\nwhat we actually want is a list of *names,* sorted by salary:\n\n![image1309.png](assets/image1309.png) <!--  style=\"width:2.30833in;height:0.275in\" alt=\"Macintosh HD:Users:bh:Desktop:row-select.png\" / --> ![image1310.png](assets/image1310.png) <!--  style=\"width:2.91667in;height:0.325in\" alt=\"Macintosh HD:Users:bh:Desktop:column-select.png\" / --> By taking the\nindex vector from grade down of column 3 and telling item to apply it to\ncolumn 1, we get what we set out to find. As usual the code is more\nelegant in APL: database\\[⍒database\\[;3\\];1\\].\n\nIn case you’ve forgotten, or would select the third *row* of the\ndatabase; we need the list 3 in the second input slot of the outer list\nto select by columns rather than by rows.\n\nSelect (if take \\index{take block} ) or select all but (if drop\n\\index{drop block} ) the first (if *n*\\>0) or last (if *n*\\<0) |*n*|\nitems from a vector, or rows from a matrix. Alternatively, if the left\ninput is a two-item vector, select rows with the first item and columns\nwith the second.\n\nThe compress block \\index{compress block} selects a subset of its right\ninput based on the Boolean values in its left input, which must be a\nvector of Booleans whose length equals the length of the array (the\nnumber of rows, for a matrix) in the right input. The block reports an\narray of the same rank as the right input, but containing only those\nrows whose corresponding Boolean value is true. The columns version\n**⌿** is the same but selecting columns rather than selecting rows.\n\nA word about the possibly confusing names of these blocks: There are two\nways to think about what they do. Take the standard / version, to avoid\ntalking about both at once. One way to think about it is that it selects\nsome of the rows. The other way is that it shortens the columns. For\nLispians, which includes you since you’ve learned about keep, the\nnatural way to think about / is that it keeps some of the rows. Since we\nrepresent a matrix as a list of rows, that also fits with how this\nfunction is implemented. (Read the code; you’ll find a keep inside.) But\nAPL people think about it the other way, so when you read APL\ndocumentation, / is described as operating on the last dimension (the\ncolumns), while **⌿** is described as operating on rows. We were more\nthan a month into this project before I understood all this. You get\nlong block names so it won’t take you a month!\n\n![image1319.png](assets/image1319.png) <!--  style=\"width:3.175in;height:0.18333in\" / --> ![image1320.png](assets/image1320.png) <!--  style=\"width:2.99444in;height:0.23333in\" / --> ![image1321.png](assets/image1321.png) <!--  style=\"width:1.11181in;height:0.23333in\" alt=\"Macintosh HD:Users:bh:Desktop:transpose.png\" / --> Don’t confuse this\nblock with the reduce block \\index{reduce block}, whose APL symbol is\nalso a slash. In that block, what comes to the left of the slash is a\ndyadic combining function; it’s the APL equivalent of combine. This\nblock is more nearly equivalent to keep. But keep takes a predicate\nfunction as input, and calls the function for each item of the second\ninput. With compress, the predicate function, if any, has already been\ncalled on all the items of the right input in parallel, resulting in a\nvector of Boolean values. This is a typical APL move; since hyperblocks\nare equivalent to an implicit map, it’s easy to make the vector of\nBooleans, because any scalar function, including predicates, can be\napplied to a list instead of to a scalar. The reason both blocks use the\n/ character is that both of them reduce the size of the input array,\nalthough in different ways.\n\nThe reverse row order \\index{reverse block}, reverse column order\n\\index{reverse columns block}, and transpose blocks \\index{transpose\nblock} form a group: the group of reflections of a matrix. The APL\nsymbols are all a circle with a line through it; the lines are the\ndifferent axes of reflection. So the reverse row order block reverses\nwhich row is where; the reverse column order block reverses which column\nis where; and the transpose block turns rows into columns and vice\nversa:\n\nExcept for reverse row order, these work only on full arrays, not\nragged-right lists of lists, because the result of the other two would\nbe an array in which some rows had “holes”: items 1 and 3 exist, but not\nitem 2. We don’t have a representation for that. (In APL, all arrays are\nfull, so it’s even more restrictive.)\n\n### Higher order functions\n\nThe final category of function is operators \\index{operator (APL)} —APL\nhigher order functions \\index{higher order function}. APL has no\nexplicit map function, because the hyperblock capability serves much the\nsame need. But APL2 did add an explicit map, which we might get around\nto adding to the library next time around. Its symbol is **¨**\n(diaeresis or umlaut).\n\nThe APL equivalent of keep is compress, but it’s not a higher order\nfunction. You create a vector of Booleans (0s and 1s, in APL) before\napplying the function to the array you want to compress.\n\nBut APL does have a higher order version of combine:\n\n![image1332.png](assets/image1332.png) <!--  style=\"width:6.68333in;height:1.04167in\" alt=\"Macintosh HD:Users:bh:Desktop:matrix.png\" / --> The reduce block\n\\index{reduce block} works just like combine, taking a dyadic function\nand a list. The / version translates each row to a single value; the\n**⌿** version translates each column to a single value. That’s the only\nway to think about it from the perspective of combining individual\nelements: you are adding up, or whatever the function is, the numbers in\na single row (/) or in a single column (**⌿**). But APLers think of a\nmatrix as made up of vectors, either row vectors or column vectors. And\nif you think of what these blocks do as adding vectors, rather than\nadding individual numbers, it’s clear that in\n\n![image1333.png](assets/image1333.png) <!--  style=\"width:5.83333in;height:1.1in\" alt=\"Macintosh HD:Users:bh:Desktop:add-matrix.png\" / --> \n\n![image1334.png](assets/image1334.png) <!--  style=\"width:4.80833in;height:1.1in\" alt=\"Macintosh HD:Users:bh:Desktop:non-apl-combine.png\" / --> the *vector*\n(10, 26, 42) is the sum of *column vectors* (1, 5, 9)+(2, 6, 10)+(3, 7,\n11)+(4, 8, 12). In pre-6.0 Snap*!*, we’d get the same result this way:\n\nmapping over the *rows* of the matrix, applying combine to each row.\nCombining rows, reducing column vectors.  \nThe outer product block \\index{outer product block} takes two arrays\n(vectors, typically) and a dyadic scalar function as inputs. It reports\nan array whose rank is the sum of the ranks of the inputs (so, typically\na matrix), in which each item is the result of applying the function to\nan atomic element of each array. The third element of the second row of\nthe result is the value reported by the function with the second element\nof the left input and the third element of the right input. (The APL\nsymbol ◦. is pronounced “jot dot.”) The way to think about this block is\n“multiplication table \\index{table} ” from elementary school:\n\n![image1335.png](assets/image1335.png) <!--  style=\"width:7.24in;height:1.52in\" alt=\"Macintosh HD:Users:bh:Desktop:outer-ex.png\" / --> \n\n![image1336.png](assets/image1336.png) <!--  style=\"width:2.16667in;height:0.24167in\" alt=\"Macintosh HD:Users:bh:Desktop:outer.png\" / --> \n\n![image1337.png](assets/image1337.png) <!--  style=\"width:2.61667in;height:0.24167in\" alt=\"Macintosh HD:Users:bh:Desktop:inner.png\" / --> \n\n![image1338.png](assets/image1338.png) <!--  style=\"width:7.33861in;height:1.00694in\" alt=\"Macintosh HD:Users:bh:Desktop:inner-ex.png\" / --> The inner product\nblock \\index{inner product block} takes two matrices and two operations\nas input. The number of columns in the left matrix must equal the number\nof rows in the right matrix. When the two operations are + and ×, this\nis the matrix multiplication \\index{multiplication, matrix} familiar to\nmathematicians:\n\nBut other operations can be used. One common inner product is ∨.∧ (“or\ndot and”) applied to Boolean matrices, to find rows and columns that\nhave corresponding items in common.\n\n![image1339.png](assets/image1339.png) <!--  style=\"width:0.95833in;height:0.18333in\" alt=\"Macintosh HD:Users:bh:Desktop:printable.png\" / --> The printable block\n\\index{printable block} isn’t an APL function; it’s an aid to exploring\nAPL-in-Snap*!*. It transforms arrays to a compact representation that\nstill makes the structure clear:\n\n![image1340.png](assets/image1340.png) <!--  style=\"width:5.99792in;height:0.33333in\" alt=\"Macintosh HD:Users:bh:Desktop:printable-ex.png\" / --> Experts will\nrecognize this as the Lisp representation of list structure,\n\nIndex\n\n! block · 32\n\n.csv file · 134\n\n.json file · 134\n\n.txt file · 134\n\n\\# variable · 25\n\n\\#1 · 69\n\n\\+ block · 22\n\n× block · 22\n\n≠ block · 20\n\n≤ block · 20\n\n≥ block · 20\n\n⚡ (lightning bolt) · 123\n\nA\n\na new clone of block · 77\n\n*A Programming Language* · 148\n\nAbelson, Hal · 4\n\nAbout option · 107\n\nadd comment option · 124, 125\n\nAdd scene… option · 111\n\nadditive mixing · 144\n\nAdvanced Placement Computer Science Principles · 110\n\nAGPL · 107\n\nall but first blocks · 27\n\nall but first of block · 49\n\nall but first of stream block · 26\n\nall but last blocks · 27\n\nall of block · 28\n\nAlonzo · 9, 55\n\nanchor · 10\n\nanchor (in my block) · 78\n\nanimate block · 33\n\nanimation · 12\n\nanimation library · 33\n\nanonymous list · 46\n\nAny (unevaluated) type · 72\n\nany of block · 28\n\nAny type · 60\n\nAPL · 4, 58, 148\n\nAPL character set · 149\n\nAPL library · 35, 148\n\nAPL2 · 149\n\nAPL\\360 · 148\n\nArduino · 92\n\narithmetic · 11\n\narray, dynamic · 49\n\narrow, upward-pointing · 63\n\narrowheads · 46, 63, 69\n\nask and wait block · 24\n\nask block · 86\n\nassoc block · 25\n\nassociation list · 88\n\nassociative function · 51\n\nat block · 19\n\natan2 block · 20\n\natomic data · 57\n\nattribute · 76\n\nattributes, list of · 78\n\naudio comp library · 34\n\nB\n\nbackground blocks · 19\n\nBackgrounds… option · 112\n\nbackspace key (keyboard editor) · 131\n\nBall, Michael · 4\n\nbar chart block · 28\n\nbar charts library · 28\n\nbase case · 44\n\nBIGNUMS block · 32\n\nbinary tree · 47\n\nbitmap · 79, 112\n\nbitwise library · 36\n\nbjc.edc.org · 137\n\nBlack Hole problem · 139\n\nblock · 6; command · 6; C-shaped · 7; hat · 6; predicate · 12; reporter\n· 10; sprite-local · 75\n\nBlock Editor · 41, 42, 59\n\nblock label · 102\n\nblock library · 45, 110\n\nblock picture option · 124\n\nblock shapes · 40, 60\n\nblock variable · 43\n\nblock with no name · 32\n\nblockify option · 134\n\nblocks, color of · 40\n\nBoole, George · 12\n\nBoolean · 12\n\nBoolean (unevaluated) type · 72\n\nBoolean constant · 12\n\nbox of ten crayons · 139\n\nbox of twenty crayons · 139\n\nbreak command · 99\n\nbreakpoint · 17, 118\n\nBriggs, David · 145\n\nbroadcast and wait block · 9, 125\n\nbroadcast block · 21, 23, 73, 125\n\nbrown dot · 9\n\nBuild Your Own Blocks · 40\n\nBurns, Scott · 145\n\nbutton: pause · 17; recover · 39; visible stepping · 18\n\nC\n\nC programming language · 68\n\ncall block · 65, 68\n\ncall w/continuation block · 97\n\ncamera icon · 126\n\nCancel button · 129\n\ncarriage return character · 20\n\ncascade blocks · 26\n\ncase-independent comparisons block · 33\n\ncases block · 28\n\ncatch block · 26, 99\n\ncatch errors library · 31\n\ncatenate block · 152\n\ncatenate vertically block · 152\n\ncenter of the stage · 22\n\ncenter x (in my block) · 78\n\ncenter y (in my block) · 78\n\nChandra, Kartik · 4\n\nchange background block · 22\n\nChange password… option · 113\n\nchange pen block · 24, 29, 117, 140\n\nchild class · 87\n\nchildren (in my block) · 78\n\nChurch, Alonzo · 9\n\nclass · 85\n\nclass/instance · 76\n\nclean up option · 125\n\nclear button · 129\n\nclicking on a script · 122\n\nClicking sound option · 116\n\nclone: permanent · 74; temporary · 74\n\nclone of block · 89\n\nclones (in my block) · 78\n\ncloud (startup option) · 136\n\nCloud button · 37, 108\n\ncloud icon · 113\n\ncloud storage · 37\n\nCMY · 138\n\nCMYK · 138\n\ncodification support option · 117\n\ncolor at weight block · 145\n\ncolor block · 140\n\ncolor chart · 147\n\ncolor from block · 29, 140\n\ncolor nerds · 145\n\ncolor numbers · 29, 138, 139\n\ncolor of blocks · 40\n\ncolor palette · 128\n\ncolor picker · 143\n\ncolor scales · 141\n\ncolor space · 138\n\ncolor theory · 138\n\nColors and Crayons library · 138\n\ncolors library · 29\n\ncolumns of block · 57\n\ncombine block · 50\n\ncombine block (APL) · 157\n\ncommand block · 6\n\ncomment box · 125\n\ncompile menu option · 123\n\ncompose block · 26\n\ncompress block · 156\n\nComputer Science Principles · 110\n\ncond in Lisp · 28\n\nconditional library: multiple-branch · 28\n\nconstant functions · 71\n\nconstructors · 47\n\ncontained in block · 153\n\ncontext menu · 119\n\ncontext menu for the palette background · 120\n\ncontext menus for palette blocks · 119\n\ncontinuation · 93\n\ncontinuation passing style · 94\n\nControl palette · 7\n\ncontrols in the Costumes tab · 126\n\ncontrols in the Sounds tab · 130\n\ncontrols on the stage · 132\n\ncontrol-shift-enter (keyboard editor) · 132\n\ncopy of a list · 50\n\nCORS · 92\n\ncors proxies · 92\n\ncostume · 6, 8\n\ncostume from text block · 31\n\ncostume with background block · 31\n\ncostumes (in my block) · 78\n\nCostumes tab · 9, 126\n\ncostumes, first class · 79\n\nCostumes… option · 112\n\ncounter class · 85\n\nCPS · 96\n\ncrayon library · 31\n\ncrayons · 29, 138, 139\n\ncreate var block · 32\n\ncreate variables library · 32\n\nCross-Origin Resource Sharing · 92\n\ncrossproduct · 70\n\ncs10.org · 137\n\nC-shaped block · 7, 67\n\nC-shaped slot · 72\n\nCSV (comma-separated values) · 54\n\nCSV format · 20\n\ncsv of block · 57\n\ncurrent block · 92\n\ncurrent date or time · 92\n\ncurrent location block · 34\n\ncurrent sprite · 122\n\ncustom block in a script · 124\n\ncustom? of block block · 102\n\ncyan · 142\n\nD\n\ndangling rotation · 10\n\ndangling? (in my block) · 78\n\ndark candy apple red · 141\n\ndata hiding · 73\n\ndata structure · 47\n\ndata table · 88\n\ndata type · 19, 59\n\ndatabase library · 34\n\ndate · 92\n\nDave, Achal · 4\n\ndeal block · 150\n\ndebugging · 118\n\nDebugging · 17\n\ndeep copy of a list · 50\n\ndefault value · 63\n\ndefine block · 102\n\ndefine of recursive procedure · 104\n\n*definition (of block)* · 102\n\ndefinition of block · 101\n\ndelegation · 87\n\nDelete a variable · 14\n\ndelete block definition… option · 120\n\ndelete option · 124, 128, 133\n\ndelete var block · 32\n\ndenim · 139\n\ndesign principle · 46, 77\n\ndevices · 91, 92\n\ndialog, input name · 42\n\ndimensions of block · 57\n\nDinsmore, Nathan · 4\n\ndirection to block · 22\n\nDisable click-to-run option · 117\n\ndispatch procedure · 85, 86, 88\n\ndistance to block · 22\n\ndl (startup option) · 136\n\ndo in parallel block · 31\n\ndoes var exist block · 32\n\ndown arrow (keyboard editor) · 131\n\nDownload source option · 108\n\ndrag from prototype · 43\n\ndraggable checkbox · 122, 132\n\ndragging onto the arrowheads · 69\n\ndrop block · 155\n\nduplicate block definition… option · 120\n\nduplicate option · 124, 128, 132\n\ndynamic array · 49\n\nE\n\neasing block · 33\n\neasing function · 33\n\nedge color · 129\n\nedit option · 128, 133, 135\n\nedit… option · 120\n\neditMode (startup option) · 137\n\neffect block · 19\n\nellipse tool · 128, 129\n\nellipsis · 63\n\nelse block · 28\n\nelse if block · 28\n\nempty input slots, filling · 66, 68, 70\n\nenter key (keyboard editor) · 131\n\nequality of complete structures · 149\n\neraser tool · 128\n\nerror block · 31\n\nerror catching library · 31\n\nescape key (keyboard editor) · 130\n\nExamples button · 108\n\nExecute on slider change option · 115\n\nexport block definition… option · 120\n\nExport blocks… option · 110\n\nexport option · 128, 133\n\nExport project… option · 110\n\nexport… option · 134, 136\n\nexpression · 11\n\nExtension blocks option · 115\n\nextract option · 124\n\neyedropper tool · 128, 129\n\nF\n\nfactorial · 44, 71\n\nfactorial · 32\n\nFade blocks… option · 114\n\nfair HSL · 145\n\nfair hue · 29, 141, 143, 146\n\nfair hue table · 146\n\nfair saturation · 146\n\nfair value · 146\n\nFalkoff, Adin · 148\n\nfalse block · 19\n\nfile icon menu · 108\n\nfill color · 129\n\nFinch · 92\n\nfind blocks… option · 120\n\nfind first · 50\n\nfirst class data · 148\n\nfirst class data type · 46\n\nﬁrst class procedures · 65\n\nﬁrst class sprites · 73\n\nfirst word block · 27\n\nflag, green · 6\n\nFlat design option · 116\n\nflat line ends option · 117\n\nflatten block · 152\n\nflatten of block · 57\n\nfloodfill tool, · 128\n\nfocus (keyboard editor) · 131\n\nfootprint button · 117\n\nfor block · 13, 19, 26, 64, 65\n\nfor each block · 20\n\nfor each item block · 25\n\nFor this sprite only · 15\n\nformal parameters · 69\n\nfrequency distribution analysis library · 34\n\nfrom color block · 29, 140, 142\n\nfunction, associative · 51\n\nfunction, higher order · 49, 148\n\nfunction, mixed · 148, 151\n\nfunction, scalar · 55, 148\n\nfunctional programming style · 48\n\nG\n\ngeneric hat block · 6\n\ngeneric when · 6\n\nget blocks option · 128\n\ngetter · 76\n\ngetter/setter library · 32\n\nglide block · 115\n\nglobal variable · 14, 15\n\ngo to block · 22\n\ngrade down block · 154\n\ngrade up block · 154\n\ngraphics effect · 19\n\ngray · 139, 141\n\ngreen flag · 6\n\ngreen flag button · 118\n\ngreen halo · 123\n\nGuillén i Pelegay, Joan · 4\n\nH\n\nhalo · 11, 123; red · 69\n\nhat block · 6, 41; generic · 6\n\nhelp… option · 119, 123\n\nhelp… option for custom block · 119\n\nhexagonal blocks · 41, 60\n\nhexagonal shape · 12\n\nhide and show primitives · 17\n\nhide blocks option · 120\n\nHide blocks… option · 111\n\nhide var block · 32\n\nhide variable block · 17\n\nhideControls (startup option) · 137\n\nhigher order function · 49, 70, 148, 157\n\nhigher order procedure · 66\n\nhistogram · 34\n\nHotchkiss. Kyle · 4\n\nHSL · 138, 143\n\nHSL color · 29\n\nHSL pen color model option · 117\n\nHSV · 138, 142\n\nHTML (HyperText Markup Language) · 91\n\nHTTP · 92\n\nHTTPS · 92, 126\n\nHudson, Connor · 4\n\nhue · 141\n\nHuegle, Jadga · 4\n\nHummingbird · 92\n\nhyperblocks · 148\n\nHyperblocks · 55\n\nHz for block · 34\n\nI\n\nIBM System/360 · 148\n\nice cream · 109\n\nicons in title text · 64\n\nid block · 71\n\nid option · 22\n\nidentical to · 20\n\nidentity function · 71\n\nif block · 12\n\nif do and pause all block · 26\n\nif else block · 71\n\nif else reporter block · 19\n\nignore block · 26\n\nimperative programming style · 48\n\nimport… option · 134\n\nImport… option · 110\n\nin front of block · 49\n\nin front of stream block · 26\n\nindex of block (APL) · 152\n\nindex variable · 19\n\nindigo · 141\n\ninfinite precision integer library · 32\n\nIngalls, Dan · 4\n\ninherit block · 77\n\ninheritance · 73, 87\n\ninner product block · 158\n\ninput · 6\n\ninput list · 68, 69\n\ninput name · 69\n\ninput name dialog · 42, 59\n\nInput sliders option · 115\n\ninput-type shapes · 59\n\ninstance · 85\n\nintegers block · 152\n\ninteraction · 15\n\ninternal variable · 63\n\niota block · 152\n\nis \\_ a \\_ ? block · 19\n\nis flag block · 20\n\nis identical to · 20\n\nitem 1 of block · 49\n\nitem 1 of stream block · 26\n\nitem block · 148\n\nitem of block · 56\n\niteration library · 26\n\nIverson, Kenneth E. · 4, 148\n\nJ\n\njaggies · 79\n\nJava programming language · 68\n\nJavaScript · 19, 143\n\nJavaScript extensions option · 115\n\nJavaScript function block · 115\n\njigsaw-piece blocks · 40, 60\n\njoin block · 102\n\nJSON (JavaScript Object Notation) file · 54\n\nJSON format · 20\n\njson of block · 57\n\njukebox · 9\n\nK\n\nKay, Alan · 4\n\nkey:value: block · 34\n\nkeyboard editing button · 123\n\nkeyboard editor · 130\n\nkeyboard shortcuts · 108\n\nkey-value pair · 88\n\nL\n\nL\\*a\\*b\\* · 143\n\nL\\*u\\*v\\* · 143\n\nlabel, block · 102\n\nlambda · 67\n\nlang= (startup option) · 137\n\nLanguage… option · 114\n\nlarge option · 134\n\nlast blocks · 27\n\nlayout, window · 5\n\nLeap Motion · 92\n\nleft arrow (keyboard editor) · 131\n\nLego NXT · 92\n\nlength block · 148\n\nlength of block · 57\n\nlength of text block · 22\n\nletter (1) of (world) block · 27\n\nlexical scope · 85\n\nlg option · 22\n\nLibraries… option · 25, 111\n\nlibrary: block · 45\n\nlicense · 107\n\nLieberman, Henry · 77\n\nLifelong Kindergarten Group · 4\n\nlightness · 143\n\nlightness option · 117\n\nlightning bolt symbol · 25, 123\n\nline break in block · 64\n\nline drawing tool · 128\n\nlines of block · 57\n\nlinked list · 49\n\nLisp · 58\n\nlist ➔ sentence block · 27\n\nlist ➔ word block · 27\n\nlist block · 46\n\nlist comprehension library · 35\n\nlist copy · 50\n\nlist library · 25\n\nlist of procedures · 70\n\nList type · 60\n\nlist view · 51\n\nlist, linked · 49\n\nlist, multi-dimensional · 55\n\nlistify block · 34\n\nlists of lists · 47\n\nlittle people · 44, 96\n\nloading saved projects · 38\n\nlocal state · 73\n\nlocal variables · 19\n\nlocation-pin · 15\n\nLogin… option · 113\n\nLogo tradition · 27\n\nLogout option · 113\n\nLong form input dialog option · 116\n\nlong input name dialog · 59\n\nM\n\nmacros · 105\n\nmagenta · 141, 142\n\nMake a block · 40\n\nMake a block button · 119\n\nmake a block… option · 126\n\nMake a list · 46\n\nMake a variable · 14\n\nmake internal variable visible · 63\n\nMaloney, John · 4\n\nmap block · 50, 65\n\nmap library · 35\n\nmap over stream block · 26\n\nmap to code block · 117\n\nmap-pin symbol · 75\n\nmaroon · 141\n\nMassachusetts Institute of Technology · 4\n\nmathematicians · 148\n\nmatrices · 148\n\nmatrix multiplication · 158\n\nmax block · 20\n\nMcCarthy, John · 4\n\nmedia computation · 55, 149\n\nMedia Lab · 4\n\nmemory · 16\n\nmenus library · 36\n\nmessage · 73\n\nmessage passing · 73, 86\n\nmethod · 73, 75, 86\n\nmethods table · 88\n\nmicrophone · 82\n\nmicrophone block · 82\n\nmiddle option · 127\n\nmin block · 20\n\nmirror sites · 137\n\nMIT Artificial Intelligence Lab · 4\n\nMIT Media Lab · 4\n\nmix block · 140\n\nmix colors block · 29\n\nmixed function · 148, 151\n\nmixing paints · 144\n\nModrow, Eckart · 121\n\nmonadic negation operator · 22\n\nMorphic · 4\n\nMotyashov, Ivan · 4\n\nmouse position block · 21\n\nmove option · 133\n\nMQTT library · 36\n\nmultiline block · 33\n\nmultimap block · 25\n\nmultiple input · 63\n\nmultiple-branch conditional library · 28\n\nmultiplication table · 158\n\nmultiplication, matrix · 158\n\nmutation · 48\n\nmutators · 47\n\nmy block · 73, 76\n\nmy blocks block · 102\n\nmy categories block · 102\n\nN\n\nname (in my block) · 78\n\nname box · 122\n\nname, input · 69\n\nnearest color number · 142\n\nneg option · 22\n\nnegation operator · 22\n\nneighbors (in my block) · 78\n\nnested calls · 70\n\nNesting Sprites · 10\n\nNew category… option · 111\n\nnew costume block · 80\n\nnew line character · 64\n\nNew option · 108\n\nNew scene option · 111\n\nnew sound block · 84\n\nnew sprite button · 8\n\nnewline character · 20\n\nNintendo · 92\n\nnoExitWarning (startup option) · 137\n\nnonlocal exit · 99\n\nnormal option · 134\n\nnormal people · 145\n\nnoRun (startup option) · 137\n\nNumber type · 60\n\nnumbers from block · 20\n\nO\n\nobject block · 73\n\nObject Logo · 77\n\nobject oriented programming · 73, 85\n\nObject type · 60\n\nobjects, building explicitly · 85\n\nof block (operators) · 22\n\nof block (sensing) · 24, 106\n\nof costume block · 79\n\nopen (startup option) · 136\n\nOpen in Community Site option · 113\n\nOpen… option · 108\n\noperator (APL) · 148, 157\n\norange oval · 13\n\nother clones (in my block) · 78\n\nother sprites (in my block) · 78\n\nouter product block · 158\n\noutlined ellipse tool · 128\n\noutlined rectangle tool · 128\n\noval blocks · 40, 60\n\nP\n\npaint brush icon · 126\n\nPaint Editor · 126\n\nPaint Editor window · 128\n\npaintbrush tool · 128\n\npaints · 144\n\nPaleolithic · 150\n\npalette · 6\n\npalette area · 119\n\npalette background · 120\n\nParallax S2 · 92\n\nparallelism · 8, 48\n\nparallelization library · 31\n\nparent (in my block) · 78\n\nparent attribute · 77\n\nparent class · 87\n\nparent… option · 136\n\n*Parsons problems* · 117\n\nparts (in my block) · 78\n\nparts (of nested sprite) · 10\n\npause all block · 17, 118\n\npause button · 17, 118\n\npen block · 24, 29, 117, 140\n\npen down? block · 19\n\npen trails block · 18\n\npen trails option · 135\n\npen vectors block · 18\n\npermanent clone · 74, 136\n\nphysical devices · 91\n\npic… option · 135, 136\n\npicture of script · 124\n\npicture with speech balloon · 124\n\npicture, smart · 124\n\npink · 141\n\npivot option · 133\n\npixel · 79\n\npixel, screen · 19\n\npixels library · 27\n\nPlain prototype labels option · 116\n\nplay block · 34\n\nplay sound block · 9\n\nplaying sounds · 9\n\nplot bar chart block · 28\n\nplot sound block · 34\n\npoint towards block · 22\n\npoints as inputs · 22\n\npolymorphism · 75\n\nposition block · 21, 33\n\nPredicate block · 12\n\npreloading a project · 136\n\npresent (startup option) · 136\n\npresentation mode button · 118\n\nprimitive block within a script · 123\n\nprintable block · 27, 158\n\nprocedure · 12, 66\n\nProcedure type · 72\n\nprocedures as data · 9\n\nproduct block · 22, 28\n\nproject control buttons · 118\n\nProject notes option · 108\n\nProlog · 58\n\nprototype · 41\n\nprototyping · 76, 88\n\npulldown input · 61\n\npumpkin · 139\n\npurple · 142\n\nR\n\nrainbow · 141\n\nrank · 148\n\nrank of block · 57, 151\n\nravel block · 149\n\nraw data… option · 134\n\nray length block · 22\n\nread-only pulldown input · 61\n\nreceivers… option · 125\n\nrecover button · 39\n\nrectangle tool · 128\n\nrecursion · 43\n\nrecursive call · 68\n\nrecursive operator · 71\n\nrecursive procedure using define · 104\n\nred halo · 68, 69, 123\n\nredo button · 123\n\nredrop option · 125\n\nreduce block · 156, 157\n\nReference manual option · 108\n\nreflectance graph · 144\n\nrelabel option · 20\n\nrelabel… option · 123, 124\n\nrelease option · 136\n\nRemove a category… option · 111\n\nremove duplicates from block · 25\n\nrename option · 128\n\nrenaming variables · 15\n\n**repeat** block · 7, 67\n\nrepeat blocks · 26\n\nrepeat until block · 12\n\nreport block · 44\n\nReporter block · 10\n\nreporter **if** block · 12\n\nreporter if else block · 19\n\nreporters, recursive · 44\n\nReset Password… option · 113\n\nreshape block · 56, 148, 151\n\nRestore unsaved project option · 39\n\nresult pic… option · 124, 125\n\nreverse block · 156\n\nreverse columns block · 156\n\nReynolds, Ian · 4\n\nRGB · 138\n\nRGBA option · 19\n\nright arrow (keyboard editor) · 131\n\nring, gray · 49, 66, 68\n\nringify · 66\n\nringify option · 124\n\nRoberts, Eric · 44\n\nrobots · 91, 92\n\nrods and cones · 141\n\nroll block · 150\n\nRomagosa, Bernat · 4\n\nrotation buttons · 122\n\nrotation point tool · 128, 129\n\nrotation x (in my block) · 78\n\nrotation y (in my block) · 78\n\nrun (startup option) · 136\n\nrun block · 65, 68\n\nrun w/continuation · 99\n\nS\n\nsafely try block · 31\n\nsample · 82\n\nsaturation · 143\n\nSave as… option · 110\n\nSave option · 110\n\nsave your project in the cloud · 37\n\nscalar = block · 150\n\nscalar function · 55, 148, 150\n\nscalar join block · 150\n\nscenes · 111, 136\n\nScenes… option · 111\n\nScheme · 4\n\nScheme number block · 32\n\nSciSnap*!* · 121\n\nSciSnap*!* library · 36\n\nscope: lexical · 85\n\nScratch · 5, 9, 40, 46, 47, 48, 59\n\nScratch Team · 4\n\nscreen pixel · 19\n\nscript · 5\n\nscript pic · 43\n\nscript pic… option · 124\n\n**script variables** block · 15, 19, 86\n\nscripting area · 6, 122\n\nscripting area background context menu · 125\n\nscripts pic… option · 126\n\nsearch bar · 109\n\nsearch button · 119\n\nsecrets · 107\n\nselect block · 156\n\nselectors · 47\n\nself (in my block) · 78\n\nsenders… option · 125\n\nsensors · 91\n\nsentence ➔ list block · 27\n\nsentence block · 25\n\nsentence library · 27\n\nsentence➔list block · 25\n\nseparator: menu · 62\n\nsepia · 139\n\nserial-ports library · 33\n\nServilla, Deborah · 4\n\nset \\_ of block \\_ to \\_ block · 102\n\nset background block · 22\n\n**set** block · 15\n\nset flag block · 20, 32\n\nset pen block · 24, 29, 117, 139, 140\n\nset pen to crayon block · 30, 139\n\nset value block · 32\n\nset var block · 32\n\nsetter · 76\n\nsetting block · 32\n\nsettings icon · 114\n\nshade · 141\n\nshallow copy of a list · 50\n\nshape of block · 151\n\nshapes of blocks · 40\n\nshift-arrow keys (keyboard editor) · 131\n\nShift-click (keyboard editor) · 130\n\nshift-click on block · 124\n\nshift-clicking · 107\n\nshift-enter (keyboard editor) · 130\n\nShift-tab (keyboard editor) · 130\n\nshortcut · 126, 135\n\nshortcuts: keyboard · 108\n\nshow all option · 135\n\nShow buttons option · 117\n\nShow categories option · 117\n\nshow option · 136\n\nshow primitives option · 121\n\nshow stream block · 26\n\nshow var block · 32\n\nshow variable block · 17\n\nshown? block · 19\n\nshrink/grow button · 118\n\nsieve block · 26\n\nsign option · 22\n\nSignada library · 36\n\nsignum block · 150\n\nSignup… option · 113\n\nsimulation · 73\n\nsine wave · 83\n\nSingle palette option · 117\n\nsingle stepping · 18\n\nslider: stepping speed · 18\n\nslider max… option · 134\n\nslider min… option · 134\n\nslider option · 134\n\nSmalltalk · 58\n\nsmart picture · 124\n\nsnap block · 27\n\nsnap option · 22\n\nSnap*!* logo menu · 107\n\nSnap*!* manual · 124\n\nSnap*!* program · 5\n\nSnap! website option · 108\n\nsnap.berkeley.edu · 108\n\nsolid ellipse tool · 128\n\nsolid rectangle tool · 128\n\nsophistication · 72\n\nsort block · 25\n\nsound · 82\n\nsound manipulation library · 34\n\nsounds (in my block) · 78\n\nsounds, first class · 79\n\nSounds… option · 113\n\nsource files for Snap*!* · 108\n\nspace key (keyboard editor) · 131\n\nspeak block · 31\n\nspecial form · 72\n\nspectral colors · 141\n\nspeech balloon · 124\n\nspeech synthesis library · 31\n\nsplit block · 20, 91\n\nsplit by blocks block · 101\n\nsplit by line block · 57\n\nspreadsheet · 149\n\nsprite · 6, 73\n\nsprite appearance and behavior controls · 122\n\nsprite corral · 8, 135\n\nsprite creation buttons · 135\n\nsprite nesting · 10\n\nsprite-local block · 75\n\nsprite-local variable · 14, 15\n\nsquare stop sign · 6\n\nsquiral · 13\n\nstack of blocks · 6\n\nstage · 6, 73\n\nstage (in my block) · 78\n\nstage blocks · 19\n\nStage resizing buttons · 118\n\nStage size… option · 114\n\nStanford Artificial Intelligence Lab · 4\n\nstarting Snap*!* · 136\n\nSteele, Guy · 4\n\nstop all block · 118\n\nstop block · 22\n\nstop block block · 44\n\nstop button · 118\n\nstop script block · 44\n\nstop sign · 8\n\nstop sign, square · 6\n\nStream block · 26\n\nstream library · 26\n\nStream with numbers from block · 26\n\nstretch block · 80\n\nstring processing library · 33\n\n*Structure and Interpretation of Computer Programs* · 4\n\nsubmenu · 62\n\nsubstring block · 33\n\nsubtractive mixing · 144\n\nsum block · 22, 28\n\nSuper-Awesome Sylvia · 92\n\nSussman, Gerald J. · 4\n\nSussman, Julie · 4\n\nsvg… option · 135\n\nswitch in C · 28\n\nsymbols in title text · 64\n\nsynchronous rotation · 10\n\nsystem getter/setter library · 32\n\nT\n\ntab character · 20\n\ntab key (keyboard editor) · 130\n\ntable · 158\n\ntable view · 51\n\ntake block · 155\n\nteal · 142\n\ntemporary clone · 74, 133\n\nTerms of Service · 38\n\ntermwise extension · 148\n\ntext costume library · 31\n\ntext input · 9\n\nText type · 60\n\ntext-based language · 117\n\ntext-to-speech library · 31\n\n*Thinking Recursively* · 44\n\nthread · 100\n\nthread block · 100\n\nThread safe scripts option · 116\n\nthrow block · 26\n\nthumbnail · 122\n\ntime · 92\n\ntint · 141\n\ntip option · 127\n\ntitle text · 42\n\nto block · 22\n\ntool bar · 6\n\ntool bar features · 107\n\ntouching block · 22\n\ntransient variable · 16\n\ntranslation · 114\n\ntranslations option · 43\n\ntransparency · 30, 79, 140\n\ntransparent paint · 129\n\ntranspose block · 156\n\ntrue block · 19\n\nTuneScope library · 36\n\nTurbo mode option · 115\n\nturtle costume · 126\n\nTurtle costume · 9\n\nturtle’s rotation point · 127\n\ntwo-item (x,y) lists · 22\n\ntype · 19\n\nU\n\nUndefined! blocks · 120\n\nUndelete sprites… option · 113\n\nundo button · 123, 129\n\nundrop option · 125\n\nunevaluated procedure types · 61\n\nunevaluated type · 72\n\nUnicode · 149\n\nUniform Resource Locator · 91\n\nunringify · 66, 86\n\nunringify option · 124\n\nUnused blocks… option · 111\n\nup arrow (keyboard editor) · 131\n\nupvar · 64\n\nupward-pointing arrow · 63\n\nurl block · 34, 91\n\nUSE BIGNUMS block · 32\n\nuse case-independent comparisons block · 33\n\nuser interface elements · 107\n\nuser name · 37\n\nV\n\nvalue · 143\n\nvalue at key block · 34\n\nvar block · 32\n\nvariable · 13, 76; block · 43; global · 14; renaming · 15; script-local\n· 15; sprite-local · 14, 15; transient · 16\n\nvariable watcher · 14\n\nvariable-input slot · 68\n\nvariables in ring slots · 66\n\nvariables library · 32\n\nvariables, local · 19\n\nvariadic · 22\n\nvariadic input · 46, 63\n\nvariadic library · 28\n\nvector · 112\n\nvector editor · 129\n\nvectors · 148\n\nvideo block · 22\n\nvideo on block · 80\n\nviolet · 142\n\nvisible stepping · 45, 117\n\nvisible stepping button · 18\n\nvisible stepping option · 115\n\nvisual representation of a sentence · 27\n\nW\n\nwardrobe · 9\n\nwarp block · 19, 123\n\nwatcher · 15\n\nWater Color Bot · 92\n\nweb services library · 34\n\nwhen I am block · 23\n\nwhen I am stopped script · 23\n\nwhen I receive block · 23\n\nwhen, generic · 6\n\nwhite · 142\n\nwhite background · 141\n\nwhitespace · 20\n\nWiimote · 92\n\nwindow layout · 5\n\nwith inputs · 66\n\nword ➔ list block · 27\n\nword and sentence library · 27\n\nworld map library · 35\n\nWorld Wide Web · 91\n\nwrite block · 18\n\nwriteable pulldown inputs · 61\n\nX\n\nX position · 11\n\nX11/W3C color names · 29\n\nXerox PARC · 4\n\nY\n\nY position · 11\n\nyield block · 100\n\nYuan, Yuan · 4\n\nZ\n\nzebra coloring · 11\n\nZoom blocks... option · 114\n\n[1] One of the hat blocks, the generic \\index{hat block:generic} “when\nanything” block , is subtly different from the others. When the stop\nsign is clicked, or when a project or sprite is loaded, this block\ndoesn’t test whether the condition in its hexagonal input slot is true,\nso the script beneath it will not run, until some *other* script in the\nproject runs (because, for example, you click the green flag). When\ngeneric when \\index{generic when} blocks are disabled, the stop sign\n\\index{stop sign, square} will be square \\index{square stop sign}\ninstead of octagonal.\n\n[2] The hide variable and \\index{hide variable block} show variable\nblock \\index{show variable block} s can also be used to hide and show\nprimitives \\index{hide and show primitives} in the palette. The pulldown\nmenu doesn’t include primitive blocks, but there’s a generally useful\ntechnique to give a block input values it wasn’t expecting using run or\ncall:![image120.png](assets/image120.png) <!--  style=\"width:3.9375in;height:0.38889in\" / --> \n\nIn order to use a block as an input this way, you must explicitly put a\nring around it, by right-clicking on it and choosing ringify. More about\nrings in Chapter VI.\n\n[3] This use of the word “prototype” is unrelated to the *prototyping\nobject oriented programming* discussed later.\n\n[4] Note to users of earlier versions: From the beginning, there has\nbeen a tension in our work between the desire to provide tools such as\nfor (used in this example) and the higher order functions introduced on\nthe next page as primitives, to be used as easily as other primitives,\nand the desire to show how readily such tools can be implemented in\nSnap*!* itself. This is one instance of our general pedagogic\nunderstanding that learners should both use abstractions and be\npermitted to see beneath the abstraction barrier. Until version 5.0, we\nused the uneasy compromise of a library of tools written in Snap*!* and\neasily, but not easily enough, loaded into a project. By *not* loading\nthe tools, users or teachers could explore how to program them. In 5.0\nwe made them true primitives, partly because that’s what some of us\nwanted all along and partly because of the increasing importance of fast\nperformance as we explore “big data” and media computation. But this is\nnot the end of the story for us. In a later version, after we get the\ndesign firmed up, we intend to introduce “hybrid” primitives,\nimplemented in high speed Javascript but with an “Edit” option that will\nopen, not the primitive implementation, but the version written in\nSnap*!*. The trick is to ensure that this can be done without\ndramatically slowing users’ projects.\n\n[5] In Scratch, every block that takes a Text-type input has a default\nvalue that makes the rectangles for text wider than tall. The blocks\nthat aren’t specifically about text either are of Number type\n\\index{Number type} or have no default value, so those rectangles are\ntaller than wide. At ﬁrst some of us (bh) thought that Text was a\nseparate type that always had a wide input slot; it turns out that this\nisn’t true in Scratch (delete the default text and the rectangle\nnarrows), but we thought it a good idea anyway, so we allow Text-shaped\nboxes even for empty input slots. (This is why Text comes just above Any\nin the input type selection box.)\n\n[6] There is a primitive id function in the menu of the sqrt of block,\nbut we think seeing its (very simple) implementation will make this\nexample easier to understand.\n\n[7] Some languages popular in the “real world” today, such as\nJavaScript, claim to use prototyping, but their object system is much\nmore complicated than what we are describing (we’re guessing it’s\nbecause they were designed by people too familiar with class/instance\nprogramming); that has, in some circles, given prototyping a bad name.\nOur prototyping design comes from Object Logo \\index{Object Logo}, and\nbefore that, from Henry Lieberman \\index{Lieberman, Henry}.\n\\[Lieberman, H., Using Prototypical Objects to Implement Shared Behavior\nin Object-Oriented Systems, First Conference on Object-Oriented\nProgramming Languages, Systems, and Applications \\[OOPSLA-86\\], ACM\nSigCHI, Portland, OR, September, 1986. Also in *Object-Oriented\nComputing,* Gerald Peterson, Ed., IEEE Computer Society Press, 1987.\\]\n\n[8] *Neighbors* are all other sprites whose bounding boxes intersect the\ndoubled dimensions of the requesting sprite's bounds.\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"brand":{"brand":{"color":{"palette":{"dark-grey":"#222222","blue":"#003262"},"primary":"black"},"logo":{"medium":"images/snap-logo.png"},"typography":{"fonts":[{"family":"Open Sans","source":"google"}],"base":"Open Sans","headings":"Freight Text Pro"}},"data":{"color":{"palette":{"dark-grey":"#222222","blue":"#003262"},"primary":"black"},"logo":{"medium":"images/snap-logo.png"},"typography":{"fonts":[{"family":"Open Sans","source":"google"}],"base":"Open Sans","headings":"Freight Text Pro"}},"brandDir":"C:\\Users\\victo\\snap-manual-new","projectDir":"C:\\Users\\victo\\snap-manual-new","processedData":{"color":{"dark-grey":"#222222","blue":"#003262","primary":"black"},"typography":{"base":"Open Sans","headings":"Freight Text Pro"},"logo":{"images":{},"medium":{"light":{"path":"images/snap-logo.png"},"dark":{"path":"images/snap-logo.png"}}}}}},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../../scripts/collect-index.lua"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","bibliography":["../../references.bib"],"number-depth":1,"theme":["none","../../styles/snap-manual.scss"],"strip-comment":true,"navbar":{"logo":"../../images/snap-logo.png"}},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":true,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"brand":{"brand":{"color":{"palette":{"dark-grey":"#222222","blue":"#003262"},"primary":"black"},"logo":{"medium":"images/snap-logo.png"},"typography":{"fonts":[{"family":"Open Sans","source":"google"}],"base":"Open Sans","headings":"Freight Text Pro"}},"data":{"color":{"palette":{"dark-grey":"#222222","blue":"#003262"},"primary":"black"},"logo":{"medium":"images/snap-logo.png"},"typography":{"fonts":[{"family":"Open Sans","source":"google"}],"base":"Open Sans","headings":"Freight Text Pro"}},"brandDir":"C:\\Users\\victo\\snap-manual-new","projectDir":"C:\\Users\\victo\\snap-manual-new","processedData":{"color":{"dark-grey":"#222222","blue":"#003262","primary":"black"},"typography":{"base":"Open Sans","headings":"Freight Text Pro"},"logo":{"images":{},"medium":{"light":{"path":"images/snap-logo.png"},"dark":{"path":"images/snap-logo.png"}}}}}},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"snap-manual","include-in-header":["../../styles/latex-preamble.tex"],"include-after-body":{"text":"\\printindex\n"},"toc":true,"number-sections":true,"resource-path":["../../","../../content/assets/","../../content/assets/images/"]},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["../../references.bib"],"number-depth":1,"cover-image":"../../cover.png","documentclass":"book","papersize":"letter"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}