{"title":"User Interface Elements \\index{user interface elements}","markdown":{"headingText":"User Interface Elements \\index{user interface elements}","containsRefs":false,"markdown":"\nIn this chapter we describe in detail the various buttons, menus, and\nother clickable elements of the Snap*!* user interface. Here again is\nthe map of the Snap*!* window:\n\n![image993.png](assets/image993.png) <!--  style=\"width:7.49442in;height:4.66319in\" / --> \n\n## Tool Bar Features\n\nHolding down the Shift key \\index{tool bar features} while clicking\n\\index{shift-clicking} on any of the menu buttons gives access to an\nextended menu with options, shown in red, that are experimental or for\nuse by the developers. We’re not listing those extra options here\nbecause they change frequently and you shouldn’t rely on them. But\nthey’re not secrets \\index{secrets}.\n\n### The Snap*!* Logo Menu\n\nThe Snap*!* logo \\index{Snap! logo menu} at the left end of the tool bar\nis clickable. It shows a menu of options about Snap*!* itself:\n\n![image994.png](assets/image994.png) <!--  style=\"width:2.32922in;height:1.02in\" / --> \n\nThe About option \\index{About option} displays information about Snap*!*\nitself, including version numbers for the source modules, the\nimplementors, and the license \\index{license} (AGPL \\index{AGPL} : you\ncan do anything with it except create proprietary versions, basically).\n\nThe Reference manual option \\index{Reference manual option} downloads a\ncopy of the latest revision of this manual in PDF format.\n\nThe Snap! website option \\index{Snap! website option} opens a browser\nwindow pointing to snap.berkeley.edu \\index{snap.berkeley.edu}, the web\nsite for Snap*!*.\n\nThe Download source option \\index{Download source option} opens a\nbrowser window displaying the Github repository of the source files for\nSnap*!*. \\index{source files for Snap!} At the bottom of the page are\nlinks to download the latest official release. Or you can navigate\naround the site to find the current development version. You can read\nthe code to learn how Snap*!* is implemented, host a copy on your own\ncomputer (this is one way to keep working while on an airplane), or make\na modified version with customized features. (However, access to cloud\naccounts is limited to the official version hosted at Berkeley.)\n\n### The File Menu\n\nThe ![image384.png](assets/image384.png) <!--  style=\"width:0.31944in;height:0.18056in\" / -->  file icon \\index{file\nicon menu} shows a menu mostly about saving and loading projects. You\nmay not see all these options, if you don’t have multiple sprites,\nscenes, custom blocks, and custom categories.\n\nThe Notes option \\index{Project notes option} opens a window in which\nyou can type notes about the project: How to use it, what it does, whose\nproject you modified to create it, if any, what other sources of ideas\nyou used, or any other information about the project. This text is saved\nwith the project, and is useful if you share it with other users.\n\nThe New option \\index{New option} starts a new, empty project. Any\nproject you were working on before disappears, so you are asked to\nconfirm that this is really what you want. (It disappears only from the\ncurrent working Snap*!* window; you should save the current project, if\nyou want to keep it, before using New.)\n\nNote the ^N at the end of the line. This indicates that you can type\ncontrol-N as a shortcut for this menu item. Alas, this is not the case\nin every browser. Some Mac browsers require command-N (⌘N) instead,\nwhile others open a new browser window instead of a new project. You’ll\nhave to experiment. In general, the keyboard shortcuts\n\\index{shortcuts:keyboard} in Snap*!* are the standard ones you expect\nin other software.\n\nThe Open… option \\index{Open…\noption} shows a project open dialog box in which you can choose a\nproject to open:\n\n![image995.png](assets/image995.png) <!--  style=\"width:2.88958in;height:2.09792in\" / --> \n\nIn this dialog, the three large buttons at the left select a source of\nprojects: Cloud \\index{Cloud button} means your Snap*!* account’s cloud\nstorage. Examples \\index{Examples button} means a collection of sample\nprojects we provide. Computer is for projects saved on your own\ncomputer; when you click it, this dialog is replaced with your\ncomputer’s system dialog for opening files. The text box to the right of\nthose buttons is an alphabetical listing of projects from that source;\nselecting a project by clicking shows its thumbnail (a picture of the\nstage when it was saved) and its project notes at the right.\n\nThe search bar \\index{search\nbar} at the top can be used to find a project by name or text in the\nproject notes. So in this example:\n\n![image996.png](assets/image996.png) <!--  style=\"width:2.72431in;height:1.97778in\" / --> \n\nI was looking for my ice\ncream \\index{ice cream} projects and typed “crea” in the search bar,\nthen wondered why “ferris” matched. But then when I clicked on ferris I\nsaw this:\n\n![image997.png](assets/image997.png) <!--  style=\"width:2.72361in;height:1.97778in\" / --> \n\nMy search matched the word “re*crea*te” in the project notes.\n\nThe six buttons at the bottom select an action to perform on the\nselected project. In the top row, Recover looks in your cloud account\nfor older versions of the chosen project. ***If your project is damaged,\ndon’t keep saving broken versions! Use Recover first thing.*** You will\nsee a list of saved versions; choose one to open it. Typically, you’ll\nsee the most recent version before the last save, and the newest version\nsaved before today. Then come buttons Share/Unshare and\nPublish/Unpublish. The labelling of the buttons depends on your\nproject’s publication status. If a project is neither shared nor\npublished (the ones in lightface type in the project list), it is\nprivate and nobody can see it except you, its owner. If it is shared\n(boldface in the project list), then when you open it you’ll see a URL\nlike this one:\n\nhttps://snap.berkeley.edu/snapsource/snap.html#present:Username=bh&ProjectName=count%20change\n\nbut with your username and project name. (“%20” in the project name\nrepresents a space, which can’t be part of a URL.) Anyone who knows this\nURL can see your project. Finally, if your project is published (***bold\nitalic*** in the list), then your project is shown on the Snap*!* web\nsite for all the world to see. (In all of these cases, you are the only\none who can *write* to (save) your project.) If another user saves it, a\nseparate copy will be saved in that user’s account. Projects remember\nthe history of who created the original version and any other “remix”\nversions along the way.\n\nIn the second row, the first button, Open, loads the project into\nSnap*!* and closes the dialog box. The next button (if Cloud is the\nsource) is Delete, and if clicked it deletes the selected project.\nFinally, the Cancel button closes the dialog box without opening a\nproject. (It does not undo any sharing, unsharing, or deletion you’ve\ndone.)\n\nBack to the File menu, the Save menu option \\index{Save option} saves\nthe project to the same source and same name that was used when opening\nthe project. (If you opened another user’s shared project or an example\nproject, the project will be saved to your own cloud account. You must\nbe logged in to save to the cloud.)\n\n The Save as… menu option\n\\index{Save as… option} opens a dialog box in which you can specify\nwhere to save the project:\n\n![image998.png](assets/image998.png) <!--  style=\"width:3.23611in;height:2.34931in\" / -->\n\nThis is much like the Open dialog, except for the horizontal text box at\nthe top, into which you type a name for the project. You can also\npublish, unpublish, share, unshare, and delete projects from here. There\nis no Recover button.\n\nThe Import… menu option \\index{Import… option} is for bringing some\nexternal resource into the current project, or it can load an entirely\nseparate project, from your local disk. You can import costumes (any\npicture format that your browser supports), sounds (again, any format\nsupported by your browser), and block libraries or sprites (XML format,\npreviously exported from Snap*!* itself). Imported costumes and sounds\nwill belong to the currently selected sprite; imported blocks are global\n(for all sprites). Using the Import option is equivalent to dragging the\nfile from your desktop onto the Snap*!* window.\n\nDepending on your browser, the Export project… option either directly\nsaves to your disk or \\index{Export project… option} opens a new browser\ntab containing your complete project in XML notation (a plain text\nformat). You can then use the browser’s Save feature to save the project\nas an XML file, which should be named *something*.xml so that Snap*!*\nwill recognize it as a project when you later drag it onto a Snap*!*\nwindow. This is an alternative to saving the project to your cloud\naccount: keeping it on your own computer. It is equivalent to choosing\nComputer from the Save dialog described earlier.\n\nThe Export summary… option \\index{Export project… option} creates a web\npage, in HTML, with all of the information about your project: its name,\nits project notes, a picture of what’s on its stage, definitions of\nglobal blocks, and then per-sprite information: name, wardrobe (list of\ncostumes), and local variables and block definitions. The page can be\nconverted to PDF by the browser; it’s intended to meet the documentation\nrequirements of the Advanced Placement Computer Science Principles\n\\index{Computer Science Principles} create task.\n\nThe Export blocks… option \\index{Export blocks… option} is used to\ncreate a block library \\index{block library}. It presents a list of all\nthe global (for all sprites) blocks in your project, and lets you select\nwhich to export. It then opens a browser tab with those blocks in XML\nformat, or stores directly to your local disk, as with the Export\nproject option. Block libraries can be imported with the Import option\nor by dragging the file onto the Snap*!* window. This option is shown\nonly if you have defined custom blocks.\n\nThe Unused blocks… option \\index{Unused blocks… option} presents a\nlisting of all the global custom blocks in your project that aren’t used\nanywhere, and offers to delete them. As with Export blocks, you can\nchoose a subset to delete with checkboxes. This option is shown only if\nyou have defined custom blocks.\n\nThe Hide blocks… option \\index{Hide blocks… option} shows *all* blocks,\nincluding primitives, with checkboxes. This option does not remove any\nblocks from your project, but it does hide selected block in your\npalette. The purpose of the option is to allow teachers to present\nstudents with a simplified Snap*!* with some features effectively\nremoved. The hiddenness of primitives is saved with each project, so\nstudents can load a shared project and see just the desired blocks. But\nusers can always unhide blocks by choosing this option and unclicking\nall the checkboxes. (Right-click in the background of the dialog box to\nget a menu from which you can check all boxes or uncheck all boxes.)\n\nThe New category… option \\index{New category… option} allows you to add\nyour own categories to the palette. It opens a dialog box in which you\nspecify a name *and a color* for the category. (A lighter version of the\nsame color will be used for the zebra coloring feature.)\n\nThe Remove a category… option \\index{Remove a category… option} appears\nonly if you’ve created custom categories. It opens a very small,\neasy-to-miss menu of category names just under the file icon in the menu\nbar. If you remove a category that has blocks in it, all those blocks\nare also removed.\n\nThe next group of options\nconcern the *scenes* \\index{scenes} feature, new in Snap*!* 7.0. A scene\nis a complete project, with its own stage, sprites, and code, but\nseveral can be merged into one project, using the ![image999.png](assets/image999.png) <!--  style=\"width:1.16667in;height:0.19792in\" / -->  block to bring another\nscene onscreen. The Scenes… option \\index{Scenes… option} presents a\nmenu of all the scenes in your project, where the File menu was before\nyou clicked it. The New scene option \\index{New scene option} creates a\nnew, empty scene, which you can rename as you like from its context\nmenu. Add scene… \\index{Add scene… option} is like Import… but for\nscenes. (A complete project can be imported as a scene into another\nproject, so you have to specify that you’re importing the project *as a\nscene* rather than replacing the current project.)\n\nThe Libraries… option \\index{Libraries… option} presents a menu of\nuseful, optional block libraries:\n\n![image992.png](assets/image992.png) <!--  style=\"width:1.16667in;height:0.19792in\" / --> \n\n- The library menu is divided into five broad categories. The first is,\nbroadly, utilities: blocks that might well be primitives. They might be\nuseful in all kinds of projects.\n\n- The second category is blocks related to media computation: ones that\nhelp in dealing with costumes and sounds (a/k/a Jens libraries). There\nis some overlap with “big data” libraries, for dealing with large lists\nof lists.\n\n- The third category is, roughly, specific to non-media applications\n(a/k/a Brian libraries). Three of them are imports from other\nprogramming languages: words and sentences from Logo, array functions\nfrom APL, and streams from Scheme. Most of the others are to meet the\nneeds of the BJC curriculum.\n\n- The fourth category is major packages provided by users.\n\n- The fifth category provides support for hardware devices such as robots,\nthrough general interfaces, replacing specific hardware libraries in\nversions before 7.0.\n\nWhen you click on the one-line description of a library, you are shown\nthe actual blocks in the library and a longer explanation of its\npurpose. You can browse the libraries to find one that will satisfy your\nneeds. The libraries are described in detail in Section I.H, page\n[25](#libraries).\n\n The Costumes… option\n\\index{Costumes… option} opens a browser into the costume library:\n\n![image1000.png](assets/image1000.png) <!--  style=\"width:4.28125in;height:3.23958in\" / -->\n\nYou can import a single costume by clicking it and then clicking the\nImport button. Alternatively, you can import more than one costume by\ndouble-clicking each one, and then clicking Cancel when done. Notice\nthat some costumes are tagged with “svg” in this picture; those are\nvector-format costumes that are not (yet) editable within Snap*!*.\n\nIf you have the stage selected in the sprite corral, rather than a\nsprite, the Costumes… option changes to a Backgrounds… option\n\\index{Backgrounds… option}, with different choices in the browser:\n\n![image1001.png](assets/image1001.png) <!--  style=\"width:4.28125in;height:3.23958in\" / --> \n\nThe costume and background\nlibraries include both bitmap \\index{bitmap} (go jagged if enlarged) and\nvector \\index{vector} (enlarge smoothly) images. Thanks to Scratch\n2.0/3.0 for most of these images! Some older browsers refuse to import a\nvector image, but instead convert it to bitmap.\n\nThe Sounds… option \\index{Sounds… option} opens the third kind of media\nbrowser:\n\n![image1002.png](assets/image1002.png) <!--  style=\"width:4.28125in;height:3.23958in\" / --> \n\nThe Play buttons can be used\nto preview the sounds.\n\nFinally, the Undelete sprites… option \\index{Undelete sprites… option}\nappears only if you have deleted a sprite; it allows you to recover a\nsprite that was deleted by accident (perhaps intending to delete only a\ncostume).\n\n### The Cloud Menu\n\n The cloud icon \\index{cloud\nicon}  ![image1008.png](assets/image1008.png) <!--  style=\"width:0.29167in;height:0.16667in\" / --> ![image1004.png](assets/image1004.png) <!--  style=\"width:0.29167in;height:0.16667in\" / --> shows a menu of options relating to your Snap*!* cloud account. If\nyou are not logged in, you see the outline icon  ![image1004.png](assets/image1004.png) <!--  style=\"width:0.29167in;height:0.16667in\" / --> and get this menu:\n\n![image1003.png](assets/image1003.png) <!--  style=\"width:1.43681in;height:0.75972in\" / -->\n\nChoose Login… \\index{Login… option} if you have a Snap*!* account and\nremember your password. Choose Signup… \\index{Signup… option} if you\ndon’t have an account. Choose Reset Password… \\index{Reset Password…\noption} if you’ve forgotten your password or just want to change it. You\nwill then get an email, at the address you gave when you created your\naccount, with a new temporary password. Use that password to log in,\nthen you can choose your own password, as shown below. Choose Resend\nVerification Email… if you have just created a Snap*!* account but can’t\nfind the email we sent you with the link to verify that it’s really your\nemail. (If you still can’t find it, check your spam folder. If you are\nusing a school email address, your school may block incoming email from\noutside the school.) The Open in Community Site option \\index{Open in\nCommunity Site option} appears only if you have a project open; it takes\nyou to the community site page about that project.\n\n If you are already logged in,\nyou’ll see the solid icon ![image1008.png](assets/image1008.png) <!--  style=\"width:0.29167in;height:0.16667in\" / -->  and get this menu:\n\n![image1007.png](assets/image1007.png) <!--  style=\"width:1.61111in;height:0.65278in\" / -->\n\nLogout \\index{Logout option} is obvious, but has the additional benefit\nof showing you who’s logged in. Change password… \\index{Change password…\noption} will ask for your old password (the temporary one if you’re\nresetting your password) and the new password you want, entered twice\nbecause it doesn’t echo. Open in Community Site is the same as above.\n\n###  The Settings Menu\n\nThe settings icon ![image1010.png](assets/image1010.png) <!--  style=\"width:0.29167in;height:0.16667in\" / -->\n\\index{settings icon} shows a menu of Snap*!* options, either for the\ncurrent project or for you permanently, depending on the option:\n\n![image1009.png](assets/image1009.png) <!--  style=\"width:1.24792in;height:2.58333in\" / -->  \n\nThe Language… option \\index{Language… option} lets you see the Snap*!*\nuser interface (blocks and messages) in a language other than English.\n(Note: Translations \\index{translation} have been provided by Snap*!*\nusers. If your native language is missing, send us an email!)\n\nThe Zoom blocks... option \\index{Zoom blocks... option} lets you change\nthe size of blocks, both in the palettes and in scripts. The standard\nsize is 1.0 units. The main purpose of this option is to let you take\nvery high-resolution pictures of scripts for use on posters. It can also\nbe used to improve readability when projecting onto a screen while\nlecturing, but bear in mind that it doesn’t make the palette or script\nareas any wider, so your computer’s command-option-+ feature may be more\npractical. Note that a zoom of 2 is gigantic! Don’t even try 10.\n\nThe Fade blocks… option \\index{Fade blocks… option} opens a dialog in\nwhich you can change the appearance of blocks:\n\n![image1011.png](assets/image1011.png) <!--  style=\"width:0.29167in;height:0.16667in\" / -->\n\nMostly this is a propaganda aid to use on people who think that text\nlanguages are somehow better or more grown up than block languages, but\nsome people do prefer less saturated block colors. You can use the\npulldown menu for preselected fadings, use the slider to see the result\nas you change the fading amount, or type a number into the text box once\nyou’ve determined your favorite value.\n\nThe Stage size… option \\index{Stage size… option} lets you set the size\nof the *full-size* stage in pixels. If the stage is in half-size or\ndouble-size (presentation mode), the stage size values don’t change;\nthey always reflect the full-size stage.\n\nThe Microphone resolution… option sets the buffer size used by the\nmicrophone block in Settings. “Resolution” is an accurate name if you\nare getting frequency domain samples; the more samples, the narrower the\nrange of frequencies in each sample. In the time domain, the buffer size\ndetermines the length of time over which samples are collected.\n\nThe remaining options let you turn various features on and off. There\nare three groups of checkboxes. The first is for temporary settings not\nsaved in your project nor in your user preferences.\n\nThe JavaScript extensions option \\index{JavaScript extensions option}\nenables the use of the JavaScript function block \\index{JavaScript\nfunction block} . Because malicious projects could use JavaScript to\ncollect private information about you, or to delete or modify your saved\nprojects, you must enable JavaScript *each time* you load a project that\nuses it.\n\nThe\nExtension blocks option \\index{Extension blocks option} adds two blocks\nto the palette:\n\n![image1021.png](assets/image1021.png) <!--  style=\"width:1.18958in;height:0.18958in\" alt=\"Graphical user interface, application Description automatically generated\" / --> \n![image1022.png](assets/image1022.png) <!--  style=\"width:1.22986in;height:0.25972in\" alt=\"Graphical user interface, text, application Description automatically generated\" / -->\n\nThese blocks provide assorted capabilities to official libraries that\nwere formerly implemented with the JavaScript function block. This\nallows these libraries to run without requiring the JavaScript\nextensions option. Details are subject to change.\n\nInput sliders \\index{Input\nsliders option} provides an alternate way to put values in numeric input\nslots; if you click in such a slot, a slider appears that you can\ncontrol with the mouse:\n\n![image1024.png](assets/image1024.png) <!--  style=\"width:1.63889in;height:0.41319in\" / --> \n\nThe range of the slider will be from 25 less than the input’s current\nvalue to 25 more than the current value. If you want to make a bigger\nchange than that, you can slide the slider all the way to either end,\nthen click on the input slot again, getting a new slider with a new\ncenter point. But you won’t want to use this technique to change the\ninput value from 10 to 1000, and it doesn’t work at all for non-integer\ninput ranges. This feature was implemented because software keyboard\ninput on phones and tablets didn’t work at all in the beginning, and\nstill doesn’t work perfectly on Android devices, so sliders provide a\nworkaround. It has since found another use in providing “lively”\nresponse to input changes; if Input sliders is checked, reopening the\nsettings menu will show an additional option called Execute on slider\nchange \\index{Execute on slider change option}. If this option is also\nchecked, then changing a slider in the scripting area automatically runs\nthe script in which that input appears. The project live-tree in the\nExamples collection shows how this can be used; it features a fractal\ntree custom block with several inputs, and you can see how each input\naffects the picture by moving a slider.\n\n![image1023.png](assets/image1023.png) <!--  style=\"width:1.10486in;height:2.08333in\" / --> \n\nTurbo mode \\index{Turbo mode option} makes many projects run much\nfaster, at the cost of not keeping the stage display up to date.\n(Snap*!* ordinarily spends most of its time drawing sprites and updating\nvariable watchers, rather than actually carrying out the instructions in\nyour scripts.) So turbo mode isn’t a good idea for a project with glide\nblock \\index{glide block} s or one in which the user interacts with\nanimated characters, but it’s great for drawing a complicated fractal,\nor computing the first million digits of 𝜋, so that you don’t need to\nsee anything until the final result. While in turbo mode, the button\nthat normally shows a green flag instead shows a green lightning bolt.\n(But when ⚑ clicked hat blocks still activate when the button is\nclicked.)\n\nVisible stepping \\index{visible stepping option} enables the slowed-down\nscript evaluation described in Chapter I. Checking this option is\nequivalent to clicking the footprint button above the scripting area.\nYou don’t want this on except when you’re actively debugging, because\neven the fastest setting of the slider is still slowed a lot.\n\nLog pen vectors<span id=\"logpenvectors\" class=\"anchor\"></span> tells\nSnap*!* to remember lines drawn by sprites as exact vectors, rather than\nremember only the pixels that the drawing leaves on the stage. This\nremembered vector picture can be used in two ways: First, right-clicking\non a pen trails block gives an option to relabel it into a pen vectors\nblock which, when run, reports the logged lines as a vector (svg)\ncostume. Second, right-clicking on the stage when there are logged\nvectors shows an extra option, svg…, that exports a picture of the stage\nin vector format. Only lines are logged, not color regions made with the\nfill block.\n\nThe next group of four are user preference options, preserved when you\nload a new project. Long form input dialog \\index{Long form input dialog\noption} , if checked, means that whenever a custom block input name is\ncreated or edited, you immediately see the version of the input name\ndialog that includes the type options, default value setting, etc.,\ninstead of the short form with just the name and the choice between\ninput name and title text. The default (unchecked) setting is definitely\nbest for beginners, but more experienced Snap*!* programmers may find it\nmore convenient always to see the long form.\n\nPlain prototype labels \\index{Plain prototype labels option} eliminates\nthe plus signs between words in the Block Editor prototype block. This\nmakes it harder to add an input to a custom block; you have to hover the\nmouse where the plus sign would have been, until a single plus sign\nappears temporarily for you to click on. It’s intended for people making\npictures of scripts in the block editor for use in documentation, such\nas this manual. You probably won’t need it otherwise.\n\nClicking sound \\index{Clicking sound option} causes a really annoying\nsound effect whenever one block snaps next to another in a script.\nCertain very young children, and our colleague Dan Garcia, like this,\nbut if you are such a child you should bear in mind that driving your\nparents or teachers crazy will result in you not being allowed to use\nSnap*!*. It might, however, be useful for visually impaired users.\n\nFlat design \\index{Flat design option} changes the “skin” of the Snap*!*\nwindow to a really hideous design with white and pale-grey background,\nrectangular rather than rounded buttons, and monochrome blocks (rather\nthan the shaded, somewhat 3D-looking normal blocks). The monochrome\nblocks are the reason for the “flat” in the name of this option. The\nonly thing to be said for this option is that, because of the white\nbackground, it may blend in better with the rest of a web page when a\nSnap*!* project is run in a frame in a larger page. (I confess I used it\nto make the picture of blocks faded all the way to just text two pages\nago, though.)\n\nThe final group of settings change the way Snap*!* interprets your\nprogram; they are saved with the project, so anyone who runs your\nproject will experience the same behavior. Thread safe scripts\n\\index{Thread safe scripts option} changes the way Snap*!* responds when\nan event (clicking the green flag, say) starts a script, and then, while\nthe script is still running, the same event happens again. Ordinarily,\nthe running process stops where it is, ignoring the remaining commands\nin the script, and the entire script starts again from the top. This\nbehavior is inherited from Scratch, and some converted Scratch projects\ndepend on it; that’s why it’s the default. It’s also sometimes the right\nthing, especially in projects that play music in response to mouse\nclicks or keystrokes. If a note is still playing but you ask for another\none, you want the new one to start right then, not later after the old\nprocess finishes. But if your script makes several changes to a database\nand is interrupted in the middle, the result may be that the database is\ninconsistent. When you select Thread safe scripts, the same event\nhappening again in the middle of running a script is simply ignored.\n(This is arguably still not the right thing; the event should be\nremembered and the script run again as soon as it finishes. We’ll\nprobably get around to adding that choice eventually.) Keyboard events\n(when \\_\\_ key pressed) are always thread-safe.\n\nFlat line ends \\index{flat line ends option} affects the drawing of\nthick lines (large pen width). Usually the ends are rounded, which looks\nbest when turning corners. With this option selected, the ends are flat.\nIt’s useful for drawing a brick wall or a filled rectangle.\n\nCodification support \\index{codification support option} enables a\nfeature that can translate a Snap*!* project to a text-based\n\\index{text-based language} (rather than block-based) programming\nlanguage. The feature doesn’t know about any particular other language;\ninstead, you can provide a translation for each primitive block using\nthese special blocks \\index{map to code block} :\n\n![image1025.png](assets/image1025.png) <!--  style=\"width:1.10486in;height:2.08333in\" / --> \n\nUsing these primitive blocks, you can build a block library to translate\ninto any programming language. Watch for such libraries to be added to\nour library collection (or contribute one). To see some examples, open\nthe project “Codification” in the Examples project list. Edit the blocks\nmap to Smalltalk, map to JavaScript, etc., to see examples of how to\nprovide translations for blocks.\n\n![image1028.png](assets/image1028.png) <!--  style=\"width:1.38in;height:4.79in\" alt=\"Graphical user interface, application, Teams Description automatically generated\" / --> \n![image1027.png](assets/image1027.png) <!--  style=\"width:2.20972in;height:4.96944in\" alt=\"Graphical user interface, text, application, chat or text message Description automatically generated\" / --> \n\nThe\nSingle palette option \\index{Single palette option} puts all blocks,\nregardless of category, into a single palette. It’s intended mainly for\nuse by curriculum developers building *Parsons problems* \\index{Parsons\nproblems} *:* projects in which only a small set of blocks are provided,\nand the task is to arrange those blocks to achieve a set goal. In that\napplication, this option is combined with the hiding of almost all\nprimitive blocks. (See page [119](#context-menus-for-palette-blocks).)\nWhen Single palette is turned on, two additional options (initially on)\nappear in the settings menu; the Show categories option \\index{Show\ncategories option} controls the appearance of the palette category names\nsuch as\n![image1029.png](assets/image1029.png) <!--  style=\"width:0.36in;height:0.16in\" / -->  and\n![image1030.png](assets/image1030.png) <!--  style=\"width:0.33in;height:0.18in\" alt=\"A picture containing logo Description automatically generated\" / --> ,\nwhile the Show buttons option \\index{Show buttons option} controls the\nappearance of the\n![image1031.png](assets/image1031.png) <!--  style=\"width:0.61in;height:0.16in\" / -->  and\n![image1032.png](assets/image1032.png) <!--  style=\"width:0.53in;height:0.16in\" / --> \nbuttons in the palette.\n\nThe HSL pen color model option \\index{HSL pen color model option}\nchanges the set pen, change pen, and pen blocks to provide menu options\nhue, saturation, and lightness \\index{lightness option} instead of hue,\nsaturation, and brightness (a/k/a value). Note: the name “saturation”\nmeans something different in HSL from in HSV! See Appendix A for all the\ninformation you need about colors. \\index{pen block}\n\nThe Disable click-to-run option tells Snap*!* to ignore user mouse\nclicks on blocks and scripts if it would ordinarily run the block or\nscript. (Right-clicking and dragging still work, and so does clicking in\nan input slot to edit it.) This is another Parsons problem feature; the\nidea is that there will be buttons displayed that run code only in\nteacher-approved ways. But kids can uncheck the checkbox. ☺︎\n\\index{Disable click-to-run option}\n\n### Visible Stepping Controls\n\nAfter the menu\nbuttons you’ll see the project name. After that comes the footprint\nbutton ![image121.png](assets/image121.png) <!--  style=\"width:0.37917in;height:0.21667in\" alt=\"Macintosh HD:Users:bh:Desktop:pix:footprints.png\" / -->  \\index{footprint button} used to turn on visible stepping\n\\index{visible stepping} and, when it’s on, the slider to control the\nspeed of stepping.\n\n### Stage Resizing Buttons\n\nStill in the tool bar, but\n\\index{Stage resizing buttons} above the left edge of the stage, are two\nbuttons that change the size of the stage. The first is the shrink/grow\nbutton \\index{shrink/grow button}. Normally it looks like this: ![image1033.png](assets/image1033.png) <!--  style=\"width:0.37917in;height:0.21667in\" / -->\nClicking the button displays the stage at half-normal size horizontally\nand vertically (so it takes up ¼ of its usual area). When the stage is\nhalf size the button looks like this: ![image1036.png](assets/image1036.png) <!--  style=\"width:0.37917in;height:0.21667in\" / -->  and clicking it returns the stage\nto normal size. The main reason you’d want a half size stage is during\nthe development process, when you’re assembling scripts with wide input\nexpressions and the normal scripting area isn’t wide enough to show the\ncomplete script. You’d typically then switch back to normal size to try\nout the project. The next presentation mode button \\index{presentation\nmode button} normally looks like this: ![image1035.png](assets/image1035.png) <!--  style=\"width:0.37917in;height:0.21667in\" / -->  Clicking the button makes the\nstage double size in both dimensions and eliminates most of the other\nuser interface elements (the palette, the scripting area, the sprite\ncorral, and most of the tool bar). When you open a shared project using\na link someone has sent you, the project starts in presentation mode.\nWhile in presentation mode, the button looks like this: ![image1034.png](assets/image1034.png) <!--  style=\"width:0.37917in;height:0.21667in\" / -->  Clicking it\nreturns to normal (project development) mode.\n\n### Project Control Buttons\n\nAbove \\index{project control buttons} the right edge of the stage are\nthree buttons that control the running of the project.\n\nTechnically,\nthe green flag ![image1037.png](assets/image1037.png) <!--  style=\"width:0.38in;height:0.22in\" / -->  \\index{green flag button} is no more a project control\nthan anything else that can trigger a hat block: typing on the keyboard\nor clicking on a sprite. But it’s a convention that clicking the flag\nshould start the action of the project from the beginning. It’s only a\nconvention; some projects have no flag-controlled scripts at all, but\nrespond to keyboard controls instead. Clicking the green flag also\ndeletes temporary clones.\n\nWhenever\nany script is running (not necessarily in the current sprite), the green\nflag is lit: ![image1038.png](assets/image1038.png) <!--  style=\"width:0.35in;height:0.2in\" / --> .\n\nShift-clicking\nthe button enters Turbo mode, and the button then looks like a lightning\nbolt: ![image1039.png](assets/image1039.png) <!--  style=\"width:0.35in;height:0.2in\" / -->  . Shift-clicking again turns Turbo mode off.\n\nScripts can simulate clicking\nthe green flag by broadcasting the special message\n![image1045.png](assets/image1045.png) <!--  style=\"width:0.30556in;height:0.30556in\" / --> .\n\nThe pause button ![image1044.png](assets/image1044.png) <!--  style=\"width:0.37917in;height:0.21667in\" / -->  \\index{pause\nbutton} suspends running all scripts. If clicked while scripts are\nrunning, the button changes shape to become a play button: ![image1046.png](assets/image1046.png) <!--  style=\"width:0.37917in;height:0.21667in\" / --> Clicking it\nwhile in this form resumes the suspended scripts. There is also a pause\nall block \\index{pause all block} in the Control palette that can be\ninserted in a script to suspend all scripts; this provides the essence\nof a breakpoint \\index{breakpoint} debugging \\index{debugging}\ncapability. The use of the pause button is slightly different in visible\nstepping mode, described in Chapter I.\n\nThe stop button ![image1047.png](assets/image1047.png) <!--  style=\"width:0.37917in;height:0.21667in\" / --> \\index{stop\nbutton} stops all scripts, like the stop all block \\index{stop all\nblock} . It does *not* prevent a script from starting again in response\nto a click or keystroke; the user interface is always active. There is\none exception: generic when blocks ![image1048.png](assets/image1048.png) <!--  style=\"width:0.54861in;height:0.17708in\" / -->  will not fire after a stop until some\nnon-generic event starts a script. The stop button also deletes all\ntemporary clones.\n\n##  The Palette Area\n\nAt the top of the palette area \\index{palette area} are the eight\nbuttons that select which palette (which block category) is shown:\nMotion, Looks, Sound, Pen, Control, Sensing, Operators, and Variables\n(which also includes the List and Other blocks). There are no menus\nbehind these buttons.\n\n### Buttons in the Palette\n\n Under the\neight palette selector buttons, at the top of the actual palette, are\ntwo semi-transparent buttons. The first is the *search* button ![image1049.png](assets/image1049.png) <!--  style=\"width:0.26042in;height:0.26042in\" alt=\"Macintosh HD:Users:bh:Desktop:pix:search-button.png\" / -->\n\\index{search button}, which is equivalent to typing control-F: It\nreplaces the palette with a search bar into which you can type part of\nthe title text of the block you’re trying to find. To leave this search\nmode, click one of the eight palette selectors, or type the Escape key.\n\nThe other\nbutton ![image1050.png](assets/image1050.png) <!--  style=\"width:0.26042in;height:0.26042in\" alt=\"Macintosh HD:Users:bh:Desktop:pix:make-button.png\" / --> is equivalent to the “Make a block” button \\index{Make a block\nbutton} , except that the dialog window that it opens has the current\npalette (color) preselected.\n\n### Context Menus for Palette Blocks\n\n Most elements \\index{context\nmenus for palette blocks} of the Snap*!* display can be\ncontrol-clicked/right-clicked to show a *context menu* \\index{context\nmenu} *,* with items relevant to that element. If you\ncontrol-click/right-click a *primitive* block in the palette, you see\nthis menu:\n\n![image1051.png](assets/image1051.png) <!--  style=\"width:0.86111in;height:0.45903in\" / -->\n\nThe help… option \\index{help… option} displays a box with documentation\nabout the block. Here’s an example:\n\n![image1053.png](assets/image1053.png) <!--  style=\"width:3.32222in;height:2.42778in\" / --> \n \nIf you\ncontrol-click/right-click a *custom* (user-defined) block in the\npalette, you see this menu:\n\n![image1052.png](assets/image1052.png) <!--  style=\"width:1.62292in;height:0.88889in\" / -->\n\nThe help… option for a custom block \\index{help… option for custom\nblock} displays the comment, if any, attached to the custom block’s hat\nblock in the Block Editor. Here is an example of a block with a comment\nand its help display:\n\n![image1054.png](assets/image1054.png) <!--  style=\"width:1.62292in;height:0.88889in\" / -->\n\nIf the help text includes a URL, it is clickable and will open the page\nin a new tab.\n\nThe delete block definition… option \\index{delete block definition…\noption} asks for confirmation, then deletes the custom block and removes\nit from any scripts in which it appears. (The result of this removal may\nnot leave a sensible script; it’s best to find and correct such scripts\n*before* deleting a block.) Note that there is no option to *hide* a\ncustom block; this can be done in the Block Editor by right-clicking on\nthe hat block.\n\nThe duplicate block definition… option \\index{duplicate block\ndefinition… option} makes a *copy* of the block and opens that copy in\nthe Block Editor. Since you can’t have two custom blocks with the same\ntitle text and input types, the copy is created with “(2)” (or a higher\nnumber if necessary) at the end of the block prototype.\n\nThe export block definition… option \\index{export block definition…\noption} writes a file in your browser’s downloads directory containing\nthe definition of this block and any other custom blocks that this block\ninvokes, directly or indirectly. So the resulting file can be loaded\nlater without the risk of red Undefined! blocks because of missing\ndependencies. \\index{Undefined! blocks}\n\nThe edit… option \\index{edit… option} opens a Block Editor with the\ndefinition of the custom block.\n\n### Context Menu for the Palette Background\n\nRight-click/control-click on\n\\index{context menu for the palette background} the grey *background* of\nthe palette area shows this menu:\n\n![image1058.png](assets/image1058.png) <!--  style=\"width:0.98958in;height:0.58958in\" / --> \n\n The\nfind blocks… option \\index{find blocks… option} does the same thing as\nthe magnifying-glass button. The hide blocks… option \\index{hide blocks\noption} opens a dialog box in which you can choose which blocks (custom\nas well as primitive) should be hidden. (Within that dialog box, the\ncontext menu of the background allows you to check or uncheck all the\nboxes at once.)\n\n![image1059.png](assets/image1059.png) <!--  style=\"width:1.6in;height:2.15972in\" alt=\"Graphical user interface, text, application, chat or text message Description automatically generated\" / -->\n\nThe make a category… option \\index{show primitives option}, which is\nintended mainly for authors of snap extensions, lets you add custom\n*categories* to the palette. It opens a small dialog window in which you\nspecify a name *and a color* for the new category:\n\n![image1061.png](assets/image1061.png) <!--  style=\"width:1.53in;height:1.13in\" alt=\"Graphical user interface, text Description automatically generated\" / --> \n\nPick\na dark color, because it will be lightened for zebra coloring when users\nnest blocks of the same category. Custom categories are shown below the\nbuilt-in categories in the category selector:\n\n![image1060.png](assets/image1060.png) <!--  style=\"width:1.42986in;height:2.90972in\" alt=\"Graphical user interface, application Description automatically generated\" / -->\n\nThis\nexample comes from Eckart \\index{Modrow, Eckart} Modrow’s SciSnap*!*\n\\index{SciSnap!} library. Note that the custom category list has its own\nscroll bar, which appears if you have more than six custom categories.\nNote also that the buttons to select a custom category occupy the full\nwidth of the palette area, unlike the built-in categories, which occupy\nonly half of the width. Custom categories are listed in alphabetical\norder; this is why Prof. Modrow chose to start each category name with a\nnumber, so that he could control their order.\n\nIf there are no blocks visible in a category, the category name is\ndimmed in the category selector:\n\n![image1062.png](assets/image1062.png) <!--  style=\"width:1.35in;height:1.83958in\" alt=\"Graphical user interface, text, application, chat or text message Description automatically generated\" / --> \n\nHere we see that category foo has blocks in it, but categories bar and\ngarply are empty. The built-in categories are also subject to dimming,\nif all of the blocks of a category are hidden.\n\n**Palette Resizing**\n\nAt the right end of the palette area, just to the left of the scripting\narea, is a resizing handlethat can be dragged\nrightward to increase the width of the palette area. This is useful if\nyou write custom blocks with very long names. You can’t reduce the width\nof the palette below its standard value.\n\n![image1063.png](assets/image1063.png) <!--  style=\"width:1.41667in;height:1.51389in\" / -->  \n\n## The Scripting Area\n\nThe scripting area \\index{scripting area} is the middle vertical region\nof the Snap*!* window, containing scripts and also some controls for the\nappearance and behavior of a sprite. There is always a *current sprite*\n\\index{current sprite} *,* whose scripts are shown in the scripting\narea. A dark grey rounded rectangle in the sprite corral shows which\nsprite (or the stage) is current. Note that it’s only the visible\n*display* of the scripting area that is “current” for a sprite; all\nscripts of all sprites may be running at the same time. Clicking on a\nsprite thumbnail \\index{thumbnail} in the sprite corral makes it\ncurrent. The stage itself can be selected as current, in which case the\nappearance is different, with some primitives not shown.\n\n### Sprite Appearance and Behavior Controls\n\nAt the top of the scripting area \\index{sprite appearance and behavior\ncontrols} are a picture of the sprite and some controls for it:\n\n![image1064.png](assets/image1064.png) <!--  style=\"width:3.48611in;height:1.04167in\" / --> \n\nNote that the sprite picture reflects its rotation, if any. There are\nthree things that can be controlled here:\n\n1. The three circular buttons \\index{rotation buttons} in a column at\nthe left control the sprite’s *rotation* behavior. Sprite costumes are\ndesigned to be right-side-up when the sprite is facing toward the right\n(direction = 90). If the topmost button is lit, the default as shown in\nthe picture above, then the sprite’s costume rotates as the sprite\nchanges direction. If the middle button is selected, then the costume is\nreversed left-right when the sprite’s direction is roughly leftward\n(direction between 180 and 359, or equivalently, between -180 and -1).\nIf the bottom button is selected, the costume’s orientation does not\nchange regardless of the sprite’s direction.\n\n2. The sprite’s *name* can be changed in the text box \\index{name box}\nthat, in this picture, says “Sprite.”\n\n3. Finally, if the draggable checkbox \\index{draggable checkbox} is\nchecked, then the user can move the sprite on the stage by clicking and\ndragging it. The common use of this feature is in game projects, in\nwhich some sprites are meant to be under the player’s control but others\nare not.\n\n### Scripting Area Tabs\n\nJust\nbelow the sprite controls are three *tabs* that determine what is shown\nin the scripting area:\n\n![image1065.png](assets/image1065.png) <!--  style=\"width:3.09722in;height:0.25in\" / -->\n\n### Scripts and Blocks Within Scripts\n\nMost of what’s described in this section also applies to blocks and\nscripts in a Block Editor.\n\nClicking on a script (which includes a single unattached block) runs it.\nIf the script starts with a hat block, clicking on the script\n\\index{clicking on a script} runs it even if the event in the hat block\ndoesn’t happen. (This is a useful debugging technique when you have a\ndozen sprites and they each have five scripts with green-flag hat\nblocks, and you want to know what a single one of those scripts does.)\nThe script will have a green “halo” \\index{green halo} around it while\nit’s running. If the script is shared with clones, then while it has the\ngreen halo it will also have a count of how many instances of the script\nare running. Clicking a script with such a halo \\index{halo} *stops* the\nscript. (If the script includes a warp block \\index{warp block}, which\nmight be inside a custom block used in the script, then Snap*!* may not\nrespond immediately to clicks.)\n\nIf a script is shown with a\n*red* halo \\index{red halo}, that means that an error was caught in\nthat script, such as using a list where a number was needed, or vice\nversa. Clicking the script will turn off the halo.\n\n\n\nIf any blocks have been\ndragged into the scripting area, then in its top right corner you’ll see\nan *undo* ![image1066.png](assets/image1066.png) <!--  style=\"width:0.33333in;height:0.26042in\" / -->  and/or *redo* ![image1068.png](assets/image1068.png) <!--  style=\"width:0.33333in;height:0.26042in\" / -->  button \\index{undo button} that can be used to\nundo or redo block and script drops. When you undo a drop into an input\nslot, whatever used to be in the slot is restored. The redo button\nappears once you’ve used undo.\n\nThe third button ![image1067.png](assets/image1067.png) <!--  style=\"width:0.3125in;height:0.23958in\" alt=\"Macintosh HD:Users:bh:Desktop:pix:keyboard-button.png\" / -->  starts keyboard editing \\index{keyboard editing button}\nmode (Section D, page [130](#keyboard-editing)).\n\nControl-click/right-clicking a primitive block within a script\n\\index{primitive block within a script} shows a menu like this one:\n\ncommand block: \n![image1070.png](assets/image1070.png) <!--  style=\"width:0.62639in;height:1.09028in\" / --> \n\n\nreporter block:\n![image1069.png](assets/image1069.png) <!--  style=\"width:0.62083in;height:1.0625in\" / -->\n\nThe help… option \\index{help… option} shows the help screen for the\nblock, just as in the palette. The other options appear only when a\nblock is right-clicked/control-clicked in the scripting area.\n\nNot\nevery primitive block has a relabel… option \\index{relabel… option}.\nWhen present, it allows the block to be replaced by another, similar\nblock, keeping the input expressions in place. For example, here’s what\nhappens when you choose relabel… for an arithmetic operator:\n\n![image1071.png](assets/image1071.png) <!--  style=\"width:1.53in;height:2.13in\" / -->\n\nNote that the inputs to the existing – block are displayed in the menu\nof alternatives also. Click a block in the menu to choose it, or click\noutside the menu to keep the original block. Note that the last three\nchoices are not available in the palette; you must use the relabel\nfeature to access them.\n\nNot every reporter has a compile option \\index{compile menu option}; it\nexists only for the higher order functions. When selected, a lightning\nbolt \\index{lightning bolt symbol} appears before the block name:\n![image1072.png](assets/image1072.png) <!--  style=\"width:1.40278in;height:0.20139in\" alt=\"Macintosh HD:Users:bh:Desktop:lightning.png\" / -->  and Snap*!* tries\nto compile the function inside the ring to JavaScript, so it runs at\nprimitive speed. This works only for simple functions (but the higher\norder function still works even if the compilation doesn’t). The\nfunction to be compiled must be quick, because it will be\nuninterruptable; in particular, if it’s an infinite loop, you may have\nto quit your browser to recover. Therefore, **save your project before**\nyou experiment with the compilation feature. The right-click menu for a\ncompiled higher order function will have an uncompile option. This is an\nexperimental feature.\n\nThe duplicate option \\index{duplicate option} for a command block makes\na copy of the *entire script* starting from the selected block. For a\nreporter, it copies only that reporter and its inputs. The copy is\nattached to the mouse, and you can drag it to another script (or even to\nanother Block Editor window), even though you are no longer holding down\nthe mouse button. Click the mouse to drop the script copy.\n\nThe block picture \\index{block picture option} underneath the word\nduplicate for a command block is another duplication option, but it\nduplicates only the selected block, not everything under it in the\nscript. Note that if the selected block is a C-shaped control block, the\nscript inside its C-shaped slot is included. If the block is at the end\nof its script, this option does not appear. (Use duplicate instead.)\n\nThe extract option \\index{extract option} removes the selected block\nfrom the script and leaves you holding it with the mouse. In other\nwords, it’s like the block picture option, but it doesn’t leave a copy\nof the block in the original script. If the block is at the end of its\nscript, this option does not appear. (Just grab the block with the\nmouse.) A shorthand for this operation is to *shift-click*\n\\index{shift-click on block} and drag out the block.\n\nThe delete option \\index{delete option} deletes the selected block from\nthe script.\n\nThe add comment option \\index{add comment option} creates a comment,\nlike the same option in the background of the scripting area, but\nattaches it to the block you clicked.\n\nThe script pic… \\index{script pic… option} option saves a picture of the\nentire script \\index{picture of script}, not just from the selected\nblock to the end, into your download folder; or, in some browsers, opens\na new browser tab containing the picture. In the latter case, you can\nuse the browser’s Save feature to put the picture in a file. This is a\nsuper useful feature if you happen to be writing a Snap*!* manual\n\\index{Snap! manual} ! (If you have a Retina display, consider turning\noff Retina support before making script pictures; if not, they end up\nhuge.) For reporters not inside a script, there is an additional result\npic… option \\index{result pic… option} that calls the reporter and\nincludes a speech balloon \\index{picture with speech balloon} with the\nresult in the picture. Note: The downloaded file is a “smart picture\n\\index{smart picture} ”: It also contains the code of the script, as if\nyou’d exported the project. If you later drag the file into the costumes\ntab, it will be loaded as a costume. But if you drag it into the\n*scripts* tab, it will be loaded as a script, which you can drop\nwherever you want it in the scripting area.\n\nIf the script does *not* start with a hat block, or you clicked on a\nreporter, then there’s one more option: ringify \\index{ringify option}\n(and, if there is already a grey ring around the block or script,\nunringify) \\index{unringify option}. Ringify surrounds the block\n(reporter) or the entire script (command) with a grey ring, meaning that\nthe block(s) inside the ring are themselves data, as an input to a\nhigher order procedure, rather than something to be evaluated within the\nscript. See Chapter VI, Procedures as Data.\n\nClicking a *custom* block in\na script \\index{custom block in a script} gives a similar but different\nmenu:\n\n![image1073.png](assets/image1073.png) <!--  style=\"width:0.97361in;height:1.29861in\" / --> \n\nThe relabel… option \\index{relabel… option} for custom blocks shows a\nmenu of other same-shape custom blocks with the same inputs. At present\nyou can’t relabel a custom block to a primitive block or vice versa. The\ntwo options at the bottom, for custom blocks only, are the same as in\nthe palette. The other options are the same as for primitive commands.\n\n If a reporter block is in the\nscripting area, possibly with inputs included, but not itself serving as\ninput to another block, then the menu is a little different again:\n\n![image1074.png](assets/image1074.png) <!--  style=\"width:0.88125in;height:1.08333in\" / -->\n\nWhat’s new here is the result pic… option \\index{result pic… option}.\nIt’s like script pic… but it includes in the picture a speech balloon\nwith the result of calling the block.\n\nBroadcast and broadcast and wait block \\index{broadcast and wait block}\ns in the scripting area have an additional option: receivers…\n\\index{receivers… option}. When clicked, it causes a momentary (be\nlooking for it when you click!) halo around the picture in the sprite\ncorral of those sprites that have a when I receive hat block for the\nsame message. Similarly, when I receive blocks have a senders… option\n\\index{senders… option} that light up the sprite corral icons of sprites\nthat broadcast the same message.\n\n**Scripting Area Background Context Menu**\n\nControl-click/right-click on\n\\index{scripting area background context menu} the grey striped\nbackground of the scripting area gives this menu:\n\n![image1075.png](assets/image1075.png) <!--  style=\"width:1.28958in;height:1.27778in\" / --> \n\nThe undrop option \\index{undrop option} is a sort of “undo” feature for\nthe common case of dropping a block somewhere other than where you meant\nit to go. It remembers all the dragging and dropping you’ve done in this\nsprite’s scripting area (that is, other sprites have their own separate\ndrop memory), and undoes the most recent, returning the block to its\nformer position, and restoring the previous value in the relevant input\nslot, if any. Once you’ve undropped something, the redrop option\n\\index{redrop option} appears, and allows you to repeat the operation\nyou just undid. These menu options are equivalent to the and buttons\ndescribed earlier.\n\nThe clean up option \\index{clean up option} rearranges the position of\nscripts so that they are in a single column, with the same left margin,\nand with uniform spacing between scripts. This is a good idea if you\ncan’t read your own project!\n\n The add comment option\n\\index{add comment option} puts a comment box, \\index{comment box} like\nthe picture below, in the scripting area. It’s attached to the\nmouse, as with duplicating scripts, so you position the mouse where you\nwant the comment and click to release it. You can then edit the text in\nthe comment as desired.\n\n![image1078.png](assets/image1078.png) <!--  style=\"width:1.38889in;height:0.70833in\" / -->\n\n\nYou can drag the bottom right\ncorner of the comment box to resize it. Clicking the arrowhead at the\ntop left changes the box to a single-line compact form, \n![image1079.png](assets/image1079.png) <!--  style=\"width:1.38889in;height:0.23611in\" / --> , so that you\ncan have a number of collapsed comments in the scripting area and just\nexpand one of them when you want to read it in full.\n\nIf you drag a comment over a block in a script, the comment will be\nattached to the block with a yellow line:\n\n![image1081.png](assets/image1081.png) <!--  style=\"width:3.33333in;height:0.93333in\" / -->\n\n Comments have their own\ncontext menu, with obvious meanings:\n\n![image1080.png](assets/image1080.png) <!--  style=\"width:1.48611in;height:0.84722in\" / -->\n\nBack to the options in the menu for the background of the scripting area\n(picture on the previous page):\n\nThe scripts pic… option saves, or \\index{scripts pic… option} opens a\nnew browser tab with, a picture of *all* scripts in the scripting area,\njust as they appear, but without the grey striped background. Note that\n“all scripts in the scripting area” means just the top-level scripts of\nthe current sprite, not other sprites’ scripts or custom block\ndefinitions. This is also a “smart picture”; if you drag it into the\nscripting area, it will *create a new sprite* with those scripts in its\nscripting area.\n\nFinally, the make a block… option \\index{make a block… option} does the\nsame thing as the “Make a block” button in the palettes. It’s a shortcut\n\\index{shortcut} so that you don’t have to keep scrolling down the\npalette if you make a lot of blocks.\n\n### Controls in the Costumes Tab\n\nIf you click \\index{Costumes\ntab} on the word “Costumes” under the sprite controls, you’ll see\nsomething like this:\n\n![image1082.png](assets/image1082.png) <!--  style=\"width:1.96319in;height:2.13194in\" / --> \n\nThe Turtle costume\n\\index{turtle costume} is always present in every sprite; it is costume\nnumber 0. Other costumes can be painted within Snap*!* or imported from\nfiles or other browser tabs if your browser supports that. Clicking on a\ncostume selects it; that is, the sprite will look like the selected\ncostume. Clicking on the paint brush icon ![image1084.png](assets/image1084.png) <!--  style=\"width:0.29167in;height:0.16667in\" / --> \\index{paint brush icon}   \nopens the *Paint Editor* \\index{Paint Editor} *,* in which you can\ncreate a new costume. Clicking on the camera icon ![image1083.png](assets/image1083.png) <!--  style=\"width:0.37917in;height:0.21667in\" alt=\"Macintosh HD:Users:bh:Desktop:pix:camera.png\" / -->  \\index{camera icon}\nopens a window in which you see what your computer’s camera is seeing,\nand you can take a picture (which will be the full size of the stage\nunless you shrink it in the Paint Editor). This works only if you give\nSnap*!* permission to use the camera, and maybe only if you opened\nSnap*!* in secure (HTTPS \\index{HTTPS} ) mode, and then only if your\nbrowser loves you.\n\n![image1085.png](assets/image1085.png) <!--  style=\"width:3.56944in;height:3.18056in\" alt=\"Macintosh HD:Users:bh:Desktop:pix:camera-dialog.png\" / -->  \n*Brian’s bedroom when he’s staying at Paul’s house.*\n\nControl-clicking/right-clicking on the turtle picture gives this menu:\n\n![image1086.png](assets/image1086.png) <!--  style=\"width:1.05556in;height:0.90278in\" / --> \n\nIn this menu, you choose the\nturtle’s *rotation point* \\index{turtle’s rotation point} *,* which is\nalso the point from which the turtle draws lines. The two pictures below\nshow what the stage looks like after drawing a square in each mode; tip\n\\index{tip option} (otherwise known as “Jens mode”) is on the left in\nthe pictures below, middle \\index{middle option} (“Brian mode”) on the\nright:\n\n![image1087.png](assets/image1087.png) <!--  style=\"width:1.05556in;height:0.90278in\" / --> \n\nAs you see, “tip” means the front tip of the arrowhead; “middle” is not\nthe middle of the shaded region, but actually the middle of the four\nvertices, the concave one. (If the shape were a simple isosceles\ntriangle instead of a fancier arrowhead, it would mean the midpoint of\nthe back edge.) The advantage of tip mode is that the sprite is less\nlikely to obscure the drawing. The advantage of middle mode is that the\nrotation point of a sprite is rarely at a tip, and students are perhaps\nless likely to be confused about just what will happen if you ask the\nturtle to turn 90 degrees from the position shown. (It’s also the\ntraditional rotation point of the Logo turtle, which originated this\nstyle of drawing.)\n\nCostumes other than the\nturtle have a different context menu:\n\n![image1091.png](assets/image1091.png) <!--  style=\"width:0.98333in;height:1.31944in\" / --> \n\nThe edit option \\index{edit option} opens the Paint Editor on this\ncostume. The rename option \\index{rename option} opens a dialog box in\nwhich you can rename the costume. (A costume’s initial name comes from\nthe file from which it was imported, if any, or is something like\ncostume5.) Duplicate \\index{duplicate option} makes a copy of the\ncostume, in the same sprite. (Presumably you’d do that because you\nintend to edit one of the copies.) Delete \\index{delete option} is\nobvious. The get blocks option \\index{get blocks option} appears only\nfor a smart costume, and brings its script to the scripting area. The\nexport option \\index{export option} saves the costume as a file on your\ncomputer, in your usual downloads folder.\n\nYou can drag costumes up and down in the Costumes tab in order to\nrenumber them, so that next costume will behave as you prefer.\n\nIf you drag a *smart picture* of a script into the Costumes tab, its\nicon will display the text “\\</\\>” in the corner to remind you that it\nincludes code:\n\n![image1088.png](assets/image1088.png) <!--  style=\"width:0.98333in;height:1.31944in\" / --> \n\nIts right-click menu will have an extra get blocks option \\index{get\nblocks option} that switches to the Scripts tab with the script ready to\nbe dropped there.\n\n### The Paint Editor\n\nHere is a picture of a Paint\nEditor window \\index{Paint Editor window} :\n\n![image1094.png](assets/image1094.png) <!--  style=\"width:3.93889in;height:2.57778in\" / --> \n\nIf you’ve used any painting program, most of this will be familiar to\nyou. Currently, costumes you import can be edited only if they are in a\nbitmap format (png, jpeg, gif, etc.). There is a vector editor, but it\nworks only for creating a costume, not editing an imported vector (svg)\npicture. Unlike the case of the Block Editor, only one Paint Editor\nwindow can be open at a time.\n\nThe ten square buttons in two rows of five near the top left of the\nwindow are the *tools.* The top row, from left to right, are the\npaintbrush tool \\index{paintbrush tool}, the outlined rectangle tool\n\\index{rectangle tool}, the outlined ellipse tool \\index{ellipse tool}, the eraser tool \\index{eraser tool}, and the rotation point tool\n\\index{rotation point tool}. The bottom row tools are the line drawing\ntool \\index{line drawing tool}, the solid rectangle tool \\index{solid\nrectangle tool} , the solid ellipse tool \\index{solid ellipse tool},\nthe floodfill tool, \\index{floodfill tool,} and the eyedropper tool\n\\index{eyedropper tool}. Below the tools is a row of four buttons that\nimmediately change the picture. The first two change its overall size;\nthe next two flip the picture around horizontally or vertically. Below\nthese are a color palette \\index{color palette}, a greyscale tape, and\nlarger buttons for black, white, and transparent paint. Below these is a\nsolid bar displaying the currently selected color. Below that is a\npicture of a line showing the brush width for painting and drawing, and\nbelow that, you can set the width either with a slider or by typing a\nnumber (in pixels) into the text box. Finally, the checkbox constrains\nthe line tool to draw horizontally or vertically, the rectangle tools to\ndraw squares, and the ellipse tools to draw circles. You can get the\nsame effect temporarily by holding down the shift key, which makes a\ncheck appear in the box as long as you hold it down. (But the Caps Lock\nkey doesn’t affect it.)\n\nYou can correct errors with the undo button \\index{undo button}, which\nremoves the last thing you drew, or the clear button \\index{clear\nbutton} , which erases the entire picture. (Note, it does *not* revert\nto what the costume looked like before you started editing it! If that’s\nwhat you want, click the Cancel button \\index{Cancel button} at the\nbottom of the editor.) When you’re finished editing, to keep your\nchanges, click OK.\n\nNote that the ellipse tool \\index{ellipse tool} s work more intuitively\nthan ones in other software you may have used. Instead of dragging\nbetween opposite corners of the rectangle circumscribing the ellipse you\nwant, so that the endpoints of your dragging have no obvious connection\nto the actual shape, in Snap*!* you start at the center of the ellipse\nyou want and drag out to the edge. When you let go of the button, the\nmouse cursor will be on the curve. If you drag out from the center at 45\ndegrees to the axes, the resulting curve will be a circle; if you drag\nmore horizontally or vertically, the ellipse will be more eccentric. (Of\ncourse if you want an exact circle you can hold down the shift key or\ncheck the checkbox.) The rectangle tools, though, work the way you\nexpect: You start at one corner of the desired rectangle and drag to the\nopposite corner.\n\nUsing the eyedropper tool \\index{eyedropper tool}, you can click\nanywhere in the Snap*!* window, even outside the Paint Editor, and the\ntool will select the color at the mouse cursor for use in the Paint\nEditor. You can only do this once, because the Paint Editor\nautomatically selects the paintbrush when you choose a color. (Of course\nyou can click on the eyedropper tool button again.)\n\nThe only other non-obvious tool is the rotation point tool\n\\index{rotation point tool}. It shows in the Paint Editor where the\nsprite’s current rotation center is (the point around which it turns\nwhen you use a turn block); if you click or drag in the picture, the\nrotation point will move where you click. (You’d want to do this, for\nexample, if you want a character to be able to wave its arm, so you use\ntwo sprites connected together. You want the rotation point of the arm\nsprite to be at the end where it joins the body, so it remains attached\nto the shoulder while waving.)\n\nThe vector editor\n\\index{vector editor} ’s controls are much like those in the bitmap\neditor. One point of difference is that the bitmap editor has two\nbuttons for solid ![image1098.png](assets/image1098.png) <!--  style=\"width:0.21528in;height:0.21528in\" / -->  and outline ![image1097.png](assets/image1097.png) <!--  style=\"width:0.21528in;height:0.21528in\" / -->  rectangles, and similarly for ellipses,\nbut in the vector editor there is always an edge color \\index{edge\ncolor} and a fill color \\index{fill color}, even if the latter is\n“transparent paint \\index{transparent paint},” and so only one button\nper shape is needed. Since each shape that you draw is a separate layer\n(like sprites on the stage), there are controls to move the selected\nshape up (frontward) or down (rearward) relative to other shapes. There\nis a selection tool ![image1096.png](assets/image1096.png) <!--  style=\"width:0.21528in;height:0.21528in\" / -->  to drag out a rectangular area and select all the\nshapes within that area.\n\n![image1095.png](assets/image1095.png) <!--  style=\"width:3.83611in;height:2.54861in\" / --> \n\n\n### Controls in the Sounds Tab\n\nThere is no\nSound Editor \\index{controls in the Sounds tab} in Snap*!*, and also no\ncurrent sound the way there’s a current costume for each sprite. (The\nsprite always has an appearance unless hidden, but it doesn’t sing\nunless explicitly asked.) So the context menu for sounds has only\nrename, delete, and export options, and it has a clickable button\nlabeled Play or Stop as appropriate. There is a sound *recorder,* which\nappears if you click the red record button (![image1099.png](assets/image1099.png) <!--  style=\"width:0.35in;height:0.2in\" alt=\"Macintosh HD:Users:bh:Desktop:record-button.png\" / --> ):\n\n![image1100.png](assets/image1100.png) <!--  style=\"width:2.325in;height:1.03333in\" alt=\"Macintosh HD:Users:bh:Desktop:sound-recorder.png\" / --> \n\nThe first,\nround button starts recording. The second, square button stops\nrecording. The third, triangular button plays back a recorded sound. If\nyou don’t like the result, click the round button again to re-record.\nWhen you’re satisfied, push the Save button. If you need a sound editor,\nconsider the free (both senses)\n[https://audacity.sourceforge.net](http://audacity.sourceforge.net).\n\n## Keyboard Editing\n\nAn ongoing area of research is how to make visual programming languages\nusable by people with visual or motoric disabilities. As a first step in\nthis direction, we provide a keyboard editor, so that you can create and\nedit scripts without tracking the mouse. So far, not every user\ninterface element is controllable by keyboard, and we haven’t even begun\nproviding *output* support, such as interfacing with a speech\nsynthesizer. This is an area in which we know we have a long way to go!\nBut it’s a start. The keyboard editor may also be useful to anyone who\ncan type faster than they can drag blocks.\n\n### Starting and stopping the keyboard editor\n\nThere are three ways to start the keyboard editor \\index{keyboard\neditor} . Shift-clicking \\index{Shift-click (keyboard editor)} anywhere\nin the scripting area will start the editor at that point: either\nediting an existing script or, if you shift-click on the background of\nthe scripting area, editing a new script at the mouse position.\nAlternatively, typing shift-enter \\index{shift-enter (keyboard editor)}\nwill start the editor on an existing script, and you can use the tab key\nto switch to another script. Or you can click the keyboard button at the\ntop of the scripting area.\n\nWhen the script editor is running, its position is represented by a\nblinking white bar:\n\n![image1101.png](assets/image1101.png) <!--  style=\"width:2.20833in;height:1.59375in\" / --> \n\nTo leave the keyboard editor,\ntype the escape key \\index{escape key (keyboard editor)}, or just click\non the background of the scripting area.\n\n### Navigating in the keyboard editor\n\nTo move to a different script, type the tab key \\index{tab key (keyboard\neditor)} . Shift-tab \\index{Shift-tab (keyboard editor)} to move through\nthe scripts in reverse order.\n\nA script is a vertical stack of command blocks. A command block may have\ninput slots, and each input slot may have a reporter block in it; the\nreporter may itself have input slots that may have other reporters. You\ncan navigate through a script quickly by using the up arrow \\index{up\narrow (keyboard editor)} and down arrow \\index{down arrow (keyboard\neditor)} keys to move between command blocks. Once you find the command\nblock that you want to edit, the left \\index{left arrow (keyboard\neditor)} and right arrow \\index{right arrow (keyboard editor)} keys move\nbetween editable items within that command. (Left and right arrow when\nthere are no more editable items within the current command block will\nmove up or down to another command block, respectively.) Here is a\nsequence of pictures showing the results of repeated right arrow keys\nstarting from the position shown above:\n\n![image1101.png](assets/image1101.png) <!--  style=\"width:2.20833in;height:1.59375in\" / --> \n\nYou can rearrange scripts within the scripting area from the keyboard.\nTyping shift-arrow keys \\index{shift-arrow keys (keyboard editor)}\n(left, right, up, or down) will move the current script. If you move it\nonto another script, the two won’t snap together; the one you’re moving\nwill overlap the one already there. This means that you can move across\nanother script to get to a free space.\n\n### Editing a script\n\nNote that the keyboard editor *focus,* the point shown as a white bar or\nhalo, is either *between* two command blocks or *on* an input slot. The\nediting keys do somewhat different things in each of those two cases.\n\nThe backspace key \\index{backspace key (keyboard editor)} deletes a\nblock. If the focus \\index{focus (keyboard editor)} is between two\ncommands, the one *before* (above) the blinking bar is deleted. If the\nfocus is on an input slot, the reporter in that slot is deleted. (If\nthat input slot has a default value, it will appear in the slot.) If the\nfocus is on a *variadic* input (one that can change the number of inputs\nby clicking on arrowheads), then *one* input slot is deleted. (When you\nright-arrow into a variadic input, the focus first covers the entire\nthing, including the arrowheads; another right-arrow focuses on the\nfirst slot within that input group. The focus is “on the variadic input”\nwhen it covers the entire thing.)\n\nThe enter key does nothing if the focus is between commands, or on a\nreporter. If the focus is on a variadic input, the enter key\n\\index{enter key (keyboard editor)} adds one more input slot. If the\nfocus is on a white input slot (one that doesn’t have a reporter in it),\nthen the enter key selects that input slot for *editing;* that is, you\ncan type into it, just as if you’d clicked on the input slot. (Of\ncourse, if the focus is on an input slot containing a reporter, you can\nuse the backspace key to delete that reporter, and then use the enter\nkey to type a value into it.) When you finish typing the value, type the\nenter key again to accept it and return to navigation, or the escape key\nif you decide not to change the value already in the slot.\n\nThe space key is used to see a menu of possibilities for the input slot\nin focus. It does nothing unless the focus is on a single input slot. If\nthe focus is on a slot with a pulldown menu of options, then the space\nkey \\index{space key (keyboard editor)} shows that menu. (If it’s a\nblock-colored slot, meaning that only the choices in the menu can be\nused, the enter key will do the same thing. But if it’s a white slot\nwith a menu, such as in the turn blocks, then enter lets you type a\nvalue, while space shows the menu.) Otherwise, the space key shows a\nmenu of variables available at this point in the script. In either case,\nuse the up and down arrow keys to navigate the menu, use the enter key\nto accept the highlighted entry, or use the escape key to leave the menu\nwithout choosing an option.\n\nTyping any other character\nkey (not special keys on fancy keyboards that do something other than\ngenerating a character) activates the *block search palette.* This\npalette, which is also accessible by typing control-F or command-F\noutside the keyboard editor, or by clicking the search button floating\nat the top of the palette, has a text entry field at the top, followed\nby blocks whose title text includes what you type. The character key you\ntyped to start the block search palette is entered into the text field,\nso you start with a palette of blocks containing that character. Within\nthe palette, blocks whose titles *start* with the text you type come\nfirst, then blocks in which *a word* of the title starts with the text\nyou type, and finally blocks in which the text appears inside a word of\nthe title. Once you have typed enough text to see the block you want,\nuse the arrow keys to navigate to that block in the palette, then enter\nto insert that block, or escape to leave the block search palette\nwithout inserting the block. (When not in the keyboard editor, instead\nof navigating with the arrow keys, you drag the block you want into the\nscript, as you would from any other palette.)\n\n![image1110.png](assets/image1110.png) <!--  style=\"width:1.53472in;height:1.69444in\" / --> \n\n If you type an arithmetic\noperator (+-\\*/) or comparison operator (\\<=\\>) into the block search\ntext box, you can type an arbitrarily complicated expression, and a\ncollection of arithmetic operator blocks will be constructed to match:\n\n![image1111.png](assets/image1111.png) <!--  style=\"width:2.83333in;height:0.84097in\" / -->\n\nAs the example shows, you can also use parentheses for grouping, and\nnon-numeric operands are treated as variables or primitive functions. (A\nvariable name entered in this way may or may not already exist in the\nscript. Only round and the ones in the pulldown menu of the sqrt block\ncan be used as function names.)\n\n### Running the selected script\n\nType control-shift-enter \\index{control-shift-enter (keyboard editor)}\nto run the script with the editor focus, like clicking the script.\n\n## Controls on the Stage \\index{controls on the stage} \n\nThe stage is the area in the top right of the Snap*!* window in which\nsprites move.\n\n### Sprites\n\nMost sprites can be moved by\nclicking and dragging them. (If you have unchecked the draggable\ncheckbox \\index{draggable checkbox} for a sprite, then dragging it has\nno effect.) Control-clicking/right-clicking a sprite shows this context\nmenu:\n\n![image1112.png](assets/image1112.png) <!--  style=\"width:0.60139in;height:1.08333in\" / --> \n\nThe duplicate option \\index{duplicate option} makes another sprite with\ncopies of the same scripts, same costumes, etc., as this sprite. The new\nsprite starts at a randomly chosen position different from the original,\nso you can see quickly which is which. The new sprite is *selected:* It\nbecomes the current sprite, the one shown in the scripting area. The\nclone option makes a permanent clone of this sprite, with some shared\nattributes, and selects it.\n\nThe delete option \\index{delete option} deletes the sprite. It’s not\njust hidden; it’s gone for good. (But you can undelete it by clicking\nthe wastebasket just below the right edge of the stage.) The edit option\n\\index{edit option} selects the sprite. It doesn’t actually change\nanything about the sprite, despite the name; it’s just that making\nchanges in the scripting area will change this sprite.\n\nThe move\noption \\index{move option} shows a “move handle” inside the sprite (the\ndiagonal striped square in the middle):\n\n![image1113.png](assets/image1113.png) <!--  style=\"width:0.65278in;height:0.88889in\" alt=\"Macintosh HD:Users:bh:Desktop:pix:move-handle.png\" / --> \n\nYou can ordinarily just grab and move the sprite without this option,\nbut there are two reasons you might need it: First, it works even if the\n“draggable” checkbox above the scripting area is unchecked. Second, it\nworks for part sprites relative to their anchor; ordinarily, dragging a\npart moves the entire nested sprite.\n\nThe rotate option displays a rotation menu:\n\n![image1114.png](assets/image1114.png) <!--  style=\"width:0.93333in;height:1.58333in\" / --> \n\nYou can choose one of the\nfour compass directions in the lower part (the same as in the point in\ndirection block) or use the mouse to rotate the handle on the dial in\n15° increments.\n\nThe pivot\noption \\index{pivot option} shows a crosshair inside the sprite:\n\n![image1115.png](assets/image1115.png) <!--  style=\"width:0.65278in;height:0.84722in\" alt=\"Macintosh HD:Users:bh:Desktop:pix:pivot-handle.png\" / --> \n\nYou can click and drag the crosshair anywhere onstage to set the\ncostume’s pivot point. (If you move it outside the sprite, then turning\nthe sprite will revolve as well as rotate it around the pivot.) When\ndone, click on the stage not on the crosshair. Note that, unlike moving\nthe pivot point in the Paint Editor, this technique does not visibly\nmove the sprite on the stage. Instead, the values of x position and y\nposition will change.\n\nThe edit option \\index{edit option} makes this the selected sprite,\nhighlighting it in the sprite corral and showing its scripting area. If\nthe sprite was a temporary clone \\index{temporary clone}, it becomes\npermanent.\n\nThe export… option \\index{export option} saves, or opens a new browser\ntab containing, the XML text representation of the sprite. (Not just its\ncostume, but all of its costumes, scripts, local variables and blocks,\nand other properties.) You can save this tab into a file on your\ncomputer, and later import the sprite into another project. (In some\nbrowsers, the sprite is directly saved into a file.)\n\n### Variable watchers\n\nRight-clicking on a variable watcher shows this menu:\n\n![image1116.png](assets/image1116.png) <!--  style=\"width:0.95833in;height:1.44792in\" alt=\"Macintosh HD:Users:bh:Desktop:watcher-menu.png\" / --> \n\nThe first section of the menu lets you choose one of three\nvisualizations of the watcher:\n\n![image1117.png](assets/image1117.png) <!--  style=\"width:0.95833in;height:1.44792in\" alt=\"Macintosh HD:Users:bh:Desktop:watcher-menu.png\" / --> \n\nThe first (normal) \\index{normal option} visualization is for debugging.\nThe second (large) \\index{large option} is for displaying information to\nthe user of a project, often the score in a game. And the third (slider)\n\\index{slider option} is for allowing the user to control the program\nbehavior interactively. When the watcher is displayed as a slider, the\nmiddle section of the menu allows you to control the range of values\npossible in the slider. It will take the minimum value \\index{slider\nmin… option} when the slider is all the way to the left, the maximum\nvalue \\index{slider max… option} when all the way to the right.\n\nThe third section of the menu allows data to be passed between your\ncomputer and the variable. The import… option \\index{import… option}\nwill read a computer text file. Its name must end with .txt, in which\ncase the text is read into the variable as is, or .csv \\index{.csv file}\nor .json \\index{.json file}, in which case the text is converted into a\nlist structure, which will always be a two-dimensional array for csv\n(comma-separated values) data, but can be any shape for json data. The\nraw data… option \\index{raw data… option} prevents that conversion to\nlist form. The export… option \\index{export… option} does the opposite\nconversion, passing a text-valued variable value into a .txt file\n\\index{.txt file} unchanged, but converting a list value into csv format\nif the list is one- or two-dimensional, or into json format if the list\nis more complicated. (The scalar values within the list must be numbers\nand/or text; lists of blocks, sprites, costumes, etc. cannot be\nexported.)\n\nAn alternative to using the import… option is simply to drag the file\nonto the Snap*!* window, in which case a variable will be created if\nnecessary with the same name as the file (but without the extension).\n\nIf the value of the variable is a list, then the menu will include an\nadditional blockify option \\index{blockify option}; clicking it will\ngenerate an expression with nested list blocks that, if evaluated, will\nreconstruct the list. It’s useful if you imported a list and then want\nto write code that will construct the same list later.\n\n###  The stage itself\n\nControl-clicking/right-clicking on the stage background (that is,\nanywhere on the stage except on a sprite or watcher) shows the stage’s\nown context menu:\n\n![image1123.png](assets/image1123.png) <!--  style=\"width:0.82153in;height:0.84722in\" / --> \n\nThe stage’s edit option\n\\index{edit option} selects the stage, so the stage’s scripts and\nbackgrounds are seen in the scripting area. Note that when the stage is\nselected, some blocks, especially the Motion ones, are not in the\npalette area because the stage can’t move.\n\nThe show all option \\index{show all option} makes all sprites visible,\nboth in the sense of the show block and by bringing the sprite onstage\nif it has moved past the edge of the stage.\n\nThe pic… option saves, or \\index{pic… option} opens a browser tab with,\na picture of everything on the stage: its background, lines drawn with\nthe pen, and any visible sprites. What you see is what you get. (If you\nwant a picture of just the background, select the stage, open its\ncostumes tab, control-click/right-click on a background, and export it.)\n\nThe pen trails option \\index{pen trails option} creates a new costume\nfor the currently selected sprite consisting of all lines drawn on the\nstage by the pen of any sprite. The costume’s rotation center will be\nthe current position of the sprite.\n\nIf you previously turned on the log pen vectors option, and there are\nlogged vectors, the menu includes an extra option, svg… \\index{svg…\noption} , that exports a picture of the stage in vector format. Only\nlines are logged, not color regions made with the fill block.\n\n## The Sprite Corral \\index{sprite corral}  and Sprite Creation Buttons \\index{sprite creation buttons} \n\nBetween the stage and the\nsprite corral at the bottom right of the Snap*!* window is a dark grey\nbar containing three buttons at the left and one at the right. The first\nthree are used to create a new sprite. The first button  ![image1124.png](assets/image1124.png) <!--  style=\"width:0.29167in;height:0.16667in\" / -->  makes a sprite\nwith just the turtle costume, with a randomly chosen position and pen\ncolor. (If you hold down the Shift key while clicking, the new sprite’s\ndirection will also be random.) The second button ![image1125.png](assets/image1125.png) <!--  style=\"width:0.29167in;height:0.16667in\" / --> makes a sprite and\nopens the Paint Editor so that you can make your own costume for it. (Of\ncourse you could click the first button and then click the paint button\nin its costumes tab; this paint button is a shortcut \\index{shortcut}\nfor all that.) Similarly, the third button ![image1083.png](assets/image1083.png) <!--  style=\"width:0.37917in;height:0.20556in\" alt=\"Macintosh HD:Users:bh:Desktop:pix:camera.png\" / --> uses your camera, if\npossible, to make a costume for the new sprite.\n\nThe trash can button ![image1126.png](assets/image1126.png) <!--  style=\"width:0.29167in;height:0.17361in\" / -->  at the right has two uses.\nYou can drag a sprite thumbnail onto it from the sprite corral to delete\nthat sprite, or you can click it to undelete a sprite you deleted by\naccident.\n\nIn the sprite corral, you click on a sprite’s “thumbnail” picture to\nselect that sprite (to make it the one whose scripts, costumes, etc. are\nshown in the scripting area). You can drag sprite thumbnails (but not\nthe stage one) to reorder them; this has no special effect on your\nproject, but lets you put related ones next to each other, for example.\nDouble-clicking a thumbnail flashes a halo around the actual sprite on\nthe stage.\n\nYou can right-click/control-click a sprite’s thumbnail to get this\ncontext menu:\n\n![image1127.png](assets/image1127.png) <!--  style=\"width:0.67708in;height:1.10903in\" / --> \n\nThe show option \\index{show\noption} makes the sprite visible, if it was hidden, and also brings it\nonto the stage, if it had moved past the stage boundary. The next three\noptions are the same as in the context menu of the actual sprite on the\nstage, discussed above.\n\nThe parent… option \\index{parent… option} displays a menu of all other\nsprites, showing which if any is this sprite’s parent, and allowing you\nto choose another sprite (replacing any existing parent). The release\noption \\index{release option} is shown only if this sprite is a\n(permanent \\index{permanent clone}, or it wouldn’t be in the sprite\ncorral) clone; it changes the sprite to a temporary clone. (The name is\nsupposed to mean that the sprite is released from the corral.) The\nexport… option \\index{export… option} exports the sprite, like the same\noption on the stage.\n\nThe context menu for the stage thumbnail has only one option, pic…\n\\index{pic… option}, which takes a picture of everything on the stage,\njust like the same option in the context menu of the stage background.\nIf pen trails are being logged, there will also be an svg… option.\n\nIf your project includes scenes \\index{scenes}, then under the stage\nicon in the sprite corral will be the *scene corral:*\n\n![image1128.png](assets/image1128.png) <!--  style=\"width:3.33333in;height:1.70833in\" alt=\"Macintosh HD:Users:bh:Desktop:scene-corral.png\" / --> \n\nClicking on a\nscene will select it; right-clicking will present a menu in which you\ncan rename, delete, or export the scene.\n\n## Preloading a Project \\index{preloading a project}  when Starting Snap*!*\n\nThere are several ways to include a pointer to a project in the URL when\nstarting Snap*!* \\index{starting Snap!} in order to load a project\nautomatically. You can think of such a URL as just running the project\nrather than as running Snap*!*, especially if the URL says to start in\npresentation mode and click the green flag. The general form is\n\nhttps://snap.berkeley.edu/run#***verb***:***project***&***flag***&***flag***…\n\nThe “verb” above can be any of open \\index{open (startup option)}, run\n\\index{run (startup option)}, cloud \\index{cloud (startup option)},\npresent \\index{present (startup option)}, or dl \\index{dl (startup\noption)} . The last three are for shared projects in the Snap*!* cloud;\nthe first two are for projects that have been exported and made\navailable anywhere on the Internet.\n\nHere’s an example that loads a project stored at the Snap*!* web site\n(not the Snap*!* cloud!):\n\nhttps://snap.berkeley.edu/run#open:https://snap.berkeley.edu/snapsource/Examples/vee.xml\n\nThe project file will be opened, and Snap*!* will start in edit mode\n(with the program visible). Using \\#run: instead of \\#open: will start\nin presentation mode (with only the stage visible) and will “start” the\nproject by clicking the green flag. (“Start” is in quotation marks\nbecause there is no guarantee that the project includes any scripts\ntriggered by the green flag. Some projects are started by typing on the\nkeyboard or by clicking a sprite.)\n\nIf the verb is run, then you can also use any subset of the following\nflags:\n\n- &editMode \\index{editMode (startup option)} : Start in edit mode, not\npresentation mode.\n\n- &noRun \\index{noRun (startup option)} : Don’t click the green flag.\n\n- &hideControls \\index{hideControls (startup option)} : Don’t show the row\nof buttons above the stage (edit mode, green flag, pause, stop).\n\n- &lang= \\index{lang= (startup option)} : fr Set language to (in this\nexample) French.\n\n- &noCloud : Don’t allow cloud operations from this project (for running\nprojects from unknown sources that include JavaScript code)\n\n- &noExitWarning \\index{noExitWarning (startup option)} : When closing the\nwindow or loading a different URL, don’t show the browser “are you sure you want to leave this page” message.\n\n- &blocksZoom=n : Like the Zoom blocks option in the Settings menu.\n\nThe last of these flags is intended for use on a web page in which a\nSnap*!* window is embedded.\n\nHere’s an example that loads a shared (public) project from the Snap*!*\ncloud:\n\nhttps://snap.berkeley.edu/run#present:Username=jens&ProjectName=tree%20animation\n\n(Note that “Username” and “ProjectName” are TitleCased, even though the\nflags such as “noRun” are camelCased. Note also that a space in the\nproject name must be represented in Unicode as %20.) The verb present\nbehaves like run: it ordinarily starts the project in presentation mode,\nbut its behavior can be modified with the same four flags as for run.\nThe verb cloud (yes, we know it’s not a verb in its ordinary use)\nbehaves like open except that it loads from the Snap*!* cloud rather\nthan from the Internet in general. The verb dl (short for “download”)\ndoes not start Snap*!* but just downloads a cloud-saved project to your\ncomputer as an .xml file. This is useful for debugging; sometimes a\ndefective project that Snap*!* won’t run can be downloaded, edited, and\nthen re-saved to the cloud.\n\n## Mirror Sites\n\nIf the site snap.berkeley.edu is ever unavailable, you can load Snap*!*\nat the following mirror sites \\index{mirror sites} :\n\n- https://bjc.edc.org \\index{bjc.edc.org} /snapsource/snap.html\n\n- https://cs10.org \\index{cs10.org} /snap\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../../scripts/collect-index.lua"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","bibliography":["../../references.bib"],"number-depth":1,"theme":["none","../../styles/snap-manual.scss"],"strip-comment":true,"navbar":{"logo":"../../images/snap-logo.png"}},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":true,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"snap-manual","include-in-header":["../../styles/latex-preamble.tex"],"include-after-body":{"text":"\\printindex\n"},"toc":true,"number-sections":true,"resource-path":["../../","../../content/assets/","../../content/assets/images/"]},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["../../references.bib"],"number-depth":1,"cover-image":"../../cover.png","documentclass":"book","papersize":"letter"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}