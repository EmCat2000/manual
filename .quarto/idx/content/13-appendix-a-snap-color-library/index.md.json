{"title":"Appendix A. Snap*!* color library","markdown":{"headingText":"Appendix A. Snap*!* color library","containsRefs":false,"markdown":"\nThe Colors and Crayons library \\index{Colors and Crayons library}\nprovides several tools for manipulating color. Although its main purpose\nis controlling a sprite’s pen color, it also establishes colors as a\nfirst class data type:\n\n![image401.png](assets/image401.png) <!--  style=\"width:3.13333in;height:0.51667in\" alt=\"Macintosh HD:Users:bh:Desktop:crayon-Pen.png\" / --> \n\n\n\nFor people who just\nwant colors in their projects without having to be color experts, we\nprovide two simple mechanisms: a *color number* \\index{color numbers}\nscale with a broad range of continuous color variation and a set of 100\n*crayons* organized by color family (ten reds, ten oranges, etc.) The\ncrayons \\index{crayons} include the block colors:\n\n![image1135.png](assets/image1135.png) <!--  style=\"width:3.13333in;height:0.51667in\" alt=\"Macintosh HD:Users:bh:Desktop:crayon-Pen.png\" / --> \n\n\nFor experts, we\nprovide color selection by RGB, HSL, HSV, X11/W3C names, and variants on\nthose scales.\n\n![image1136.png](assets/image1136.png) <!--  style=\"width:7.16667in;height:1.1in\" alt=\"Macintosh HD:Users:bh:Desktop:hsl-from-x11.png\" / --> \n\n### Introduction to Color\n\nYour computer\nmonitor can display millions of colors, but you probably can’t\ndistinguish that many. For example, here’s red 57, green 180, blue 200: ![image1137.png](assets/image1137.png) <!--  style=\"width:0.23611in;height:0.23611in\" alt=\"Macintosh HD:Users:bh:Desktop:Google Chrome002.png\" / -->\nAnd here’s red 57, green *182,* blue 200:  ![image1138.png](assets/image1138.png) <!--  style=\"width:0.23611in;height:0.23611in\" alt=\"Macintosh HD:Users:bh:Desktop:Google Chrome001.png\" / --> You might be able to tell them\napart if you see them side by side: ![image1137.png](assets/image1137.png) <!--  style=\"width:0.23611in;height:0.23611in\" alt=\"Macintosh HD:Users:bh:Desktop:Google Chrome002.png\" / --> ![image1138.png](assets/image1138.png) <!--  style=\"width:0.23611in;height:0.23611in\" alt=\"Macintosh HD:Users:bh:Desktop:Google Chrome001.png\" / --> but maybe not even then.\n\nColor space \\index{color space} —the collection of all possible\ncolors—is three-dimensional, but there are many ways to choose the\ndimensions. RGB \\index{RGB} (red-green-blue), the one most commonly used\nin computers, matches the way TVs and displays produce color. Behind\nevery dot on the screen are three tiny lights: a red one, a green one,\nand a blue one. But if you want to print colors on paper, your printer\nprobably uses a different set of three colors: CMY \\index{CMY}\n(cyan-magenta-yellow). You may have seen the abbreviation CMYK\n\\index{CMYK}, which represents the common technique of adding black ink\nto the collection. (Mixing cyan, magenta, and yellow in equal amounts is\nsupposed to result in black ink, but typically it comes out a muddy\nbrown instead, because chemistry.) Other systems that try to mimic human\nperception are HSL \\index{HSL} (hue-saturation-lightness) and HSV\n\\index{HSV} (hue-saturation-value). There are many, many more, each\ndesigned for a particular purpose.\n\nIf you are a color professional—a printer, a web designer, a graphic\ndesigner, an artist—then you need to understand all this. It can also be\ninteresting to learn about. For example, there are colors that you can\nsee but your computer display can’t generate. If that intrigues you,\nlook up [color theory](https://en.wikipedia.org/wiki/Color_theory)\n\\index{color theory} in Wikipedia.\n\n### Crayons and Color Numbers\n\nBut if you just want some colors in your project, we provide a simple,\none-dimensional subset of the available colors. Two subsets, actually:\n*crayons* and *color numbers.* Here’s the difference:\n\n![image1139.png](assets/image1139.png) <!--  style=\"width:0.23611in;height:0.23611in\" alt=\"Macintosh HD:Users:bh:Desktop:Google Chrome002.png\" / -->\n\n The first row\nshows 100 distinct colors. They have names; this is pumpkin  ![image1145.png](assets/image1145.png) <!--  style=\"width:0.23611in;height:0.23611in\" alt=\"Macintosh HD:Users:bh:Desktop:Google Chrome003.png\" / -->\n\\index{pumpkin}, and this is denim ![image1146.png](assets/image1146.png) <!--  style=\"width:0.23611in;height:0.23611in\" alt=\"Macintosh HD:Users:bh:Desktop:Google Chrome004.png\" / --> \\index{denim}. You’re supposed to\nthink of them as a big box of 100 crayons \\index{crayons}. They’re\narranged in families: grays, pinks, reds, browns, oranges, etc. But\nthey’re not consistently ordered within a family; you’d be unlikely to\nsay “next crayon” in a project. (But look at the crayon spiral on page\n[145](#spirals).) Instead, you’d think “I want this to look like a\nreally old-fashioned photo” and so you’d find sepia ![image1144.png](assets/image1144.png) <!--  style=\"width:0.23611in;height:0.23611in\" alt=\"Macintosh HD:Users:bh:Desktop:Google Chrome005.png\" / --> \\index{sepia} as\ncrayon number 33. You don’t have to memorize the numbers! You can find\nthem in a menu with a submenu for each family. \\index{set pen block}\n\n![image1140.png](assets/image1140.png) <!--  style=\"width:5.79306in;height:0.3in\" / -->\n\nOr, if you\nknow the crayon name, just ![image1147.png](assets/image1147.png) <!--  style=\"width:2.15972in;height:0.25694in\" alt=\"Macintosh HD:Users:bh:Desktop:set-crayon-name.png\" / -->.\n\n The\ncrayon numbers are chosen so that skipping by 10 gives a sensible box of\nten crayons \\index{box of ten crayons} :\n\n![image1154.png](assets/image1154.png) <!--  style=\"width:5.79306in;height:0.3in\" / -->\n\nAlternatively, skipping by 5 gives a still-sensible set of twenty\ncrayons \\index{box of twenty crayons} :\n\n![image1155.png](assets/image1155.png) <!--  style=\"width:5.8in;height:0.3in\" / --> \n\nThe set of *color numbers* is arranged so that each color number is\nvisually near each of its neighbors. Bright and dark colors alternate\nfor each family. Color numbers \\index{color numbers} range from 0 to 99,\nlike crayon numbers, but you can use fractional numbers to get as tiny a\nstep as you like:\n\n![image1141.png](assets/image1141.png) <!--  style=\"width:5.79306in;height:0.3in\" / -->\n\n(“As tiny as you like” isn’t *quite* true because in the end, your color\nhas to be rounded to integer RGB values for display.)\n\nBoth of these scales include the range of shades of gray \\index{gray},\nfrom black to white. Since black is the initial pen color, and black\nisn’t a hue, Scratch and Snap*!* users would traditionally try to use\nset color to escape from black, and it wouldn’t work. By including black\nin the same scale as other colors, we eliminate the Black Hole problem\n\\index{Black Hole problem} if people use only the recommended color\nscales.\n\nWe are making a point of saying “color number” for what was sometimes\ncalled just “color” in earlier versions of the library, because we now\nreserve the name “color” for an actual color, an instance of the color\ndata type.  \n\n**How to Use the Library**\n\nThere are three library blocks specifically about controlling the pen.\nThey have the same names as three of the primitive Pen blocks:\n\n![image1156.png](assets/image1156.png) <!--  style=\"width:5.79306in;height:0.3in\" / -->\n\nThe first (Pen block-colored) input slot is used to select which color\nscale you want to use. (These blocks also allow reading or setting two\nblock properties that are not colors: the pen size and its\ntransparency.) The pen reporter \\index{pen block} requires no other\ninputs; it reports the state of the pen in whatever dimension you\nchoose.\n\n![image1157.png](assets/image1157.png) <!--  style=\"width:5.79306in;height:0.3in\" / -->\n\nAs the last example shows, you can’t ask for the pen color in a scale\nincompatible with how you set it, unless the block can deduce what you\nwant from what it knows about the current pen color.\n\nThe change pen block \\index{change pen block} applies only to numeric\nscales (including vectors of three or four numbers). It adds its numeric\nor list input to the current pen value(s), doing vector (item-by-item)\naddition for vector scales.\n\nThe set pen block \\index{set pen block} changes the pen color to the\nvalue(s) you specify. The meaning of the white input slots depends on\nwhich attribute of the pen you’re setting:\n\n![image1158.png](assets/image1158.png) <!--  style=\"width:5.79306in;height:0.3in\" / -->\n\nIn the last example, the number 37 sets the *transparency,* on the scale\n0=opaque, 100=invisible. (All color attributes are on a 0–100 scale\nexcept for RGB components, which are 0–255.) A transparency\n\\index{transparency} value can be combined with any of these attribute\nscales.\n\nThe library also includes two constructors and a selector for colors as\na data type:\n\n![image1159.png](assets/image1159.png) <!--  style=\"width:5.79306in;height:0.3in\" / -->\n\nThe latter two\nare inverses of each other, translating between colors and their\nattributes. The color from block’s \\index{color from block} attribute\nmenu has fewer choices than the similar set pen block because you can,\nfor example, set the Red value of the existing pen color leaving the\nrest unchanged, but when creating a color out of nothing you have to\nprovide its entire specification, e.g., all of Red, Green, and Blue, or\nthe equivalent in other scales. (As you’ll see on the next page, we\nprovide two *linear* (one-dimensional) color scales that allow you to\nspecify a color with a single number, at the cost of including only a\nsmall subset of the millions of colors your computer can generate.) If\nyou have a color and want another color that’s the same except for one\nnumber, as in the Red example, you can use this block: \n\n![image402.png](assets/image402.png) <!--  style=\"width:1.80556in;height:0.19444in\" alt=\"Macintosh HD:Users:bh:Desktop:color-from-and.png\" / --> \n\nFinally, the library includes the mix block \\index{mix block} and a\nhelper:\n\n![image1160.png](assets/image1160.png) <!--  style=\"width:5.79306in;height:0.3in\" / -->\n\nWe’ll have more to say about these after a detour through color theory.\n\nThat’s all you have to know about colors! *Crayons* for specific\ninteresting ones, *color numbers* for gradual transformation from one\ncolor to the next. But there’s a bit more to say, if you’re interested.\nIf not, stop here. (But look at the samples of the different scales on\npage [145](#spirals).)  \n\n**More about Colors: Fair Hues and Shades**\n\nSeveral of the three-dimensional arrangements of colors use the concept\nof “hue \\index{hue},” which more or less means where a color would\nappear in a rainbow \\index{rainbow} (magenta \\index{magenta}, near the\nright, is [a long story](https://en.wikipedia.org/wiki/Magenta)):\n\n![image1189.png](assets/image1189.png) <!--  style=\"width:5.80667in;height:0.30667in\" / --> \n\nThese are called “spectral \\index{spectral colors} ” colors, after the\n*spectrum* of rainbow colors. But these colors aren’t equally\ndistributed. There’s an awful lot of green, hardly any yellow, and just\na sliver of orange. And no brown at all.\n\nAnd this is already a handwave, because the range of colors that can be\ngenerated by RGB monitors doesn’t include some of the *true* spectral\ncolors. See [Spectral\ncolor](https://en.wikipedia.org/wiki/Spectral_color) in Wikipedia for\nall the gory details.\n\nThis isn’t a problem with the physics of rainbows. It’s in the human eye\nand the human brain that certain ranges of wavelength of light waves are\nlumped together as named colors. The eye is just “tuned” \\index{rods and\ncones} to recognize a wide range of colors as green. (See [Rods and\nCones](https://en.wikipedia.org/w/index.php?title=Rods_and_cones).) And\ndifferent human cultures give names to different color ranges.\nNevertheless, in old Scratch projects, you’d say change pen color by 1\nand it’d take forever to reach a color that wasn’t green.\n\nFor color professionals,\nthere are good reasons to want to work with the physical rainbow hue\nlayout. But for amateurs using a simplified, one-dimensional color\nmodel, there’s no reason not to use a more programmer-friendly hue\nscale:\n\n![image1190.png](assets/image1190.png) <!--  style=\"width:5.99444in;height:0.29931in\" / --> \n\n![image1191.png](assets/image1191.png) <!--  style=\"width:1.45972in;height:1.35833in\" / --> \n\nIn this scale, each of the\nseven rainbow colors and brown get an equal share. (Red’s looks too\nsmall, but that’s because it’s split between the two ends: hue 0 is pure\nred, brownish reds are to its right, and purplish reds are wrapped\naround to the right end.) We call this scale “fair hue \\index{fair hue}\n” because each color family gets a fair share of the total hue range.\n(By the way, you were probably taught “… green, blue, indigo\n\\index{indigo}, violet” in school, but it turns out that color names\nwere different in Isaac Newton’s day, and the color he called “blue” is\nmore like modern cyan, while his “indigo” is more like modern blue. See\nWikipedia [Indigo](https://en.wikipedia.org/wiki/Indigo).)\n\nOur *color number* scale\nis based on fair hues, adding a range of grays from black (color number\n0 ) to white (color number 14) and also adding *shades* of the spectral\ncolors. (In color terminology, a *shade* is a darker version of a color;\na lighter version is called a *tint.*) Why do we add shades\n\\index{shade} but not tints \\index{tint} ? Partly because I find shades\nmore exciting. A shade of red ![image1195.png](assets/image1195.png) <!--  style=\"width:0.23611in;height:0.23611in\" alt=\"Macintosh HD:Users:bh:Desktop:red.png\" / --> can be dark candy apple red ![image1194.png](assets/image1194.png) <!--  style=\"width:0.23611in;height:0.23611in\" alt=\"Macintosh HD:Users:bh:Desktop:candy.png\" / --> \\index{dark\ncandy apple red} or maroon ![image1193.png](assets/image1193.png) <!--  style=\"width:0.23611in;height:0.23611in\" alt=\"Macintosh HD:Users:bh:Desktop:maroon.png\" / -->  \\index{maroon}, but a tint is just some kind\nof pink ![image1192.png](assets/image1192.png) <!--  style=\"width:0.23611in;height:0.23611in\" alt=\"Macintosh HD:Users:bh:Desktop:pink.png\" / -->  \\index{pink}. This admitted prejudice is supported by an\nobjective fact: Most projects are made on a white background\n\\index{white background}, so dark colors stand out better than light\nones.\n\nSo, in our color number scale, color numbers 0 to 14 are kinds of gray\n\\index{gray}; the remaining color numbers go through the fair hues, but\nalternating full-strength colors with shades.\n\ncrayons by 10\n\ncrayons by 5\n\ncrayons\n\nfair hues\n\ncolor numbers\n\ncolor numbers by 5\n\ncolor numbers by 10\n\n![image1197.png](assets/image1197.png) <!--  style=\"width:0.23611in;height:0.23611in\" alt=\"Macintosh HD:Users:bh:Desktop:pink.png\" / --> \n\nThis chart shows how the color scales \\index{color scales} discussed so\nfar are related. Note that all scales range from 0 to 100; the fair hues\nscale has been compressed in the chart so that similar colors line up\nvertically. (Its dimensions are different because it doesn’t include the\ngrays at the left. Since there are eight color families, the pure, named\nfair hues are at multiples of 100/8=12.5, starting with red=0.)\n\n\nWhite\nis crayon 14 and color number 14. This value was deliberately chosen\n*not* to be a multiple of 5 so that the every-fifth-crayon and\nevery-tenth-crayon selections don’t include it, so that all of the\ncrayons in those smaller boxes are visible against a white \\index{white}\nstage background.\n\n![image1198.png](assets/image1198.png) <!--  style=\"width:1.85in;height:1.07986in\" alt=\"Macintosh HD:Users:bh:Desktop:Prism_compare_rainbow_01.png\" / --> \n\nAmong purples \\index{purple}, the official spectral violet\n\\index{violet} (crayon 90) is the end of the spectrum. Magenta\n\\index{magenta}, brighter than violet, isn’t a spectral color at all.\n<span id=\"rainbow\" class=\"anchor\"></span>(In the picture at the left,\nthe top part is the spectrum of white light spread out through a prism;\nthe middle part is a photograph of a rainbow, and the bottom part is a\ndigital simulation of a rainbow.) Magenta is a mixture of red and blue.\n(attribution: Wikipedia user Andys. CC BY-SA.)\n\nThe light gray at color number 10 is slightly different from crayon 10\njust because of roundoff in computing crayon values. Color number 90 is\ndifferent from crayon 90 because the official RGB violet (equal parts\nred and blue) is actually lighter than spectral violet. The purple\nfamily is also unusual because magenta, crayon and color number 95, is\nlighter than the violet at 90. In other families, the color numbers,\ncrayons, and (scaled) fair hues all agree at multiples of ten. These\nmultiple-of-ten positions are the standard RGB primary and secondary\ncolors, e.g., the yellow at color number 50 is (255, 255, 0) in RGB.\n(Gray, brown, and orange don’t have such simple RGB settings.)\n\nThe color numbers at odd multiples of five are generally darker shades\nthan the corresponding crayons. The latter are often official named\nshades, e.g., teal \\index{teal}, crayon 65, is a half-intensity shade\nof cyan \\index{cyan}. The odd-five *color numbers,* though, are often\ndarker, since they are chosen to be the darkest color in a given family\nthat’s visibly different from black. The pink at color number 15,\nthough, is quite different from crayon 15, because the former is a pure\ntint of red, whereas the crayon, to get a more interesting pink, has a\nlittle magenta mixed in. Color numbers at multiples of five are looked\nup in a table; other color values are determined by linear interpolation\nin RGB space. (*Crayons* are of course all found by table lookup.)\n\nThe from color block \\index{from color block} behaves specially when you\nask for the *color number* of a color. Most colors don’t exactly match a\ncolor number, and for other attributes of a color (crayon number, X11\nname) you don’t get an answer unless the color exactly matches one of\nthe names or numbers in that attribute. But for color number, the block\ntries to find the *nearest color number* \\index{nearest color number} to\nthe color you specify. The result will be only approximate; you can’t\nuse the number you get to recreate the input color. But you can start\nchoosing nearby color numbers as you animate the sprite.\n\n### Perceptual Spaces: HSV and HSL\n\n![image1199.png](assets/image1199.png) <!--  style=\"width:0.73611in;height:0.72222in\" alt=\"Macintosh HD:Users:bh:Desktop:blues.png\" / --> \n\nRGB is the right way to\nthink about colors if you’re building or programming a display monitor;\nCMYK is the right way if you’re building or programming a color printer.\nBut neither of those coordinate systems is very intuitive if you’re\ntrying to understand what color *you see* if, for example, you mix 37%\nred light, 52% green, and 11% blue. The *hue* scale is one dimension of\nmost attempts at a perceptual scale. The square at the right has pale\nblues along the top edge, dark blues along the right edge, various\nshades of gray toward the left, black at the bottom, and pure spectral\nblue in the top right corner. Although no other point in the square is\npure blue, you can tell at a glance that no other spectral color is\nmixed with the blue.\n\n![image1200.png](assets/image1200.png) <!--  style=\"width:2.69167in;height:1.19028in\" / --> \n\nAside from hue, the other two\ndimensions of a color space have to represent how much white and/or\nblack is mixed with the spectral color. (Bear in mind that “mixing\nblack” is a metaphor when it comes to monitors. There really is black\npaint, but there’s no such thing as black light.) One such space, HSV\n\\index{HSV}, has one dimension for the amount of color (vs. white),\ncalled *saturation,* and one for the amount of black, imaginatively\ncalled *value.* HSV stands for Hue-Saturation \\index{saturation} -Value\n\\index{value}. (Value is also called *brightness.*) The *value* is\nactually measured backward from the above description; that is, if value\nis 0, the color is pure black; if value is 100, then a saturation of 0\nmeans all white, no spectral color; a saturation of 100 means no white\nat all. In the square in the previous paragraph, the *x* axis is the\nsaturation and the *y* axis is the value. The entire bottom edge is\nblack, but only the top left corner is white. HSV is the traditional\ncolor space used in Scratch and Snap*!.* Set pen color set the hue; set\npen shade set the value. There was originally no Pen block to set the\nsaturation, but there’s a set brightness effect Looks block to control\nthe saturation of the sprite’s costume. (I speculate that the Scratch\ndesigners, like me, thought tints were less vivid than shades against a\nwhite background, so they made it harder to control tinting.)\n\nattribution: Wikipedia user SharkD, CC BY-SA 3.0\n\nBut if you’re looking\nat colors on a computer display, HSV isn’t really a good match for human\nperception. Intuitively, black and white should be treated\nsymmetrically. This is the HSL \\index{HSL} (hue-saturation-lightness\n\\index{lightness} ) color space. \n\n![image1203.png](assets/image1203.png) <!--  style=\"width:0.76389in;height:0.76389in\" alt=\"Macintosh HD:Users:bh:Desktop:HSL-blue.png\" / -->\n\n*Saturation,* in HSL, is a measure of\nthe *grayness* or *dullness* of a color (how close it comes to being on\na black-and-white scale) and *lightness* measures *spectralness* with\npure white at one end, pure black at the other end, and spectral color\nin the middle. The *saturation* number is actually the opposite of\ngrayness: 0 means pure gray, and 100 means pure spectral color, provided\nthat the *lightness* is 50, midway between black and white. Colors with\nlightness other than 50 have some black or white mixed in, but\nsaturation 100 means that the color is as fully saturated as it can be,\ngiven the amount of white or black needed to achieve that lightness.\nSaturation less than 100 means that *both white and black* are mixed\nwith the spectral color. (Such mixtures are called *tones* of the\nspectral color.) Perceptually, colors with saturation 100% don’t look\ngray: ![image1202.png](assets/image1202.png) <!--  style=\"width:1.55556in;height:0.26597in\" / -->  but colors with saturation 75% do: ![image1201.png](assets/image1201.png) <!--  style=\"width:1.56389in;height:0.29306in\" / --> \n\nNote that HSV and HSL both have a dimension called “saturation,” but\n*they’re not the same thing!* In HSV, “saturation” means non-whiteness,\nwhereas in HSL it means non-grayness (vividness).\n\nMore fine print: It’s misleading to talk about the spectrum of light\nwavelengths as if it were the same as perceived hue. If your computer\ndisplay is showing you a yellow area, for example, it’s doing it by\nturning on its red and green LEDs over that area, and what hits your\nretina *is still two wavelengths of light, red and green, superimposed.*\nYou could make what’s perceptually the same yellow by using a single\nintermediate wavelength. Your eye and brain don’t distinguish between\nthose two kinds of yellow. Also, your brain automatically adjusts\nperceived hue to correct for differences in illumination. When you place\na monochrome object so that it’s half in sunlight and half in the shade,\nyou see it as one even though what’s reaching your eyes from the two\nregions differs a lot. And, sadly, it’s HSL whose use of “saturation”\ndisagrees with the official international color vocabulary\nstandardization committee. I learned all this from [this\ntutorial](http://www.huevaluechroma.com/011.php), which you might find\nmore coherent than jumping around Wikipedia if you’re interested.\n\n![image1204.png](assets/image1204.png) <!--  style=\"width:1.64375in;height:0.84167in\" / --> \n\nAlthough traditional Scratch\nand Snap*!* use HSV in programs, they use HSL in the color picker\n\\index{color picker}. The horizontal axis is hue (fair hue \\index{fair\nhue} , in this version) and the vertical axis is *lightness,* the scale\nwith black at one end and white at the other end. It would make no sense\nto have only the bottom half of this selector (HSV Value) or only the\ntop half (HSV Saturation). And, given that you can only fit two\ndimensions on a flat screen, it makes sense to pick HSL saturation\n(vividness) as the one to keep at 100%. (In this fair-hue picker, some\ncolors appear twice: “spectral” (50% lightness) browns as shades (≈33%\nlightness) of red or orange, and shades of those browns.)\n\nSoftware that isn’t\nprimarily about colors (so, *not* including Photoshop, for example)\ntypically use HSV or HSL, with web-based software more likely to use HSV\nbecause that’s what’s built into the JavaScript \\index{JavaScript}\nprogramming language provided by browsers. But if the goal is to model\nhuman color perception, neither of these color spaces is satisfactory,\nbecause they assume that all full-intensity spectral colors are equally\nbright. But if you’re like most people, you see spectral yellow ![image1206.png](assets/image1206.png) <!--  style=\"width:0.18889in;height:0.18889in\" alt=\"Macintosh HD:Users:bh:Desktop:yellow.png\" / --> as much\nbrighter than spectral blue ![image1205.png](assets/image1205.png) <!--  style=\"width:0.20278in;height:0.20278in\" / --> . There are better perceptual color spaces\nwith names like L\\*u\\*v\\* \\index{L\\*u\\*v\\*} and L\\*a\\*b\\*\n\\index{L\\*a\\*b\\*} that are based on research with human subjects to\ndetermine true perceived brightness. Wikipedia explains all this and\nmore at [HSL and HSV](https://en.wikipedia.org/wiki/HSL_and_HSV), where\nthey recommend ditching both of these simplistic color spaces. ☺\n\n###  Mixing Colors\n\nGiven first class colors, the next question is, what operations apply to\nthem, the way arithmetic operators apply to numbers and higher order\nfunctions apply to lists? The equivalent to adding numbers is mixing\ncolors, but unfortunately there isn’t a simple answer to what that\nmeans.\n\nThe easiest kind of color mixing to understand is *additive* mixing,\nwhich is what happens when you shine two colored lights onto a (white)\nwall. It’s also what happens in your computer screen, where each dot\n(pixel) of an image is created by a tiny red light, a tiny green light,\nand a tiny blue light that can be combined at different strengths to\nmake different colors. Essentially, additive mixing \\index{additive\nmixing} of two colors is computed by adding the two red components, the\ntwo green components, and the two blue components. It’s not *quite* that\nsimple only because each component of the result must be in the range 0\nto 255. So, red (255, 0, 0) mixed with green (0, 255, 0) gives (255,\n255, 0), which is yellow. But red (255, 0, 0) plus yellow (255, 255, 0)\ncan’t give (510, 255, 0). Just limiting the red in the result to 255\nwould mean that red plus yellow is yellow, which doesn’t make sense.\nInstead, if the red value has to be reduced by half (from 510 to 255),\nthen *all three* values must be reduced by half, so the result is (255,\n128, 0), which is orange. (Half of 255 is 127.5, but each RGB value must\nbe an integer.)\n\n![image1207.png](assets/image1207.png) <!--  style=\"width:0.20278in;height:0.20278in\" / --> \n\nA different kind of color mixing based on light is done when different\ncolored transparent plastic sheets are held in front of a white light,\nas is done in theatrical lighting. In that situation, the light that\ngets through both filters is what remains after some light is filtered\nout by the first one and some of what’s left is filtered out by the\nsecond one. In red-green-blue terms, a red filter filters out green and\nblue; a yellow filter allows red and green through, filtering out blue.\nBut there isn’t any green light for the yellow filter to pass; it was\nfiltered out by the red filter. Each filter can only remove light, not\nadd light, so this is called *subtractive* mixing:\n\n![image1208.png](assets/image1208.png) <!--  style=\"width:0.20278in;height:0.20278in\" / --> \n\nPerhaps confusingly, the numerical computation of subtractive mixing\n\\index{subtractive mixing} is done by *multiplying* the RGB values,\ntaken as fractions of the maximum 255, so red (1, 0, 0) times yellow (1,\n1, 0) is red again.\n\nThose are both straightforward to compute. Much, much more complicated\nis trying to simulate the result of mixing *paints* \\index{mixing\npaints} *.* It’s not just that we’d have to compute a more complicated\nfunction of the red, green, and blue values; it’s that RGB values (or\nany other three-dimensional color space) are inadequate to describe the\nbehavior of paints \\index{paints}. Two paints can look identical, and\nhave the same RGB values, but may still behave very differently when\nmixed with other colors. The differences are mostly due to the chemistry\nof the paints, but are also affected by exactly how the colors are\nmixed. The mixing is mostly subtractive; red paint *absorbs* most of the\ncolors other than red, so what’s reflected off the surface is whatever\nisn’t absorbed by the colors being mixed. But there can be an additive\ncomponent also.\n\nThe proper mathematical abstraction to describe a paint is a\n*reflectance* graph \\index{reflectance graph}, like this:\n\n![image1209.png](assets/image1209.png) <!--  style=\"width:0.20278in;height:0.20278in\" / --> \n\n(These aren’t paints, but minerals, and one software-generated spectrum,\nfrom the US Geological Survey’s [Spectral\nLibrary](https://www.usgs.gov/labs/spec-lab/capabilities/spectral-library).\nThe details don’t matter, just the fact that a graph like these gives\nmuch more information than three RGB numbers.) To mix two paints\nproperly, you multiply the *y* values (as fractions) at each matching\n*x* coordinate of the two graphs.\n\nHaving said all that, the mix block takes the colors it is given as\ninputs and converts them into what we hope are *typical* paint\nreflectance spectra that would look like those colors, and then mixes\nthose spectra and converts back to RGB.\n\n![image1230.png](assets/image1230.png) <!--  style=\"width:4.34028in;height:0.65278in\" alt=\"Macintosh HD:Users:bh:Desktop:5R-3G-paint.png\" / -->\n\nBut unlike the other two kinds of mixing, in this case we can’t say that\nthese colors are “the right answer”; what would happen with real paints\ndepends on their chemical composition and how they’re mixed. There are\nthree more mixing options, but these three are the ones that correspond\nto real-world color mixing.\n\nThe mix block will\naccept any number of colors, and will mix them in equal proportion. If\n(for any kind of mixing) you want more of one color than another, use\nthe color at weight block \\index{color at weight block} to make a\n“weighted color”:\n\n![image1232.png](assets/image1232.png) <!--  style=\"width:5.16667in;height:0.43056in\" alt=\"Macintosh HD:Users:bh:Desktop:4R-1G-paint.png\" / --> \n\nThis mixes four\nparts red paint to one part green paint. All colors in a mixture can be\nweighted:\n\n![image1231.png](assets/image1231.png) <!--  style=\"width:4.34028in;height:0.65278in\" alt=\"Macintosh HD:Users:bh:Desktop:5R-3G-paint.png\" / --> \n\n(Thanks to [Scott Burns \\index{Burns, Scott}\n](http://scottburns.us/subtractive-color-mixture/) for his help in\nunderstanding paint mixing, along with [David Briggs \\index{ Briggs,\nDavid} ](http://www.huevaluechroma.com/061.php)’s tutorial. Remaining\nmistakes are bh’s.)\n\n### tl;dr\n\nFor normal people \\index{normal people}, Snap*!* provides three simple,\none-dimensional scales: *<u>crayons</u>* for specific interesting\ncolors, *<u>color numbers</u>* for a continuum of high-contrast colors\nwith a range of hues and shading, and *<u>fair hues</u>* for a continuum\nwithout shading. For color nerds \\index{color nerds}, it provides\nthree-dimensional color spaces RGB, HSL, HSV, and fair-hue variants of\nthe latter two. <span id=\"spirals\" class=\"anchor\"></span>We recommend\n“fair HSL \\index{fair HSL} ” for zeroing in on a desired color.\n\n<!-- ![image1241.png](assets/image1241.png)  style=\"width:1.53472in;height:1.84722in\" alt=\"Macintosh HD:Users:bh:Desktop:squiral-script.png\" / --> \n\n![image1242.png](assets/image1242.png) <!--  style=\"width:4.34028in;height:0.65278in\" alt=\"Macintosh HD:Users:bh:Desktop:5R-3G-paint.png\" / --> \n\n###  Subappendix: Geeky details on fair hue\n\n![image1243.png](assets/image1243.png) <!--  style=\"width:4.34028in;height:0.65278in\" alt=\"Macintosh HD:Users:bh:Desktop:5R-3G-paint.png\" / --> \n\nThe left graph shows that, unsurprisingly, all of the brown fair hue\n\\index{fair hue} s make essentially no progress in real hue, with the\norange-brown section actually a little retrograde, since browns are\nreally shades of orange and so the real hues overlap between fair browns\nand fair oranges. Green makes up some of the distance, because there are\ntoo many green real hues and part of the goal of the fair hue scale is\nto squeeze that part of the hue spectrum. But much of the catching up\nhappens very quickly, between pure magenta at fair hue 93.75 and the\nstart of the purple-red section at fair hue 97. This abrupt change is\nunfortunate, but the alternatives involve either stealing space from red\nor stealing space from purple (which already has to include both\nspectral violet and RGB magenta). The graph has discontinuous derivative\nat the table-lookup points, of which there are two in each color family,\none at the pure-named-RGB colors at multiples of 12.5, and the other\n*roughly* halfway to the next color family, except for the purple\nfamily, which has lookup points at 87.5 (approximate spectral violet),\n93.75 (RGB magenta), and 97 (turning point toward the red family). (In\nthe color picker, blue captures cyan and purple space in dark shades.\nThis, too, is an artifact of human vision.)\n\nThe right graph shows the HSV saturation and value for all the fair\nhues. Saturation is at 100%, as it should be in a hue scale, except for\na very slight drop in part of the browns. (Browns are shades of orange,\nnot tints, so one would expect full saturation, except that some of the\nbrowns are actually mixtures with related hues.) But value, also as\nexpected, falls substantially in the browns, to a low of about 56%\n(halfway to black) for the “pure” brown at 45° (fair hue 12.5). But the\ncurve is smooth, without inflection points other than that minimum-value\npure brown.\n\n“Fair saturation \\index{fair saturation} ” and “fair value \\index{fair\nvalue} ” are by definition 100% for the entire range of fair hues. This\nmeans that in the browns, the real saturation and value are the product\n(in percent) of the innate shading of the specific brown fair hue and\nthe user’s fair saturation/value setting. When the user’s previous color\nsetting was in a real scale and the new setting is in a fair scale, the\nprogram assumes that the previous saturation and value were entirely\nuser-determined; when the previous color setting was in a brown fair hue\nand the new setting is also in a fair scale, the program remembers the\nuser’s intention from the previous setting. (Internal calculations are\nbased on HSV, even though we recommend HSL to users, because HSV comes\nto us directly from the JavaScript color management implementation.)\nThis is why the set pen block includes options for “fair saturation” and\nso on.\n\nFor the extra-geeky, here are\nthe exact table lookup points (fair hue \\index{fair hue table},\n\\[0,100\\]):\n\n![image1258.png](assets/image1258.png) <!--  style=\"width:5.9875in;height:0.37847in\" / --> \n\nand here are the RGB settings at those points:\n\n![image1259.png](assets/image1259.png) <!--  style=\"width:5.98403in;height:1.37361in\" / -->  \n\n### Subappendix: Geeky details on color numbers\n\n![image1260.png](assets/image1260.png) <!--  style=\"width:2.08333in;height:2.29167in\" alt=\"Macintosh HD:Users:bh:Desktop:integers.png\" / --> \n\nHere is a picture of\ninteger color numbers, but remember that color numbers are continuous.\n(As usual, “continuous” values are ultimately converted to integer RGB\nvalues, so there’s really some granularity.) Color numbers 0-14 are\ncontinuously varying grayscale, from 0=black to 14=white. Color numbers\n14+ε to 20 are linearly varying shades of pink, with RGB Red at color\nnumber 20.\n\nBeyond that point, in each color family, the multiple of ten color\nnumber in the middle is the RGB standard color of that family, in which\neach component is either 255 or 0. (Exceptions are brown, which is of\ncourse darker than any of those colors; orange, with its green component\nhalf-strength: \\[255, 127, 0\\]; and violet, discussed below.) The\nfollowing multiple of five is the number of the darkest color in that\nfamily, although not necessarily the same hue as the multiple of ten\ncolor number. Color numbers between the multiple of ten and the\nfollowing multiple of five are shades of colors entirely within the\nfamily. Color numbers in the four *before* the multiple of ten are\nmixtures of this family and the one before it. So, for example, in the\ngreen family, we have\n\n- 55 Darkest yellow.\n\n- (55, 60) shades of yellow-green mixtures. As the color number increases,\nboth the hue and the lightness (or value, depending on your religion)\nincrease, so we get brighter and greener colors.\n\n- 60 Canonical green, \\[0, 255, 0\\], whose W3C color name is “lime,” not\n“green.”\n\n- (60, 65) Shades of green. No cyan mixed in.\n\n- 65 Darkest green.\n\n- (65,70) Shades of green-cyan mixtures.\n\nIn the color number chart \\index{color chart}, all the dark color\nnumbers look a lot like black, but they’re quite different. Here are the\ndarkest colors in each color number family.\n\n![image1261.png](assets/image1261.png) <!--  style=\"width:1.38889in;height:1.38889in\" alt=\"Macintosh HD:Users:bh:Desktop:darkest.png\" / --> \n\nDarkest yellow doesn’t\nlook entirely yellow. You might see it as greenish or brownish. As it\nturns out, the darkest color that really looks yellow is hardly dark at\nall. This color was hand-tweaked to look neither green nor brown to me,\nbut ymmv.\n\nIn some families, the center+5 *crayon* is an important named darker\nversion of the center color: In the red family, \\[128, 0, 0\\] is\n“maroon.” In the cyan family, \\[0, 128, 128\\] is “teal.” An early\nversion of the color number scale used these named shades as the\ncenter+5 color number also. But on this page we use the word “darkest”\nadvisedly: You can’t find a darker shade of this family anywhere in the\ncolor number scale, but you *can* find lighter shades. Teal is color\nnumber 73.1, ($70 + 5 \\bullet \\frac{255 - 128}{255 - 50}$), because\ndarkest cyan, color 75, is \\[0, 50, 50\\]. The color number for maroon is\nleft as an exercise for the reader.\n\nThe purple family is different from the others, because it has to\ninclude both spectral violet and extraspectral RGB magenta. Violet is\nusually given as RGB \\[128, 0, 255\\], but that’s much brighter than the\nviolet in an actual spectrum (see page [142](#rainbow)). We use \\[80, 0,\n90\\], a value hand-tweaked to look as much as possible like the violet\nin rainbow photos, as color number 90. (*Crayon* 90 is \\[128, 0, 255\\].)\nMagenta, \\[255, 0, 255\\], is color number 95. This means that the colors\nget *brighter,* not darker, between 90 and 95. The darkest violet is\nactually color number 87.5, so it’s bluer than standard violet, but\nstill plainly a purple and not a blue. It’s \\[39,0,76\\]. It’s *not*\nhand-tweaked; it’s a linear interpolation between darkest blue, \\[0, 0,\n64\\], and the violet at color number 90. I determined by experiment that\ncolor number 87.5 is the darkest one that’s still unambiguously purple.\n(According to Wikipedia, “violet” names only the spectral color, while\n“purple” is the name of the whole color family.)\n\nHere are the reference points for color numbers that are multiples of\nfive, except for item 4, which is used for color 14, not color 15:\n\n![image1262.png](assets/image1262.png) <!--  style=\"width:4.58333in;height:1.27778in\" / --> \n\nThe very pale three-input list blocks are for color numbers that are odd\nmultiples of five, generally the “darkest” members of each color family.\n(The block colors were adjusted in Photoshop; don’t ask how to get\nblocks this color in Snap*!*.)\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../../scripts/collect-index.lua"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","bibliography":["../../references.bib"],"number-depth":1,"theme":["none","../../styles/snap-manual.scss"],"strip-comment":true,"navbar":{"logo":"../../images/snap-logo.png"}},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":true,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"snap-manual","include-in-header":["../../styles/latex-preamble.tex"],"include-after-body":{"text":"\\printindex\n"},"toc":true,"number-sections":true,"resource-path":["../../","../../content/assets/","../../content/assets/images/"]},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["../../references.bib"],"number-depth":1,"cover-image":"../../cover.png","documentclass":"book","papersize":"letter"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}