{"title":"First class lists","markdown":{"headingText":"First class lists","containsRefs":false,"markdown":"\nA data type is *ﬁrst class* \\index{first class data type} in a\nprogramming language if data of that type can be\n\n- the value of a variable\n\n- an input to a procedure\n\n- the value returned by a procedure\n\n- a member of a data aggregate\n\n- anonymous (not named)\n\nIn Scratch \\index{Scratch}, numbers and text strings are ﬁrst class.\nYou can put a number in a variable, use one as the input to a block,\ncall a reporter that reports a number, or put a number into a list.\n\nBut Scratch’s lists are not ﬁrst class. You create one using the “Make a\nlist \\index{Make a list} ” button, which requires that you give the list\na name. You can’t put the list into a variable, into an input slot of a\nblock, or into a list item—you can’t have lists of lists. None of the\nScratch reporters reports a list value. (You can use a reduction of the\nlist into a text string as input to other blocks, but this loses the\nlist structure; the input is just a text string, not a data aggregate.)\n\nA fundamental design principle \\index{design principle} in Snap*!* is\nthat ***<u>all data should be ﬁrst class</u>**.* If it’s in the\nlanguage, then we should be able to use it fully and freely. We believe\nthat this principle avoids the need for many special-case tools, which\ncan instead be written by Snap*!* users themselves.\n\n![image523.png](assets/image523.png) <!--  style=\"width:2.83958in;height:0.41597in\" / --> Note that it’s a data *type*\nthat’s ﬁrst class, not an individual value. Don’t think, for example,\nthat some lists are ﬁrst class, while others aren’t. In Snap*!*, lists\nare ﬁrst class, period.\n\n##  The list Block\n\nAt the heart of providing first class lists is the ability to make an\n“anonymous” list \\index{anonymous list} —to make a list without\nsimultaneously giving it a name. The list reporter block \\index{list\nblock} does that.\n\nAt the right end of the block are two left-and-right arrowheads\n\\index{arrowheads}. Clicking on these changes the number of inputs to\nlist, i.e., the number of elements in the list you are building.\nShift-clicking changes by three at a time.\n\n![image534.png](assets/image534.png) <!--  style=\"width:1.50347in;height:1.8125in\" / --> ![image535.png](assets/image535.png) <!--  style=\"width:2.24375in;height:0.32153in\" / --> You can use this block as\ninput to many other blocks:\n\n![image536.png](assets/image536.png) <!--  style=\"width:3.09375in;height:0.77083in\" / --> ![image537.png](assets/image537.png) <!--  style=\"width:1.82292in;height:0.29167in\" / --> Snap*!* does not have a “Make\na list” button like the one in Scratch \\index{Scratch}. If you want a\nglobal “named list,” make a global variable and use the set block to put\na list into the variable.\n\n## Lists of Lists\n\n![image538.png](assets/image538.png) <!--  style=\"width:5.88889in;height:1.04861in\" / --> Lists can be inserted as\nelements in larger lists. We can easily create ad hoc structures as\nneeded:\n\nNotice that this list is presented in a different format from the “She\nLoves You” list above. A two-dimensional list is called a *table* and is\nby default shown in *table view.* We’ll have more to say about this\nlater.\n\nWe can also build any classic computer science data structure\n\\index{data structure} out of lists of lists \\index{lists of lists}, by\ndefining *constructors* \\index{constructors} (blocks to make an instance\nof the structure), *selectors* \\index{selectors} (blocks to pull out a\npiece of the structure), and *mutators* \\index{mutators} (blocks to\nchange the contents of the structure) as needed. Here we create binary\ntree \\index{binary tree} s with selectors that check for input of the\ncorrect data type; only one selector is shown but the ones for left and\nright children are analogous.\n\n##  Functional and Imperative List Programming\n\nThere are two ways to create a list inside a program. Scratch\n\\index{Scratch} users will be familiar with the *imperative* programming\nstyle \\index{imperative programming style}, which is based on a set of\ncommand blocks that modify a list:\n\nAs an example, here are two blocks that take a list of numbers as input,\nand report a new list containing only the even numbers from the original\nlist:[4]\n\nor\n\nIn this script, we first create a temporary variable, then put an empty\nlist in it, then go through the items of the input list using the add\n**…** to (result) block to modify the result list, adding one item at a\ntime, and finally report the result.\n\n*Functional* programming is a different approach that is becoming\nimportant in “real world” programming because of parallelism\n\\index{parallelism}, i.e., the fact that different processors can be\nmanipulating the same data at the same time. This makes the use of\nmutation \\index{mutation} (changing the value associated with a\nvariable, or the items of a list) problematic because with parallelism\nit’s impossible to know the exact sequence of events, so the result of\nmutation may not be what the programmer expected. Even without\nparallelism, though, functional programming \\index{functional\nprogramming style} is sometimes a simpler and more effective technique,\nespecially when dealing with recursively defined data structures. It\nuses reporter blocks, not command blocks, to build up a list value:\n\nIn a functional program, we often use recursion to construct a list, one\nitem at a time. The in front of block \\index{in front of block} makes a\nlist that has one item added to the front of an existing list, *without\nchanging the value of the original list.* A nonempty list is processed\nby dividing it into its first item (item 1 of \\index{item 1 of block} )\nand all the rest of the items (all but first of \\index{all but first of\nblock} ), which are handled through a recursive call:\n\n![image555.png](assets/image555.png) <!--  style=\"width:4.75in;height:2.24097in\" / --> Snap*!*\nuses two different internal representations of lists, one (dynamic\n\\index{array, dynamic} array \\index{dynamic array} ) for imperative\nprogramming and the other (linked \\index{list, linked} list\n\\index{linked list} ) for functional programming. Each representation\nmakes the corresponding built-in list blocks (commands or reporters,\nrespectively) most efficient. It’s possible to mix styles in the same\nprogram, but if *the same list* is used both ways, the program will run\nmore slowly because it converts from one representation to the other\nrepeatedly. (The item ( ) of \\[ \\] block doesn’t change the\nrepresentation.) You don’t have to know the details of the internal\nrepresentations, but it’s worthwhile to use each list in a consistent\nway.\n\n## ![image556.png](assets/image556.png) <!--  style=\"width:5.86458in;height:1.07153in\" / --> Higher Order List Operations and Rings\n\nThere’s an even easier way to select the even numbers from a list:\n\n![image557.png](assets/image557.png) <!--  style=\"width:2.375in;height:0.27778in\" / --> The\nkeep block takes a Predicate expression as its first input, and a list\nas its second input. It reports a list containing those elements of the\ninput list for which the predicate returns true. Notice two things about\nthe predicate input: First, it has a grey ring \\index{ring, gray} around\nit. Second, the mod block has an empty input. Keep puts each item of its\ninput list, one at a time, into that empty input before evaluating the\npredicate. (The empty input is supposed to remind you of the “box”\nnotation for variables in elementary school: ☐+3=7.) The grey ring is\npart of the keep block as it appears in the palette:\n\nWhat the ring means is that this input is a block (a predicate block, in\nthis case, because the interior of the ring is a hexagon), rather than\nthe value reported by that block. Here’s the difference:\n\nEvaluating the = block without a ring reports true or false; evaluating\nthe block *with* a ring reports the block itself. This allows keep to\nevaluate the = predicate repeatedly, once for each list item. A block\nthat takes another block as input is called a *higher order* block (or\nhigher order procedure, or higher order function \\index{higher order\nfunction} ).\n\n![image562.png](assets/image562.png) <!--  style=\"width:2.39in;height:0.22in\" / --> \nSnap*!* provides four higher order function blocks for operating on\nlists:\n\n![image571.emf](assets/image571.emf) <!--  style=\"width:7.5in;height:1.71389in\" / --> <span id=\"map\"\nclass=\"anchor\"></span>You’ve already seen keep. Find first is\n\\index{find first} similar, but it reports just the first item that\nsatisfies the predicate, not a list of all the matching items. It’s\nequivalent to but faster because it\n\nstops looking as soon as it finds a match. If there are no matching\nitems, it returns an empty string.\n\nMap \\index{map block} takes a Reporter block and a list as inputs. It\nreports a new list in which each item is the value reported by the\nReporter block as applied to one item from the input list. That’s a\nmouthful, but an example will make its meaning clear:\n\nThese examples use small lists, to fit the page, but the higher order\nblocks work for any size list.\n\nBy the way, we’ve been using arithmetic examples, but the list items can\nbe of any type, and any reporter can be used. We’ll make the plurals of\nsome words:\n\nAn *empty* gray ring represents the *identity function,* which just\nreports its input. Leaving the ring in map empty is the most concise way\nto make a shallow copy of a list (that is, in the case of a list of\nlists, the result is a new toplevel list whose items are the same\n(uncopied) lists that are items of the toplevel input list)\n\\index{shallow copy of a list}. To make a deep copy of a list\n\\index{deep copy of a list} (that is, one in which all the sublists,\nsublists of sublists, etc. are copied), use the list as input to the\n![image576.png](assets/image576.png) <!--  style=\"width:0.74306in;height:0.19444in\" alt=\"Macintosh HD:Users:bh:Desktop:id.png\" / -->  block (one of the variants\nof the sqrt of block). This works because id of is a hyperblock (page\n[55](#hyperblocks)).\n\nThe third higher order block, combine \\index{combine block}, computes a\nsingle result from *all* the items of a list, using a *two-input*\nreporter as its second input. In practice, there are only a few blocks\nyou’ll ever use with combine:\n\nThese blocks take the sum of the list items, take their product, string\nthem into one word, combine them into a sentence (with spaces between\nitems), see if all items of a list of Booleans are true, see if any of\nthe items is true, find the smallest, or find the largest.\n\n![image585.png](assets/image585.png) <!--  style=\"width:6.27917in;height:0.37569in\" alt=\"Macintosh HD:Users:bh:Desktop:comma-list.png\" / --> ![image586.png](assets/image586.png) <!--  style=\"width:3.86806in;height:0.34514in\" / --> Why + but not −? It only\nmakes sense to combine list items using an *associative*\n\\index{function, associative} function \\index{associative function} :\none that doesn’t care in what order the items are combined (left to\nright or right to left). (2+3)+4 = 2+(3+4), but (2−3)−4 ≠ 2−(3−4).\n\n![image587.png](assets/image587.png) <!--  style=\"width:5.80833in;height:1.19097in\" / --> The functions map, keep, and\nfind first have an advanced mode with rarely-used features: If their\nfunction input is given explicit input names (by clicking the arrowhead\nat the right end of the gray ring; see page [69](#formal-parameters)),\nthen it will be called for each list item with *three* inputs: the\nitem’s value (as usual), the item’s position in the input list (its\nindex), and the entire input list. No more than three input names can be\nused in this contex\n\n## \n\n## Table View \\index{table view}  vs. List View \\index{list view} \n\nWe mentioned earlier that there are two ways of representing lists\nvisually. For one-dimensional lists (lists whose items are not\nthemselves lists) the visual differences are small:\n\nFor one-dimensional lists, it’s not really the appearance that’s\nimportant. What matters is that the *list view* allows very versatile\ndirect manipulation of the list through the picture: you can edit the\nindividual items, you can delete items by clicking the tiny buttons next\nto each item, and you can add new items at the end by clicking the tiny\nplus sign in the lower left corner. (You can just barely see that the\nitem deletion buttons have minus signs in them.) Even if you have\nseveral watchers for the same list, all of them will be updated when you\nchange anything. On the other hand, this versatility comes at an\nefficiency cost; a list view watcher for a long list would be way too\nslow. As a partial workaround, the list view can only contain 100 items\nat a time; the downward-pointing arrowhead opens a menu in which you can\nchoose which 100 to display.\n\nBy contrast, because it doesn’t allow direct editing, the *table view*\nwatcher can hold hundreds of thousands of items and still scroll through\nthem efficiently. The table view has flatter graphics for the items to\nremind you that they’re not clickable to edit the values.\n\nRight-clicking on a list watcher (in either form) gives you the option\nto switch to the other form. The right-click menu also offers an open in\ndialog… option that opens an *offstage* table view watcher, because the\nwatchers can take up a lot of stage space that may make it hard to see\nwhat your program is actually doing. Once the offstage dialog box is\nopen, you can close the stage watcher. There’s an OK button on the\noffstage dialog to close it if you want. Or you can right-click it to\nmake *another* offstage watcher, which is useful if you want to watch\ntwo parts of the list at once by having each watcher scrolled to a\ndifferent place.\n\n![image538.png](assets/image538.png) <!--  style=\"width:5.88889in;height:1.04861in\" / --> Table view is the default if\nthe list has more than 100 items, or if any of the first ten items of\nthe list are lists, in which case it makes a very different-looking\ntwo-dimensional picture:\n\nIn this format, the column of red items has been replaced by a\nspreadsheet-looking display. For short, wide lists, this display makes\nthe content of the list very clear. A vertical display, with much of the\nspace taken up by the “machinery” at the bottom of each sublist, would\nmake it hard to show all the text at once. (The pedagogic cost is that\nthe structure is no longer explicit; we can’t tell just by looking that\nthis is a list of row-lists, rather than a list of column-lists or a\nprimitive two-dimensional array type. But you can choose list view to\nsee the structure.)\n\nBeyond such simple cases, in which every item of the main list is a list\nof the same length, it’s important to keep in mind that the design of\ntable view has to satisfy two goals, not always in agreement: (1) a\nvisually compelling display of two-dimensional arrays, and (2) highly\nefficient display generation, so that Snap*!* can handle very large\nlists, since “big data” is an important topic of study. To meet the\nfirst goal perfectly in the case of “ragged right” arrays in which\nsublists can have different lengths, Snap*!* would scan the entire list\nto find the maximum width before displaying anything, but that would\nviolate the second goal.\n\nSnap*!* uses the simplest possible compromise between the two goals: It\nexamines only the first ten items of the list to decide on the format.\nIf none of those are lists, or they’re all lists of one item, and the\noverall length is no more than 100, list view is used. If the any of\nfirst ten items is a list, then table view is used, and the number of\ncolumns in the table is equal to the largest number of items among the\nfirst ten items (sublists) of the main list.\n\nTable views open with standard values for the width and height of a\ncell, regardless of the actual data. You can change these values by\ndragging the column letters or row numbers. Each column has its own\nwidth, but changing the height of a row changes the height for all rows.\n(This distinction is based not on the semantics of rows vs. columns, but\non the fact that a constant row height makes scrolling through a large\nlist more efficient.) Shift-dragging a column label will change the\nwidth of that column.\n\nIf you tried out the adjustments in the previous paragraph, you may have\nnoticed that a column letter turns into a number when you hover over it.\nLabeling rows and columns differently makes cell references such as\n“cell 4B” unambiguous; you don’t have to have a convention about whether\nto say the row first or the column first. (“Cell B4” is the same as\n“cell 4B.”) On the other hand, to extract a value from column B in your\nprogram, you have to say item 2 of, not item B of. So it’s useful to be\nable to find out a column number by hovering over its letter.\n\n![image596.png](assets/image596.png) <!--  style=\"width:3.81736in;height:0.81111in\" / --> Any value that can appear in\na program can be displayed in a table cell:\n\nThis display shows that the standard cell dimensions may not be enough\nfor large value images. By expanding the entire speech balloon and then\nthe second column and all the rows, we can make the result fit:\n\n![image601.png](assets/image601.png) <!--  style=\"width:3.34097in;height:0.57708in\" / --> But we make an exception for\ncases in which the value in a cell is a list (so that the entire table\nis three-dimensional). Because lists are visually very big, we don’t try\nto fit the entire value in a cell:\n\nEven if you expand the size of the cells, Snap*!* will not display\nsublists of sublists in table view. There are two ways to see these\ninner sublists: You can switch to list view, or you can double-click on\na list icon in the table to open a dialog box showing just that\nsub-sub-list in table view.\n\n![image602.png](assets/image602.png) <!--  style=\"width:3.35417in;height:0.69444in\" / --> One last detail: If the first\nitem of a list is a list (so table view is used), but a later item\n*isn’t* a list, that later item will be displayed on a red background,\nlike an item of a single-column list:\n\nSo, in particular, if only the first item is a list, the display will\nlook almost like a one-column display.\n\n### Comma-Separated Values\n\nSpreadsheet and database programs generally offer the option to export\ntheir data as CSV (comma-separated values \\index{CSV (comma-separated\nvalues)} lists. You can import these files into Snap*!* and turn them\ninto tables (lists of lists), and you can export tables in CSV format.\nSnap*!* recognizes a CSV file by the extension .csv in its filename.\n\nA CSV file has one line per table row, with the fields separated by\ncommas within a row:\n\nJohn,Lennon,rhythm guitar\n\ntable view\n\nlist view\n\nPaul,McCartney,bass guitar\n\nGeorge,Harrison,lead guitar\n\nRingo,Starr,drums\n\nHere’s what the corresponding table looks like:\n\nHere’s how to read a spreadsheet into Snap*!*:\n\n![image607.png](assets/image607.png) <!--  style=\"width:1.20833in;height:0.27083in\" alt=\"Macintosh HD:Users:bh:Desktop:pix:watcher.png\" / --> 1. Make a variable\nwith a watcher on stage:\n\n2\\. Right-click on the watcher and choose the “import” option. (If the\nvariable’s value is already a list, be sure to click on the outside\nborder of the watcher; there is a different menu if you click on the\nlist itself.) Select the file with your csv data.\n\n3\\. There is no 3; that’s it! Snap*!* will notice that the name of the\nfile you’re importing is something.csv and will turn the text into a\nlist of lists automatically.\n\nOr, even easier, just drag and drop the file from your desktop onto the\nSnap*!* window, and Snap*!* will automatically create a variable named\nafter the file and import the data into it.\n\nIf you actually want to import the raw CSV data into a variable, either\nchange the file extension to .txt before loading it, or choose “raw\ndata” instead of “import” in the watcher menu.\n\nIf you want to export a list, put a variable watcher containing the list\non the stage, right-click its border, and choose “Export.” (Don’t\nright-click an item instead of the border; that gives a different menu.)\n\n### Multi-dimensional lists and JSON\n\nCSV format is easy to read, but works only for one- or two-dimensional\nlists. If you have a list of lists of lists, Snap*!* will instead export\nyour list as a JSON (JavaScript Object Notation) file \\index{JSON\n(JavaScript Object Notation) file} . I modified my list:\n\n![image608.png](assets/image608.png) <!--  style=\"width:6.33333in;height:0.44792in\" / --> and then exported again,\ngetting this file:\n\n\\[\\[\"John\",\"Lennon\",\"rhythm\nguitar\"\\],\\[\\[\"James\",\"Paul\"\\],\"McCartney\",\"bass\nguitar\"\\],\\[\"George\",\"Harrison\",\"lead\nguitar\"\\],\\[\"Ringo\",\"Starr\",\"drums\"\\]\\]\n\nYou can also import lists, including tables, from a .json file. (And you\ncan import plain text from a .txt file.) Drag and drop works for these\nformats also.\n\n##  Hyperblocks \\index{Hyperblocks} \n\nA *scalar* is anything other than a list. The name comes from\nmathematics, where it means a magnitude without direction, as opposed to\na vector, which points toward somewhere. A scalar function \\index{scalar\nfunction} is one whose domain and range are scalars, so all the\narithmetic operations are scalar functions, but so are the text ones\nsuch as letter and the Boolean ones such as not.\n\nThe major new feature in Snap*!* 6.0 is that the domain and range of\nmost scalar function blocks is extended to multi-dimensional\n\\index{list, multi-dimensional} lists, with the underlying scalar\nfunction applied termwise:\n\n![image609.png](assets/image609.png) <!--  style=\"width:2.5625in;height:0.91667in\" alt=\"Macintosh HD:Users:bh:Desktop:vector-monadic.png\" / --> ![image610.png](assets/image610.png) <!--  style=\"width:3.34028in;height:0.91667in\" alt=\"Macintosh HD:Users:bh:Desktop:vector-vector.png\" / --> \n\n![image611.png](assets/image611.png) <!--  style=\"width:4.94444in;height:0.69444in\" alt=\"Macintosh HD:Users:bh:Desktop:matrix-matrix.png\" / --> \n\n![image612.png](assets/image612.png) <!--  style=\"width:5.74306in;height:0.69444in\" alt=\"Macintosh HD:Users:bh:Desktop:matrix-ragged.png\" / --> Mathematicians,\nnote in the last example above that the result is just a termwise\napplication of the underlying function (7×3, 8×5, etc.), *not* matrix\nmultiplication. See Appendix B for that. For a dyadic (two-input)\nfunction, if the lengths don’t agree, the length of the result (in each\ndimension) is the length of the shorter input:\n\n![image613.png](assets/image613.png) <!--  style=\"width:6.79167in;height:0.86806in\" alt=\"Macintosh HD:Users:bh:Desktop:missing-dimension.png\" / --> However, if\nthe *number of dimensions* differs in the two inputs, then the number of\ndimensions in the result agrees with the *higher-*dimensional input; the\nlower-dimensional one is used repeatedly in the missing dimension(s):\n\n(7×6. 8×10, 1×20, *40*×*6, 20*×*10,* etc.). In particular, a *scalar*\ninput is paired with every scalar in the other input:\n\n![image614.png](assets/image614.png) <!--  style=\"width:7.48333in;height:0.63125in\" alt=\"Macintosh HD:Users:bh:Desktop:vector-alonzo.png\" / --> One important\nmotivation for this feature is how it simplifies and speeds up media\ncomputation \\index{media computation}, as in this shifting of the\nAlonzo \\index{Alonzo} costume to be bluer:\n\n![image619.png](assets/image619.png) <!--  style=\"width:1.6875in;height:1.04861in\" alt=\"Macintosh HD:Users:bh:Desktop:Screen Shot 2020-06-13 at 9.25.32 PM.png\" / --> ![image620.png](assets/image620.png) <!--  style=\"width:5.19444in;height:1.04861in\" alt=\"Graphical user interface, application Description automatically generated\" / --> Each\npixel of the result has ¾ of its original red and green, and three times\nits original blue (with its transparency unchanged). By putting some\nsliders on the stage, you can play with colors dynamically:\n\n![image621.png](assets/image621.png) <!--  style=\"width:1.02986in;height:0.18958in\" alt=\"Macintosh HD:Users:bh:Desktop:in-front-of.png\" / --> ![image193.png](assets/image193.png) <!--  style=\"width:0.88958in;height:0.2in\" / --> There\nare a few naturally scalar functions that have already had specific\nmeanings when applied to lists and therefore are not hyperblocks: = and\nidentical to (because they compare entire structures, not just scalars,\nalways reporting a single Boolean result), and and or (because they\ndon’t evaluate their second input at all if the first input determines\nthe result), join (because it converts non-scalar (and other non-text)\ninputs to text string form), and is a (type) (because it applies to its\ninput as a whole). Blocks whose inputs are “natively” lists, such as and\n, are never hyperblocks.\n\n![image622.png](assets/image622.png) <!--  style=\"width:5.23958in;height:1.67986in\" alt=\"Graphical user interface, text, application Description automatically generated\" / --> ![image205.png](assets/image205.png) <!--  style=\"width:2.09917in;height:0.2475in\" alt=\"Application Description automatically generated with low confidence\" / --> The\nreshape block \\index{reshape block} takes a list (of any depth) as its\nfirst input, and then takes zero or more sizes along the dimensions of\nan array. In the example it will report a table (a matrix) of four rows\nand three columns. If no sizes are given, the result is an empty list.\nOtherwise, the cells of the specified shape are filled with the atomic\nvalues from the input list. If more values are needed than provided, the\nblock starts again at the head of the list, using values more than once.\nIf more values are provided than needed, the extras are ignored; this\nisn’t an error.\n\n![image203.png](assets/image203.png) <!--  style=\"width:1.76in;height:0.2in\" / -->  The\ncombinations block takes any number of lists as input; it reports a list\nin which each item is a list whose length is the number of inputs; item\n*i* of a sublist is an item of input *i.* Every possible combination of\nitems of the inputs is included, so the length of the reported list is\nthe product of the lengths of the inputs.\n\n![image204.png](assets/image204.png) <!--  style=\"width:1.34in;height:0.25in\" alt=\"Icon Description automatically generated\" / -->  The item of block\n\\index{item of block} has a special set of rules, designed to preserve\nits pre-hyperblock meaning and also provide a useful behavior when given\na list as its first (index) input:\n\n1.  If the index is a number, then item of reports the indicated\n    top-level item of the list input; that item may be a sublist, in\n    which case the entire sublist is reported (the original meaning of\n    item\n    of):![image623.png](assets/image623.png) <!--  style=\"width:5.50694in;height:0.91667in\"     alt=\"Macintosh HD:Users:bh:Desktop:item-scalar.png\" / --> \n\n2.  If the index is a list of numbers (no sublists), then item of\n    reports a list of the indicated top-level items (rows, in a matrix;\n    a straightforward hyperization):\n    ![image624.png](assets/image624.png) <!--  style=\"width:6.00694in;height:0.86806in\"     alt=\"Macintosh HD:Users:bh:Desktop:item-vector.png\" / --> \n\n3.  If the index is a list of lists of numbers, then item of reports an\n    array of only those scalars whose position in the list input matches\n    the index input in all dimensions (changed in Snap*!*\n    6.6!):![image625.png](assets/image625.png) <!--  style=\"width:6.00694in;height:0.6875in\" / --> \n\n4.  If a list of list of numbers includes an empty sublist, then all\n    items are chosen along that\n    dimension:![image626.png](assets/image626.png) <!--  style=\"width:6.00694in;height:0.6875in\" / --> \n\n![image627.png](assets/image627.png) <!--  style=\"width:6.60417in;height:1.04861in\" alt=\"Graphical user interface, application, website Description automatically generated\" / --> To\nget a column or columns of a spreadsheet, use an empty list in the row\nselector (changed in Snap*!* 6.6!):\n\nThe length of block \\index{length of block} is extended to provide\nvarious ways of looking at the shape and contents of a list. The options\nother than length are mainly useful for *lists of lists,* to any depth.\nThese new options work well with hyperblocks and the APL library.\n(Examples are on the next page.)\n\nlength: reports the number of (toplevel) items in the list, as always.\n\nrank \\index{rank of block} : reports the number of *dimensions* of the\nlist, i.e., the maximum depth of lists of lists of lists of lists. (That\nexample would be rank 4.)\n\ndimensions \\index{dimensions of block} : reports a list of numbers, each\nof which is the maximum length in one dimension, so a spreadsheet of\n1000 records, each with 4 fields, would report the list \\[1000 4\\].\n\nflatten \\index{flatten of block} : reports a flat, one-dimensional list\ncontaining the *atomic* (non-list) items anywhere in the input list.\n\ncolumns \\index{columns of block} : reports a list in which the rows and\ncolumns of the input list are interchanged, so the shape of the\ntranspose of a shape \\[1000 4\\] list would be \\[4 1000\\]. This option\nworks only for lists whose rank is at most 2. The name reflects the fact\nthat the toplevel items of the reported table are the columns of the\noriginal table.\n\nreverse: reports a list in which the (toplevel) items of the input list\nare in reverse order.\n\nThe remaining three options report a (generally multi-line) text string.\nThe input list may not include any atomic (non-list) data \\index{atomic\ndata} other than text or numbers. The lines \\index{lines of block}\noption is intended for use with rank-one lists of text strings; it\nreports a string in which each list item becomes a line of text. You can\nthink of it as the opposite of the split by line block \\index{split by\nline block} . The csv \\index{csv of block} option (comma-separated\nvalues) is intended for rank-two lists that represent a spreadsheet or\nother tabular data. Each item of the input list should be a list of\natoms; the block reports a text string in which each item of the big\nlist becomes a line of text in which the items of that sublist are\nseparated by commas. The json \\index{json of block} option is for lists\nof any rank; it reports a text string in which the list structure is\nexplicitly represented using square brackets. These are the opposites of\nsplit by csv and split by json.\n\ninput\n\nThe idea of extending the domain and range of scalar functions to\ninclude arrays comes from the language APL \\index{APL}. (All the great\nprogramming languages are based on mathematical ideas. Our primary\nancestors are Smalltalk \\index{Smalltalk}, based on models, and Lisp\n\\index{Lisp}, based on lambda calculus. Prolog \\index{Prolog}, a great\nlanguage not (so far) influencing Snap*!*, is based on logic. And APL,\nnow joining our family, is based on linear algebra, which studies\nvectors and matrices. Those *other* programming languages are based on\nthe weaknesses of computer hardware.) Hyperblocks are not the whole\nstory about APL, which also has mixed-domain functions and higher order\nfunctions. Some of what’s missing is provided in the APL library. (See\nAppendix B.)\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"brand":{"brand":{"color":{"palette":{"dark-grey":"#222222","blue":"#003262"},"primary":"black"},"logo":{"medium":"images/snap-logo.png"},"typography":{"fonts":[{"family":"Open Sans","source":"google"}],"base":"Open Sans","headings":"Freight Text Pro"}},"data":{"color":{"palette":{"dark-grey":"#222222","blue":"#003262"},"primary":"black"},"logo":{"medium":"images/snap-logo.png"},"typography":{"fonts":[{"family":"Open Sans","source":"google"}],"base":"Open Sans","headings":"Freight Text Pro"}},"brandDir":"C:\\Users\\victo\\snap-manual-new","projectDir":"C:\\Users\\victo\\snap-manual-new","processedData":{"color":{"dark-grey":"#222222","blue":"#003262","primary":"black"},"typography":{"base":"Open Sans","headings":"Freight Text Pro"},"logo":{"images":{},"medium":{"light":{"path":"images/snap-logo.png"},"dark":{"path":"images/snap-logo.png"}}}}}},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../../scripts/collect-index.lua"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","bibliography":["../../references.bib"],"number-depth":1,"theme":["none","../../styles/snap-manual.scss"],"strip-comment":true,"navbar":{"logo":"../../images/snap-logo.png"}},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":true,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"brand":{"brand":{"color":{"palette":{"dark-grey":"#222222","blue":"#003262"},"primary":"black"},"logo":{"medium":"images/snap-logo.png"},"typography":{"fonts":[{"family":"Open Sans","source":"google"}],"base":"Open Sans","headings":"Freight Text Pro"}},"data":{"color":{"palette":{"dark-grey":"#222222","blue":"#003262"},"primary":"black"},"logo":{"medium":"images/snap-logo.png"},"typography":{"fonts":[{"family":"Open Sans","source":"google"}],"base":"Open Sans","headings":"Freight Text Pro"}},"brandDir":"C:\\Users\\victo\\snap-manual-new","projectDir":"C:\\Users\\victo\\snap-manual-new","processedData":{"color":{"dark-grey":"#222222","blue":"#003262","primary":"black"},"typography":{"base":"Open Sans","headings":"Freight Text Pro"},"logo":{"images":{},"medium":{"light":{"path":"images/snap-logo.png"},"dark":{"path":"images/snap-logo.png"}}}}}},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"snap-manual","include-in-header":["../../styles/latex-preamble.tex"],"include-after-body":{"text":"\\printindex\n"},"toc":true,"number-sections":true,"resource-path":["../../","../../content/assets/","../../content/assets/images/"]},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["../../references.bib"],"number-depth":1,"cover-image":"../../cover.png","documentclass":"book","papersize":"letter"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}