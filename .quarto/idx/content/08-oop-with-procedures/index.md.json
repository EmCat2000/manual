{"title":"OOP with Procedures","markdown":{"headingText":"OOP with Procedures","containsRefs":false,"markdown":"\nThe idea of object oriented programming \\index{object oriented\nprogramming} is often taught in a way that makes it seem as if a special\nobject oriented programming language is necessary. In fact, any language\nwith ﬁrst class procedures and lexical scope \\index{scope:lexical}\nallows objects to be implemented explicitly; this is a useful exercise\nto help demystify objects.\n\nThe central idea of this implementation is that an object is represented\nas a \\index{dispatch procedure} *dispatch procedure* that takes a\nmessage as input and reports the corresponding method. In this section\nwe start with a stripped-down example to show how local state works, and\nbuild up to full implementations of class/instance and prototyping OOP.\n\n## Local State with Script Variables\n\n![image852.png](assets/image852.png) <!--  style=\"width:2.23958in;height:1.51042in\" / --> \n\nThis script implements an\nobject *class*, a type of object, namely the counter class\n\\index{counter class}. In this ﬁrst simplified version there is only\none method, so no explicit message passing is necessary. When the make a\ncounter block is called, it reports a procedure, the ringed script\ninside its body. That procedure implements a specific counter object, an\n*instance* \\index{instance} of the counter class \\index{class}. When\ninvoked, a counter instance increases and reports its count variable.\nEach counter has its own local count: \\index{objects, building\nexplicitly}\n\n![image851.png](assets/image851.png) <!--  style=\"width:2.23958in;height:1.51042in\" / --> \n\nThis example will repay careful study, because it isn’t obvious why each\ninstance has a separate count. From the point of view of the make a\ncounter procedure, each invocation causes a new count variable to be\ncreated. Usually such *script variables* are temporary, going out of\nexistence when the script ends. But this one is special, because make a\ncounter returns *another script* that makes reference to the count\nvariable, so it remains active. (The script variables \\index{script\nvariables block} block makes variables local to a script. It can be used\nin a sprite’s script area or in the Block Editor. Script variables can\nbe “exported” by being used in a reported procedure, as here.)\n\nIn this approach to OOP, we are representing both classes and instances\nas procedures. The make a counter block represents the class, while each\ninstance is represented by a nameless script created each time make a\ncounter is called. The script variables created inside the make a\ncounter block but outside the ring are *instance variables,* belonging\nto a particular counter.\n\n## Messages and Dispatch Procedures\n\n In the simplified class\nabove, there is only one method, and so there are no messages; you just\ncall the instance to carry out its one method. Here is a more refined\nversion that uses message passing \\index{message passing} :\n\n![image853.png](assets/image853.png) <!--  style=\"width:4.41667in;height:3.16667in\" / -->\n\nAgain, the make a counter block represents the counter class, and again\nthe script creates a local variable count each time it is invoked. The\nlarge outer ring represents an instance. It is a *dispatch procedure*\n\\index{dispatch procedure} *:* it takes a message (just a text word) as\ninput, and it reports a method. The two smaller rings are the methods.\nThe top one is the next method; the bottom one is the reset method. The\nlatter requires an input, named value.\n\nIn the earlier version, calling the instance did the entire job. In this\nversion, calling the instance gives access to a method \\index{method},\nwhich must then be called to finish the job. We can provide a block to\ndo both procedure calls in one:\n\n![image854.png](assets/image854.png) <!--  style=\"width:4.01042in;height:0.70772in\" / --> \n\nThe ask block \\index{ask block} has two required inputs: an object and a\nmessage. It also accepts optional additional inputs, which Snap*!* puts\nin a list; that list is named args inside the block. Ask has two nested\ncall blocks. The inner one calls the object, i.e., the dispatch\nprocedure. The dispatch procedure always takes exactly one input, namely\nthe message. It reports a method, which may take any number of inputs;\nnote that this is the situation in which we drop a list of values onto\nthe arrowheads of a multiple input (in the outer call block). Note also\nthat this is one of the rare cases in which we must unringify\n\\index{unringify} the inner call block, whose *value when called* gives\nthe method.\n\n![image855.png](assets/image855.png) <!--  style=\"width:4.01042in;height:0.70772in\" / --> \n\n## Inheritance via Delegation\n\nSo, our objects now have local state variables and message passing. What\nabout inheritance \\index{inheritance} ? We can provide that capability\nusing the technique of *delegation* \\index{delegation}. Each instance\nof the child class \\index{child class} contains an instance of the\nparent class \\index{parent class}, and simply passes on the messages it\ndoesn’t want to specialize:\n\n![image857.png](assets/image857.png) <!--  style=\"width:3.8125in;height:3.58333in\" / --> \n\nThis script implements the buzzer class, which is a child of counter.\nInstead of having a count (a number) as a local state variable, each\nbuzzer has a counter (an object) as a local state variable. The class\nspecializes the next method, reporting what the counter reports unless\nthat result is divisible by 7, in which case it reports “buzz.” (Yeah,\nit should also check for a digit 7 in the number, but this code is\ncomplicated enough already.) If the message is anything other than next,\nthough, such as reset, then the buzzer simply invokes its counter’s\ndispatch procedure. So the counter handles any message that the buzzer\ndoesn’t handle explicitly. (Note that in the non-next case we call the\ncounter, not ask it something, because we want to report a method, not\nthe value that the message reports.) So, if we ask a buzzer to reset to\na value divisible by 7, it will end up reporting that number, not\n“buzz.”\n\n## An Implementation of Prototyping OOP\n\nIn the class/instance system above, it is necessary to design the\ncomplete behavior of a class before you can make any instances of the\nclass. This is okay for top-down design, but not great for\nexperimentation. Here we sketch the implementation of a *prototyping*\n\\index{prototyping} OOP system: You make an object, tinker with it, make\nclones of it, and keep tinkering. Any changes you make in the parent are\ninherited by its children. In effect, that first object is both the\nclass and an instance of the class. In the implementation below,\nchildren share properties (methods and local variables) of their parent\nunless and until a child changes a property, at which point that child\ngets a private copy. (If a child wants to change something for its\nentire family, it must ask the parent to do it.)\n\nBecause we want to be able to create and delete properties dynamically,\nwe won’t use Snap*!* variables to hold an object’s variables or methods.\nInstead, each object has two *tables,* called methods and data, each of\nwhich is an \\index{association list} *association list:* a list of\ntwo-item lists, in which each of the latter contains a *key* and a\ncorresponding *value.* We provide a lookup procedure to locate the\nkey-value pair \\index{key-value pair} corresponding to a given key in a\ngiven table.\n\n![image858.png](assets/image858.png) <!--  style=\"width:3.21528in;height:2.36111in\" / --> \n![image859.png](assets/image859.png) <!--  style=\"width:2.625in;height:0.78125in\" / --> \n\n![image860.png](assets/image860.png) <!--  style=\"width:5.60417in;height:1.15625in\" / --> \n![image861.png](assets/image861.png) <!--  style=\"width:5.60417in;height:1.15625in\" / --> \n\nThere are also commands to insert and delete entries:\n\n![image863.png](assets/image863.png) <!--  style=\"width:3.22917in;height:2.12831in\" / --> \n![image862.png](assets/image862.png) <!--  style=\"width:3.71875in;height:1.82639in\" / -->\n\nAs in the class/instance version, an object is represented as a dispatch\nprocedure \\index{dispatch procedure} that takes a message as its input\nand reports the corresponding method. When an object gets a message, it\nwill ﬁrst look for that keyword in its methods table \\index{methods\ntable} . If it’s found, the corresponding value is the method we want.\nIf not, the object looks in its data table \\index{data table}. If a\nvalue is found there, what the object returns is *not* that value, but\nrather a reporter method that, when called, will report the value. This\nmeans that what an object returns is *always* a method.\n\nIf the object has neither a method nor a datum with the desired name,\nbut it does have a parent, then the parent (that is, the parent’s\ndispatch procedure) is invoked with the message as its input.\nEventually, either a match is found, or an object with no parent is\nfound; the latter case is an error, meaning that the user has sent the\nobject a message not in its repertoire.\n\nMessages can take any number of inputs, as in the class/instance system,\nbut in the prototyping version, every method automatically gets the\nobject to which the message was originally sent as an extra ﬁrst input.\nWe must do this so that if a method is found in the parent (or\ngrandparent, etc.) of the original recipient, and that method refers to\na variable or method, it will use the child’s variable or method if the\nchild has its own version.\n\n The\nclone of block \\index{clone of block} below takes an object as its input\nand makes a child object. It should be considered as an internal part of\nthe implementation; the preferred way to make a child of an object is to\nsend that object a clone message.\n\n![image864.png](assets/image864.png) <!--  style=\"width:4.375in;height:7.46944in\" / -->\n\n Every\nobject is created with predefined methods for set, method, delete-var,\ndelete-method, and clone. It has one predefined variable, parent.\nObjects without a parent are created by calling new object:\n\n![image865.png](assets/image865.png) <!--  style=\"width:1.57292in;height:0.6875in\" / -->\n\nAs before, we provide procedures to call an object’s dispatch procedure\nand then call the method. But in this version, we provide the desired\nobject as the ﬁrst method input. We provide one procedure for Command\nmethods and one for Reporter methods:\n\n![image866.png](assets/image866.png) <!--  style=\"width:1.57292in;height:0.6875in\" / -->\n\n(Remember that the “Input list:” variant of the run and call blocks is\nmade by dragging the input expression over the arrowheads rather than\nover the input slot.)\n\nThe script below demonstrates how this prototyping system can be used to\nmake counters. We start with one prototype counter, called counter1. We\ncount this counter up a few times, then create a child counter2 and give\nit its own count variable, but *not* its own total variable. The next\nmethod always sets counter1’s total variable, which therefore keeps\ncount of the total number of times that *any* counter is incremented.\nRunning this script should \\[say\\] and (think) the following lists:\n\n\\[1 1\\] \\[2 2\\] \\[3 3\\] \\[4 4\\] (1 5) (2 6) (3 7) \\[5 8\\] \\[6 9\\] \\[7 10\\] \\[8 11\\]\n\n![image870.png](assets/image870.png) <!--  style=\"width:4.20833in;height:4.39583in\" / --> \n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","filters":["../../scripts/collect-index.lua"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.56","bibliography":["../../references.bib"],"number-depth":1,"theme":["none","../../styles/snap-manual.scss"],"strip-comment":true,"navbar":{"logo":"../../images/snap-logo.png"}},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":true,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"snap-manual","include-in-header":["../../styles/latex-preamble.tex"],"include-after-body":{"text":"\\printindex\n"},"toc":true,"number-sections":true,"resource-path":["../../","../../content/assets/","../../content/assets/images/"]},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["../../references.bib"],"number-depth":1,"cover-image":"../../cover.png","documentclass":"book","papersize":"letter"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}